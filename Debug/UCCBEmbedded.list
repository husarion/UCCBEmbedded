
UCCBEmbedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000520c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080052cc  080052cc  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000160  20000000  0800557c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000c48  20000160  080056dc  00020160  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000da8  080056dc  00020da8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023c95  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004cb0  00000000  00000000  00043e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000889f  00000000  00000000  00048acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000dc0  00000000  00000000  00051370  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001030  00000000  00000000  00052130  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008cbf  00000000  00000000  00053160  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000472f  00000000  00000000  0005be1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006054e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002258  00000000  00000000  000605cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000160 	.word	0x20000160
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080052b4 	.word	0x080052b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000164 	.word	0x20000164
 8000104:	080052b4 	.word	0x080052b4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b510      	push	{r4, lr}
 800025a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800025c:	f002 fb44 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8000260:	21fa      	movs	r1, #250	; 0xfa
 8000262:	0089      	lsls	r1, r1, #2
 8000264:	f7ff ff6c 	bl	8000140 <__udivsi3>
 8000268:	f000 fc8a 	bl	8000b80 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800026c:	2200      	movs	r2, #0
 800026e:	0021      	movs	r1, r4
 8000270:	2001      	movs	r0, #1
 8000272:	4240      	negs	r0, r0
 8000274:	f000 fc3e 	bl	8000af4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000278:	2000      	movs	r0, #0
 800027a:	bd10      	pop	{r4, pc}

0800027c <HAL_Init>:
{
 800027c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800027e:	4a06      	ldr	r2, [pc, #24]	; (8000298 <HAL_Init+0x1c>)
 8000280:	6813      	ldr	r3, [r2, #0]
 8000282:	2110      	movs	r1, #16
 8000284:	430b      	orrs	r3, r1
 8000286:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000288:	2000      	movs	r0, #0
 800028a:	f7ff ffe5 	bl	8000258 <HAL_InitTick>
  HAL_MspInit();
 800028e:	f004 fc13 	bl	8004ab8 <HAL_MspInit>
}
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800029c:	4a02      	ldr	r2, [pc, #8]	; (80002a8 <HAL_IncTick+0xc>)
 800029e:	6813      	ldr	r3, [r2, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	4770      	bx	lr
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	2000046c 	.word	0x2000046c

080002ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <HAL_GetTick+0x8>)
 80002ae:	6818      	ldr	r0, [r3, #0]
}
 80002b0:	4770      	bx	lr
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	2000046c 	.word	0x2000046c

080002b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002b8:	b530      	push	{r4, r5, lr}
 80002ba:	b083      	sub	sp, #12
 80002bc:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002be:	f7ff fff5 	bl	80002ac <HAL_GetTick>
 80002c2:	0005      	movs	r5, r0
  uint32_t wait = Delay;
 80002c4:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c6:	1c63      	adds	r3, r4, #1
 80002c8:	d000      	beq.n	80002cc <HAL_Delay+0x14>
  {
     wait++;
 80002ca:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	f7ff ffee 	bl	80002ac <HAL_GetTick>
 80002d0:	1b40      	subs	r0, r0, r5
 80002d2:	42a0      	cmp	r0, r4
 80002d4:	d3fa      	bcc.n	80002cc <HAL_Delay+0x14>
  {
  }
}
 80002d6:	b003      	add	sp, #12
 80002d8:	bd30      	pop	{r4, r5, pc}
	...

080002dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 80002dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 80002de:	2701      	movs	r7, #1

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 80002e0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80002e2:	2680      	movs	r6, #128	; 0x80
 80002e4:	0212      	lsls	r2, r2, #8
{
 80002e6:	46c6      	mov	lr, r8
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 80002e8:	003d      	movs	r5, r7
  MODIFY_REG(hcan->Instance->FMR                         ,
 80002ea:	4690      	mov	r8, r2
 80002ec:	6803      	ldr	r3, [r0, #0]
 80002ee:	00b6      	lsls	r6, r6, #2
 80002f0:	5998      	ldr	r0, [r3, r6]
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 80002f2:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(hcan->Instance->FMR                         ,
 80002f4:	4a33      	ldr	r2, [pc, #204]	; (80003c4 <HAL_CAN_ConfigFilter+0xe8>)
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 80002f6:	40a5      	lsls	r5, r4
  MODIFY_REG(hcan->Instance->FMR                         ,
 80002f8:	4010      	ands	r0, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	4302      	orrs	r2, r0
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8U)   );  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80002fe:	43e8      	mvns	r0, r5
  MODIFY_REG(hcan->Instance->FMR                         ,
 8000300:	433a      	orrs	r2, r7
{
 8000302:	b500      	push	{lr}
  MODIFY_REG(hcan->Instance->FMR                         ,
 8000304:	519a      	str	r2, [r3, r6]
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8000306:	361c      	adds	r6, #28
 8000308:	599a      	ldr	r2, [r3, r6]
 800030a:	4002      	ands	r2, r0
 800030c:	519a      	str	r2, [r3, r6]

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800030e:	69ca      	ldr	r2, [r1, #28]
 8000310:	2a00      	cmp	r2, #0
 8000312:	d13f      	bne.n	8000394 <HAL_CAN_ConfigFilter+0xb8>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000314:	3e10      	subs	r6, #16
 8000316:	599a      	ldr	r2, [r3, r6]
 8000318:	00e4      	lsls	r4, r4, #3
 800031a:	4002      	ands	r2, r0
 800031c:	519a      	str	r2, [r3, r6]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800031e:	68ca      	ldr	r2, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000320:	888e      	ldrh	r6, [r1, #4]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000322:	0412      	lsls	r2, r2, #16
 8000324:	4332      	orrs	r2, r6
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000326:	2690      	movs	r6, #144	; 0x90
 8000328:	191c      	adds	r4, r3, r4
 800032a:	00b6      	lsls	r6, r6, #2
 800032c:	51a2      	str	r2, [r4, r6]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800032e:	688a      	ldr	r2, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000330:	880e      	ldrh	r6, [r1, #0]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000332:	0412      	lsls	r2, r2, #16
 8000334:	4332      	orrs	r2, r6
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000336:	2691      	movs	r6, #145	; 0x91
 8000338:	00b6      	lsls	r6, r6, #2
 800033a:	51a2      	str	r2, [r4, r6]

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 800033c:	2481      	movs	r4, #129	; 0x81
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800033e:	698a      	ldr	r2, [r1, #24]
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8000340:	00a4      	lsls	r4, r4, #2
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000342:	2a00      	cmp	r2, #0
 8000344:	d122      	bne.n	800038c <HAL_CAN_ConfigFilter+0xb0>
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8000346:	591a      	ldr	r2, [r3, r4]
 8000348:	4002      	ands	r2, r0
 800034a:	511a      	str	r2, [r3, r4]
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800034c:	690a      	ldr	r2, [r1, #16]
 800034e:	2a00      	cmp	r2, #0
 8000350:	d116      	bne.n	8000380 <HAL_CAN_ConfigFilter+0xa4>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000352:	2485      	movs	r4, #133	; 0x85
 8000354:	00a4      	lsls	r4, r4, #2
 8000356:	591a      	ldr	r2, [r3, r4]
 8000358:	4010      	ands	r0, r2
 800035a:	5118      	str	r0, [r3, r4]
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 800035c:	6a0a      	ldr	r2, [r1, #32]
 800035e:	2a01      	cmp	r2, #1
 8000360:	d104      	bne.n	800036c <HAL_CAN_ConfigFilter+0x90>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8000362:	2187      	movs	r1, #135	; 0x87
 8000364:	0089      	lsls	r1, r1, #2
 8000366:	585a      	ldr	r2, [r3, r1]
 8000368:	432a      	orrs	r2, r5
 800036a:	505a      	str	r2, [r3, r1]
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 800036c:	2180      	movs	r1, #128	; 0x80
 800036e:	2001      	movs	r0, #1
 8000370:	0089      	lsls	r1, r1, #2
 8000372:	585a      	ldr	r2, [r3, r1]
 8000374:	4382      	bics	r2, r0
 8000376:	505a      	str	r2, [r3, r1]
  
  /* Return function status */
  return HAL_OK;
}
 8000378:	2000      	movs	r0, #0
 800037a:	bc04      	pop	{r2}
 800037c:	4690      	mov	r8, r2
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000380:	2085      	movs	r0, #133	; 0x85
 8000382:	0080      	lsls	r0, r0, #2
 8000384:	581a      	ldr	r2, [r3, r0]
 8000386:	432a      	orrs	r2, r5
 8000388:	501a      	str	r2, [r3, r0]
 800038a:	e7e7      	b.n	800035c <HAL_CAN_ConfigFilter+0x80>
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 800038c:	591a      	ldr	r2, [r3, r4]
 800038e:	432a      	orrs	r2, r5
 8000390:	511a      	str	r2, [r3, r4]
 8000392:	e7db      	b.n	800034c <HAL_CAN_ConfigFilter+0x70>
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000394:	2a01      	cmp	r2, #1
 8000396:	d1d1      	bne.n	800033c <HAL_CAN_ConfigFilter+0x60>
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000398:	2683      	movs	r6, #131	; 0x83
 800039a:	00b6      	lsls	r6, r6, #2
 800039c:	599a      	ldr	r2, [r3, r6]
 800039e:	00e4      	lsls	r4, r4, #3
 80003a0:	432a      	orrs	r2, r5
 80003a2:	519a      	str	r2, [r3, r6]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80003a4:	680a      	ldr	r2, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80003a6:	888e      	ldrh	r6, [r1, #4]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80003a8:	0412      	lsls	r2, r2, #16
 80003aa:	4332      	orrs	r2, r6
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80003ac:	2690      	movs	r6, #144	; 0x90
 80003ae:	191c      	adds	r4, r3, r4
 80003b0:	00b6      	lsls	r6, r6, #2
 80003b2:	51a2      	str	r2, [r4, r6]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003b4:	688a      	ldr	r2, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80003b6:	898e      	ldrh	r6, [r1, #12]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003b8:	0412      	lsls	r2, r2, #16
 80003ba:	4332      	orrs	r2, r6
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80003bc:	2691      	movs	r6, #145	; 0x91
 80003be:	00b6      	lsls	r6, r6, #2
 80003c0:	51a2      	str	r2, [r4, r6]
 80003c2:	e7bb      	b.n	800033c <HAL_CAN_ConfigFilter+0x60>
 80003c4:	ffffc0ff 	.word	0xffffc0ff

080003c8 <HAL_CAN_Init>:
{
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	1e05      	subs	r5, r0, #0
  if(hcan == NULL)
 80003cc:	d100      	bne.n	80003d0 <HAL_CAN_Init+0x8>
 80003ce:	e07c      	b.n	80004ca <HAL_CAN_Init+0x102>
  if(hcan->State == HAL_CAN_STATE_RESET)
 80003d0:	233d      	movs	r3, #61	; 0x3d
 80003d2:	5cc3      	ldrb	r3, [r0, r3]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d100      	bne.n	80003dc <HAL_CAN_Init+0x14>
 80003da:	e078      	b.n	80004ce <HAL_CAN_Init+0x106>
  hcan->State = HAL_CAN_STATE_BUSY;
 80003dc:	2102      	movs	r1, #2
 80003de:	233d      	movs	r3, #61	; 0x3d
 80003e0:	54e9      	strb	r1, [r5, r3]
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80003e2:	682b      	ldr	r3, [r5, #0]
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80003e4:	2601      	movs	r6, #1
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	438a      	bics	r2, r1
 80003ea:	601a      	str	r2, [r3, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	3901      	subs	r1, #1
 80003f0:	430a      	orrs	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();   
 80003f4:	f7ff ff5a 	bl	80002ac <HAL_GetTick>
 80003f8:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80003fa:	e004      	b.n	8000406 <HAL_CAN_Init+0x3e>
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80003fc:	f7ff ff56 	bl	80002ac <HAL_GetTick>
 8000400:	1bc0      	subs	r0, r0, r7
 8000402:	280a      	cmp	r0, #10
 8000404:	d857      	bhi.n	80004b6 <HAL_CAN_Init+0xee>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000406:	682b      	ldr	r3, [r5, #0]
 8000408:	685c      	ldr	r4, [r3, #4]
 800040a:	4034      	ands	r4, r6
 800040c:	d0f6      	beq.n	80003fc <HAL_CAN_Init+0x34>
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 800040e:	685a      	ldr	r2, [r3, #4]
 8000410:	4216      	tst	r6, r2
 8000412:	d057      	beq.n	80004c4 <HAL_CAN_Init+0xfc>
    if (hcan->Init.TTCM == ENABLE)
 8000414:	69aa      	ldr	r2, [r5, #24]
 8000416:	2a01      	cmp	r2, #1
 8000418:	d05e      	beq.n	80004d8 <HAL_CAN_Init+0x110>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	438a      	bics	r2, r1
 8000420:	601a      	str	r2, [r3, #0]
    if (hcan->Init.ABOM == ENABLE)
 8000422:	69ea      	ldr	r2, [r5, #28]
 8000424:	2a01      	cmp	r2, #1
 8000426:	d100      	bne.n	800042a <HAL_CAN_Init+0x62>
 8000428:	e077      	b.n	800051a <HAL_CAN_Init+0x152>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800042a:	2140      	movs	r1, #64	; 0x40
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	438a      	bics	r2, r1
 8000430:	601a      	str	r2, [r3, #0]
    if (hcan->Init.AWUM == ENABLE)
 8000432:	6a2a      	ldr	r2, [r5, #32]
 8000434:	2a01      	cmp	r2, #1
 8000436:	d100      	bne.n	800043a <HAL_CAN_Init+0x72>
 8000438:	e06a      	b.n	8000510 <HAL_CAN_Init+0x148>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800043a:	2120      	movs	r1, #32
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	438a      	bics	r2, r1
 8000440:	601a      	str	r2, [r3, #0]
    if (hcan->Init.NART == ENABLE)
 8000442:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000444:	2a01      	cmp	r2, #1
 8000446:	d05e      	beq.n	8000506 <HAL_CAN_Init+0x13e>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000448:	2110      	movs	r1, #16
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	438a      	bics	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
    if (hcan->Init.RFLM == ENABLE)
 8000450:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000452:	2a01      	cmp	r2, #1
 8000454:	d052      	beq.n	80004fc <HAL_CAN_Init+0x134>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000456:	2108      	movs	r1, #8
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	438a      	bics	r2, r1
 800045c:	601a      	str	r2, [r3, #0]
    if (hcan->Init.TXFP == ENABLE)
 800045e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000460:	2a01      	cmp	r2, #1
 8000462:	d046      	beq.n	80004f2 <HAL_CAN_Init+0x12a>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000464:	2104      	movs	r1, #4
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	438a      	bics	r2, r1
 800046a:	601a      	str	r2, [r3, #0]
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800046c:	68e9      	ldr	r1, [r5, #12]
 800046e:	68aa      	ldr	r2, [r5, #8]
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000470:	2401      	movs	r4, #1
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000472:	430a      	orrs	r2, r1
 8000474:	6929      	ldr	r1, [r5, #16]
 8000476:	430a      	orrs	r2, r1
 8000478:	6969      	ldr	r1, [r5, #20]
 800047a:	430a      	orrs	r2, r1
 800047c:	6869      	ldr	r1, [r5, #4]
 800047e:	3901      	subs	r1, #1
 8000480:	430a      	orrs	r2, r1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000482:	2101      	movs	r1, #1
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000484:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	438a      	bics	r2, r1
 800048a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();   
 800048c:	f7ff ff0e 	bl	80002ac <HAL_GetTick>
 8000490:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000492:	e004      	b.n	800049e <HAL_CAN_Init+0xd6>
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000494:	f7ff ff0a 	bl	80002ac <HAL_GetTick>
 8000498:	1b80      	subs	r0, r0, r6
 800049a:	280a      	cmp	r0, #10
 800049c:	d821      	bhi.n	80004e2 <HAL_CAN_Init+0x11a>
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 800049e:	682b      	ldr	r3, [r5, #0]
 80004a0:	685a      	ldr	r2, [r3, #4]
 80004a2:	4214      	tst	r4, r2
 80004a4:	d1f6      	bne.n	8000494 <HAL_CAN_Init+0xcc>
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	4023      	ands	r3, r4
 80004aa:	d10b      	bne.n	80004c4 <HAL_CAN_Init+0xfc>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004ac:	642b      	str	r3, [r5, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 80004ae:	233d      	movs	r3, #61	; 0x3d
    return HAL_OK;
 80004b0:	2000      	movs	r0, #0
    hcan->State = HAL_CAN_STATE_READY;
 80004b2:	54ec      	strb	r4, [r5, r3]
    return HAL_OK;
 80004b4:	e005      	b.n	80004c2 <HAL_CAN_Init+0xfa>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 80004b6:	233d      	movs	r3, #61	; 0x3d
 80004b8:	2203      	movs	r2, #3
      return HAL_TIMEOUT;
 80004ba:	2003      	movs	r0, #3
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 80004bc:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hcan);
 80004be:	3b01      	subs	r3, #1
 80004c0:	54ec      	strb	r4, [r5, r3]
}
 80004c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcan->State = HAL_CAN_STATE_ERROR;
 80004c4:	2204      	movs	r2, #4
 80004c6:	233d      	movs	r3, #61	; 0x3d
 80004c8:	54ea      	strb	r2, [r5, r3]
    return HAL_ERROR;
 80004ca:	2001      	movs	r0, #1
 80004cc:	e7f9      	b.n	80004c2 <HAL_CAN_Init+0xfa>
    hcan->Lock = HAL_UNLOCKED;
 80004ce:	223c      	movs	r2, #60	; 0x3c
 80004d0:	5483      	strb	r3, [r0, r2]
    HAL_CAN_MspInit(hcan);
 80004d2:	f004 fb1b 	bl	8004b0c <HAL_CAN_MspInit>
 80004d6:	e781      	b.n	80003dc <HAL_CAN_Init+0x14>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	430a      	orrs	r2, r1
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	e79f      	b.n	8000422 <HAL_CAN_Init+0x5a>
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 80004e2:	2203      	movs	r2, #3
 80004e4:	233d      	movs	r3, #61	; 0x3d
 80004e6:	54ea      	strb	r2, [r5, r3]
       __HAL_UNLOCK(hcan);
 80004e8:	2200      	movs	r2, #0
 80004ea:	3b01      	subs	r3, #1
 80004ec:	54ea      	strb	r2, [r5, r3]
       return HAL_TIMEOUT;
 80004ee:	2003      	movs	r0, #3
 80004f0:	e7e7      	b.n	80004c2 <HAL_CAN_Init+0xfa>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80004f2:	2104      	movs	r1, #4
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	430a      	orrs	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	e7b7      	b.n	800046c <HAL_CAN_Init+0xa4>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80004fc:	2108      	movs	r1, #8
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	430a      	orrs	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	e7ab      	b.n	800045e <HAL_CAN_Init+0x96>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000506:	2110      	movs	r1, #16
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	e79f      	b.n	8000450 <HAL_CAN_Init+0x88>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000510:	2120      	movs	r1, #32
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	430a      	orrs	r2, r1
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	e793      	b.n	8000442 <HAL_CAN_Init+0x7a>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800051a:	2140      	movs	r1, #64	; 0x40
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	430a      	orrs	r2, r1
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	e786      	b.n	8000432 <HAL_CAN_Init+0x6a>

08000524 <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	46c6      	mov	lr, r8
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000528:	6803      	ldr	r3, [r0, #0]
{
 800052a:	b500      	push	{lr}
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 800052c:	689a      	ldr	r2, [r3, #8]
{
 800052e:	0004      	movs	r4, r0
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000530:	0152      	lsls	r2, r2, #5
 8000532:	d402      	bmi.n	800053a <HAL_CAN_Transmit+0x16>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000534:	689a      	ldr	r2, [r3, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000536:	0112      	lsls	r2, r2, #4
 8000538:	d564      	bpl.n	8000604 <HAL_CAN_Transmit+0xe0>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 800053a:	223c      	movs	r2, #60	; 0x3c
 800053c:	5ca1      	ldrb	r1, [r4, r2]
 800053e:	2002      	movs	r0, #2
 8000540:	2901      	cmp	r1, #1
 8000542:	d05c      	beq.n	80005fe <HAL_CAN_Transmit+0xda>
 8000544:	2101      	movs	r1, #1
 8000546:	54a1      	strb	r1, [r4, r2]

    /* Change CAN state */
    switch(hcan->State)
 8000548:	313c      	adds	r1, #60	; 0x3c
 800054a:	5c62      	ldrb	r2, [r4, r1]
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	2a32      	cmp	r2, #50	; 0x32
 8000550:	d100      	bne.n	8000554 <HAL_CAN_Transmit+0x30>
 8000552:	e070      	b.n	8000636 <HAL_CAN_Transmit+0x112>
 8000554:	2a62      	cmp	r2, #98	; 0x62
 8000556:	d100      	bne.n	800055a <HAL_CAN_Transmit+0x36>
 8000558:	e070      	b.n	800063c <HAL_CAN_Transmit+0x118>
 800055a:	2a22      	cmp	r2, #34	; 0x22
 800055c:	d05a      	beq.n	8000614 <HAL_CAN_Transmit+0xf0>
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 800055e:	2212      	movs	r2, #18
 8000560:	5462      	strb	r2, [r4, r1]
          break;
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8000562:	689a      	ldr	r2, [r3, #8]
    {
      transmitmailbox = CAN_TXMAILBOX_0;
 8000564:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8000566:	0152      	lsls	r2, r2, #5
 8000568:	d406      	bmi.n	8000578 <HAL_CAN_Transmit+0x54>
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	6899      	ldr	r1, [r3, #8]
 800056e:	0512      	lsls	r2, r2, #20
 8000570:	400a      	ands	r2, r1
    {
      transmitmailbox = CAN_TXMAILBOX_1;
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 8000572:	4251      	negs	r1, r2
 8000574:	4151      	adcs	r1, r2
 8000576:	3101      	adds	r1, #1
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8000578:	25c0      	movs	r5, #192	; 0xc0
 800057a:	2001      	movs	r0, #1
 800057c:	010a      	lsls	r2, r1, #4
 800057e:	006d      	lsls	r5, r5, #1
 8000580:	4690      	mov	r8, r2
 8000582:	189a      	adds	r2, r3, r2
 8000584:	5956      	ldr	r6, [r2, r5]
 8000586:	4030      	ands	r0, r6
 8000588:	5150      	str	r0, [r2, r5]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800058a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800058c:	6887      	ldr	r7, [r0, #8]
 800058e:	2f00      	cmp	r7, #0
 8000590:	d143      	bne.n	800061a <HAL_CAN_Transmit+0xf6>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 8000592:	6801      	ldr	r1, [r0, #0]
 8000594:	5957      	ldr	r7, [r2, r5]
 8000596:	054e      	lsls	r6, r1, #21
 8000598:	68c1      	ldr	r1, [r0, #12]
 800059a:	430e      	orrs	r6, r1
 800059c:	433e      	orrs	r6, r7
 800059e:	5156      	str	r6, [r2, r5]
                                                           hcan->pTxMsg->IDE | \
                                                           hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 80005a0:	250f      	movs	r5, #15
 80005a2:	46ac      	mov	ip, r5
 80005a4:	4666      	mov	r6, ip
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80005a6:	4661      	mov	r1, ip
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 80005a8:	6905      	ldr	r5, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 80005aa:	4443      	add	r3, r8
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 80005ac:	4035      	ands	r5, r6
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80005ae:	3676      	adds	r6, #118	; 0x76
 80005b0:	36ff      	adds	r6, #255	; 0xff
 80005b2:	5997      	ldr	r7, [r2, r6]
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 80005b4:	6105      	str	r5, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80005b6:	438f      	bics	r7, r1
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 80005b8:	0019      	movs	r1, r3
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80005ba:	5197      	str	r7, [r2, r6]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80005bc:	5997      	ldr	r7, [r2, r6]
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 80005be:	3189      	adds	r1, #137	; 0x89
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80005c0:	433d      	orrs	r5, r7
 80005c2:	5195      	str	r5, [r2, r6]
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 80005c4:	6945      	ldr	r5, [r0, #20]
 80005c6:	31ff      	adds	r1, #255	; 0xff
 80005c8:	600d      	str	r5, [r1, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) |
 80005ca:	6981      	ldr	r1, [r0, #24]
 80005cc:	338d      	adds	r3, #141	; 0x8d
 80005ce:	33ff      	adds	r3, #255	; 0xff
 80005d0:	6019      	str	r1, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80005d2:	21c0      	movs	r1, #192	; 0xc0
 80005d4:	2501      	movs	r5, #1
 80005d6:	0049      	lsls	r1, r1, #1
 80005d8:	5853      	ldr	r3, [r2, r1]
 80005da:	432b      	orrs	r3, r5
 80005dc:	5053      	str	r3, [r2, r1]
  
    /* Get tick */
    tickstart = HAL_GetTick();   
 80005de:	f7ff fe65 	bl	80002ac <HAL_GetTick>
//        }
//      }
//    }

    /* Change CAN state */
    switch(hcan->State)
 80005e2:	223d      	movs	r2, #61	; 0x3d
 80005e4:	5ca3      	ldrb	r3, [r4, r2]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b52      	cmp	r3, #82	; 0x52
 80005ea:	d021      	beq.n	8000630 <HAL_CAN_Transmit+0x10c>
 80005ec:	2b72      	cmp	r3, #114	; 0x72
 80005ee:	d02b      	beq.n	8000648 <HAL_CAN_Transmit+0x124>
 80005f0:	2b42      	cmp	r3, #66	; 0x42
 80005f2:	d026      	beq.n	8000642 <HAL_CAN_Transmit+0x11e>
          break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_BUSY_TX */
          hcan->State = HAL_CAN_STATE_READY;
 80005f4:	54a5      	strb	r5, [r4, r2]
          break;
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80005f6:	2200      	movs	r2, #0
 80005f8:	233c      	movs	r3, #60	; 0x3c
    
    /* Return function status */
    return HAL_OK;
 80005fa:	2000      	movs	r0, #0
    __HAL_UNLOCK(hcan);
 80005fc:	54e2      	strb	r2, [r4, r3]
    hcan->State = HAL_CAN_STATE_ERROR; 

    /* Return function status */
    return HAL_ERROR;
  }
}
 80005fe:	bc04      	pop	{r2}
 8000600:	4690      	mov	r8, r2
 8000602:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 8000604:	689a      	ldr	r2, [r3, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000606:	00d2      	lsls	r2, r2, #3
 8000608:	d497      	bmi.n	800053a <HAL_CAN_Transmit+0x16>
    hcan->State = HAL_CAN_STATE_ERROR; 
 800060a:	2204      	movs	r2, #4
 800060c:	233d      	movs	r3, #61	; 0x3d
 800060e:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8000610:	2001      	movs	r0, #1
 8000612:	e7f4      	b.n	80005fe <HAL_CAN_Transmit+0xda>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000614:	3220      	adds	r2, #32
 8000616:	5462      	strb	r2, [r4, r1]
          break;
 8000618:	e7a3      	b.n	8000562 <HAL_CAN_Transmit+0x3e>
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 800061a:	5951      	ldr	r1, [r2, r5]
 800061c:	468c      	mov	ip, r1
 800061e:	6841      	ldr	r1, [r0, #4]
 8000620:	00ce      	lsls	r6, r1, #3
                                                           hcan->pTxMsg->IDE | \
 8000622:	68c1      	ldr	r1, [r0, #12]
 8000624:	430f      	orrs	r7, r1
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000626:	4661      	mov	r1, ip
                                                           hcan->pTxMsg->IDE | \
 8000628:	433e      	orrs	r6, r7
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 800062a:	430e      	orrs	r6, r1
 800062c:	5156      	str	r6, [r2, r5]
 800062e:	e7b7      	b.n	80005a0 <HAL_CAN_Transmit+0x7c>
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000630:	2332      	movs	r3, #50	; 0x32
 8000632:	54a3      	strb	r3, [r4, r2]
          break;
 8000634:	e7df      	b.n	80005f6 <HAL_CAN_Transmit+0xd2>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000636:	2252      	movs	r2, #82	; 0x52
 8000638:	5462      	strb	r2, [r4, r1]
          break;
 800063a:	e792      	b.n	8000562 <HAL_CAN_Transmit+0x3e>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 800063c:	2272      	movs	r2, #114	; 0x72
 800063e:	5462      	strb	r2, [r4, r1]
          break;
 8000640:	e78f      	b.n	8000562 <HAL_CAN_Transmit+0x3e>
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000642:	3b20      	subs	r3, #32
 8000644:	54a3      	strb	r3, [r4, r2]
          break;
 8000646:	e7d6      	b.n	80005f6 <HAL_CAN_Transmit+0xd2>
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000648:	2362      	movs	r3, #98	; 0x62
 800064a:	54a3      	strb	r3, [r4, r2]
          break;
 800064c:	e7d3      	b.n	80005f6 <HAL_CAN_Transmit+0xd2>
 800064e:	46c0      	nop			; (mov r8, r8)

08000650 <HAL_CAN_Receive_IT>:
{
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Process locked */
  __HAL_LOCK(hcan);
 8000650:	223c      	movs	r2, #60	; 0x3c
{
 8000652:	b510      	push	{r4, lr}
  __HAL_LOCK(hcan);
 8000654:	5c84      	ldrb	r4, [r0, r2]
{
 8000656:	0003      	movs	r3, r0
  __HAL_LOCK(hcan);
 8000658:	2002      	movs	r0, #2
 800065a:	2c01      	cmp	r4, #1
 800065c:	d028      	beq.n	80006b0 <HAL_CAN_Receive_IT+0x60>
 800065e:	3801      	subs	r0, #1
 8000660:	5498      	strb	r0, [r3, r2]

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 8000662:	2900      	cmp	r1, #0
 8000664:	d125      	bne.n	80006b2 <HAL_CAN_Receive_IT+0x62>
 8000666:	3201      	adds	r2, #1
 8000668:	5c99      	ldrb	r1, [r3, r2]
 800066a:	2922      	cmp	r1, #34	; 0x22
 800066c:	d04a      	beq.n	8000704 <HAL_CAN_Receive_IT+0xb4>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 800066e:	5c99      	ldrb	r1, [r3, r2]
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 8000670:	2942      	cmp	r1, #66	; 0x42
 8000672:	d047      	beq.n	8000704 <HAL_CAN_Receive_IT+0xb4>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000674:	5c99      	ldrb	r1, [r3, r2]
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8000676:	2962      	cmp	r1, #98	; 0x62
 8000678:	d044      	beq.n	8000704 <HAL_CAN_Receive_IT+0xb4>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 800067a:	5c99      	ldrb	r1, [r3, r2]
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 800067c:	2972      	cmp	r1, #114	; 0x72
 800067e:	d041      	beq.n	8000704 <HAL_CAN_Receive_IT+0xb4>
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 8000680:	5c99      	ldrb	r1, [r3, r2]
 8000682:	b2c9      	uxtb	r1, r1
 8000684:	2932      	cmp	r1, #50	; 0x32
 8000686:	d051      	beq.n	800072c <HAL_CAN_Receive_IT+0xdc>
 8000688:	2952      	cmp	r1, #82	; 0x52
 800068a:	d04c      	beq.n	8000726 <HAL_CAN_Receive_IT+0xd6>
 800068c:	2912      	cmp	r1, #18
 800068e:	d047      	beq.n	8000720 <HAL_CAN_Receive_IT+0xd0>
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
        break;
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000690:	2122      	movs	r1, #34	; 0x22
 8000692:	5499      	strb	r1, [r3, r2]
        break;
    }
  }

  /* Set CAN error code to none */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000694:	2000      	movs	r0, #0
  /*  - Enable Error warning Interrupt */
  /*  - Enable Error passive Interrupt */
  /*  - Enable Bus-off Interrupt */
  /*  - Enable Last error code Interrupt */
  /*  - Enable Error Interrupt */
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000696:	218f      	movs	r1, #143	; 0x8f
 8000698:	681a      	ldr	r2, [r3, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800069a:	6418      	str	r0, [r3, #64]	; 0x40
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800069c:	6954      	ldr	r4, [r2, #20]
 800069e:	0209      	lsls	r1, r1, #8
 80006a0:	4321      	orrs	r1, r4
 80006a2:	6151      	str	r1, [r2, #20]
                            CAN_IT_BOF |
                            CAN_IT_LEC |
                            CAN_IT_ERR);

  /* Process unlocked */
  __HAL_UNLOCK(hcan);
 80006a4:	213c      	movs	r1, #60	; 0x3c
 80006a6:	5458      	strb	r0, [r3, r1]

  if(FIFONumber == CAN_FIFO0)
  {
    /* Enable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80006a8:	6953      	ldr	r3, [r2, #20]
 80006aa:	3932      	subs	r1, #50	; 0x32
 80006ac:	430b      	orrs	r3, r1
 80006ae:	6153      	str	r3, [r2, #20]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }
  
  /* Return function status */
  return HAL_OK;
}
 80006b0:	bd10      	pop	{r4, pc}
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 80006b2:	2901      	cmp	r1, #1
 80006b4:	d019      	beq.n	80006ea <HAL_CAN_Receive_IT+0x9a>
    switch(hcan->State)
 80006b6:	213d      	movs	r1, #61	; 0x3d
 80006b8:	5c5a      	ldrb	r2, [r3, r1]
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	2a22      	cmp	r2, #34	; 0x22
 80006be:	d02c      	beq.n	800071a <HAL_CAN_Receive_IT+0xca>
 80006c0:	2a42      	cmp	r2, #66	; 0x42
 80006c2:	d027      	beq.n	8000714 <HAL_CAN_Receive_IT+0xc4>
 80006c4:	2a12      	cmp	r2, #18
 80006c6:	d022      	beq.n	800070e <HAL_CAN_Receive_IT+0xbe>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80006c8:	2232      	movs	r2, #50	; 0x32
 80006ca:	545a      	strb	r2, [r3, r1]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006cc:	2000      	movs	r0, #0
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80006ce:	218f      	movs	r1, #143	; 0x8f
 80006d0:	681a      	ldr	r2, [r3, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006d2:	6418      	str	r0, [r3, #64]	; 0x40
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80006d4:	6954      	ldr	r4, [r2, #20]
 80006d6:	0209      	lsls	r1, r1, #8
 80006d8:	4321      	orrs	r1, r4
 80006da:	6151      	str	r1, [r2, #20]
  __HAL_UNLOCK(hcan);
 80006dc:	213c      	movs	r1, #60	; 0x3c
 80006de:	5458      	strb	r0, [r3, r1]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80006e0:	6953      	ldr	r3, [r2, #20]
 80006e2:	3114      	adds	r1, #20
 80006e4:	430b      	orrs	r3, r1
 80006e6:	6153      	str	r3, [r2, #20]
 80006e8:	e7e2      	b.n	80006b0 <HAL_CAN_Receive_IT+0x60>
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 80006ea:	223d      	movs	r2, #61	; 0x3d
 80006ec:	5c99      	ldrb	r1, [r3, r2]
 80006ee:	2932      	cmp	r1, #50	; 0x32
 80006f0:	d008      	beq.n	8000704 <HAL_CAN_Receive_IT+0xb4>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80006f2:	5c99      	ldrb	r1, [r3, r2]
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 80006f4:	2952      	cmp	r1, #82	; 0x52
 80006f6:	d005      	beq.n	8000704 <HAL_CAN_Receive_IT+0xb4>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80006f8:	5c99      	ldrb	r1, [r3, r2]
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80006fa:	2962      	cmp	r1, #98	; 0x62
 80006fc:	d002      	beq.n	8000704 <HAL_CAN_Receive_IT+0xb4>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 80006fe:	5c9a      	ldrb	r2, [r3, r2]
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000700:	2a72      	cmp	r2, #114	; 0x72
 8000702:	d1d8      	bne.n	80006b6 <HAL_CAN_Receive_IT+0x66>
    __HAL_UNLOCK(hcan);
 8000704:	2100      	movs	r1, #0
 8000706:	223c      	movs	r2, #60	; 0x3c
    return HAL_BUSY;
 8000708:	2002      	movs	r0, #2
    __HAL_UNLOCK(hcan);
 800070a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800070c:	e7d0      	b.n	80006b0 <HAL_CAN_Receive_IT+0x60>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 800070e:	3240      	adds	r2, #64	; 0x40
 8000710:	545a      	strb	r2, [r3, r1]
        break;
 8000712:	e7db      	b.n	80006cc <HAL_CAN_Receive_IT+0x7c>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000714:	2272      	movs	r2, #114	; 0x72
 8000716:	545a      	strb	r2, [r3, r1]
        break;
 8000718:	e7d8      	b.n	80006cc <HAL_CAN_Receive_IT+0x7c>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800071a:	2262      	movs	r2, #98	; 0x62
 800071c:	545a      	strb	r2, [r3, r1]
        break;
 800071e:	e7d5      	b.n	80006cc <HAL_CAN_Receive_IT+0x7c>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000720:	3130      	adds	r1, #48	; 0x30
 8000722:	5499      	strb	r1, [r3, r2]
        break;
 8000724:	e7b6      	b.n	8000694 <HAL_CAN_Receive_IT+0x44>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000726:	2172      	movs	r1, #114	; 0x72
 8000728:	5499      	strb	r1, [r3, r2]
        break;
 800072a:	e7b3      	b.n	8000694 <HAL_CAN_Receive_IT+0x44>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800072c:	2162      	movs	r1, #98	; 0x62
 800072e:	5499      	strb	r1, [r3, r2]
        break;
 8000730:	e7b0      	b.n	8000694 <HAL_CAN_Receive_IT+0x44>
 8000732:	46c0      	nop			; (mov r8, r8)

08000734 <HAL_CAN_TxCpltCallback>:
 8000734:	4770      	bx	lr
 8000736:	46c0      	nop			; (mov r8, r8)

08000738 <HAL_CAN_IRQHandler>:
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;

  /* Check Overrun flag for FIFO0 */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8000738:	2210      	movs	r2, #16
{
 800073a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 800073c:	6803      	ldr	r3, [r0, #0]
{
 800073e:	0004      	movs	r4, r0
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8000740:	68d9      	ldr	r1, [r3, #12]
 8000742:	420a      	tst	r2, r1
 8000744:	d003      	beq.n	800074e <HAL_CAN_IRQHandler+0x16>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0)))
 8000746:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8000748:	0709      	lsls	r1, r1, #28
 800074a:	d500      	bpl.n	800074e <HAL_CAN_IRQHandler+0x16>
 800074c:	e082      	b.n	8000854 <HAL_CAN_IRQHandler+0x11c>
 800074e:	2080      	movs	r0, #128	; 0x80
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000750:	2500      	movs	r5, #0
 8000752:	00c0      	lsls	r0, r0, #3
    /* Clear FIFO0 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
  }

  /* Check Overrun flag for FIFO1 */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 8000754:	2210      	movs	r2, #16
 8000756:	6919      	ldr	r1, [r3, #16]
 8000758:	420a      	tst	r2, r1
 800075a:	d003      	beq.n	8000764 <HAL_CAN_IRQHandler+0x2c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1)))
 800075c:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 800075e:	0649      	lsls	r1, r1, #25
 8000760:	d500      	bpl.n	8000764 <HAL_CAN_IRQHandler+0x2c>
 8000762:	e074      	b.n	800084e <HAL_CAN_IRQHandler+0x116>
    /* Clear FIFO1 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
  }

  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	07d2      	lsls	r2, r2, #31
 8000768:	d511      	bpl.n	800078e <HAL_CAN_IRQHandler+0x56>
  {
    /* Check Transmit request completion status */
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 800076a:	689a      	ldr	r2, [r3, #8]
 800076c:	49c3      	ldr	r1, [pc, #780]	; (8000a7c <HAL_CAN_IRQHandler+0x344>)
 800076e:	400a      	ands	r2, r1
 8000770:	428a      	cmp	r2, r1
 8000772:	d100      	bne.n	8000776 <HAL_CAN_IRQHandler+0x3e>
 8000774:	e082      	b.n	800087c <HAL_CAN_IRQHandler+0x144>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8000776:	689a      	ldr	r2, [r3, #8]
 8000778:	49c1      	ldr	r1, [pc, #772]	; (8000a80 <HAL_CAN_IRQHandler+0x348>)
 800077a:	400a      	ands	r2, r1
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 800077c:	428a      	cmp	r2, r1
 800077e:	d100      	bne.n	8000782 <HAL_CAN_IRQHandler+0x4a>
 8000780:	e07c      	b.n	800087c <HAL_CAN_IRQHandler+0x144>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 8000782:	689a      	ldr	r2, [r3, #8]
 8000784:	49bf      	ldr	r1, [pc, #764]	; (8000a84 <HAL_CAN_IRQHandler+0x34c>)
 8000786:	400a      	ands	r2, r1
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8000788:	428a      	cmp	r2, r1
 800078a:	d100      	bne.n	800078e <HAL_CAN_IRQHandler+0x56>
 800078c:	e076      	b.n	800087c <HAL_CAN_IRQHandler+0x144>
                                   CAN_FLAG_TXOK0 | CAN_FLAG_TXOK1 | CAN_FLAG_TXOK2);
    }
  }
  
  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	0792      	lsls	r2, r2, #30
 8000792:	d503      	bpl.n	800079c <HAL_CAN_IRQHandler+0x64>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0U))
 8000794:	68da      	ldr	r2, [r3, #12]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8000796:	0792      	lsls	r2, r2, #30
 8000798:	d000      	beq.n	800079c <HAL_CAN_IRQHandler+0x64>
 800079a:	e09c      	b.n	80008d6 <HAL_CAN_IRQHandler+0x19e>
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
  }
  
  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	06d2      	lsls	r2, r2, #27
 80007a0:	d503      	bpl.n	80007aa <HAL_CAN_IRQHandler+0x72>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0U))
 80007a2:	691a      	ldr	r2, [r3, #16]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 80007a4:	0792      	lsls	r2, r2, #30
 80007a6:	d000      	beq.n	80007aa <HAL_CAN_IRQHandler+0x72>
 80007a8:	e0ef      	b.n	800098a <HAL_CAN_IRQHandler+0x252>
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
  }
  
  /* Set error code in handle */
  hcan->ErrorCode |= errorcode;
 80007aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007ac:	4315      	orrs	r5, r2

  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 80007ae:	2201      	movs	r2, #1
  hcan->ErrorCode |= errorcode;
 80007b0:	6425      	str	r5, [r4, #64]	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 80007b2:	6999      	ldr	r1, [r3, #24]
 80007b4:	420a      	tst	r2, r1
 80007b6:	d002      	beq.n	80007be <HAL_CAN_IRQHandler+0x86>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 80007b8:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 80007ba:	05c9      	lsls	r1, r1, #23
 80007bc:	d457      	bmi.n	800086e <HAL_CAN_IRQHandler+0x136>
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 80007be:	2202      	movs	r2, #2
 80007c0:	6999      	ldr	r1, [r3, #24]
 80007c2:	420a      	tst	r2, r1
 80007c4:	d002      	beq.n	80007cc <HAL_CAN_IRQHandler+0x94>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 80007c6:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 80007c8:	0589      	lsls	r1, r1, #22
 80007ca:	d449      	bmi.n	8000860 <HAL_CAN_IRQHandler+0x128>
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 80007cc:	2204      	movs	r2, #4
 80007ce:	6999      	ldr	r1, [r3, #24]
 80007d0:	420a      	tst	r2, r1
 80007d2:	d002      	beq.n	80007da <HAL_CAN_IRQHandler+0xa2>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 80007d4:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 80007d6:	0549      	lsls	r1, r1, #21
 80007d8:	d432      	bmi.n	8000840 <HAL_CAN_IRQHandler+0x108>
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 80007da:	2270      	movs	r2, #112	; 0x70
 80007dc:	6999      	ldr	r1, [r3, #24]
 80007de:	420a      	tst	r2, r1
 80007e0:	d002      	beq.n	80007e8 <HAL_CAN_IRQHandler+0xb0>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 80007e2:	6959      	ldr	r1, [r3, #20]
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 80007e4:	0509      	lsls	r1, r1, #20
 80007e6:	d411      	bmi.n	800080c <HAL_CAN_IRQHandler+0xd4>
    /* Clear Last error code Flag */ 
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
  }

  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 80007e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	d00d      	beq.n	800080a <HAL_CAN_IRQHandler+0xd2>
  {
    /* Clear ERRI Flag */ 
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 80007ee:	2104      	movs	r1, #4
 80007f0:	685a      	ldr	r2, [r3, #4]
                               CAN_IT_FMP1|
                               CAN_IT_FOV1|
                               CAN_IT_TME  );

    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 80007f2:	0020      	movs	r0, r4
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 80007f4:	430a      	orrs	r2, r1
 80007f6:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 80007f8:	223d      	movs	r2, #61	; 0x3d
 80007fa:	3903      	subs	r1, #3
 80007fc:	54a1      	strb	r1, [r4, r2]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	49a1      	ldr	r1, [pc, #644]	; (8000a88 <HAL_CAN_IRQHandler+0x350>)
 8000802:	400a      	ands	r2, r1
 8000804:	615a      	str	r2, [r3, #20]
    HAL_CAN_ErrorCallback(hcan);
 8000806:	f003 fc9d 	bl	8004144 <HAL_CAN_ErrorCallback>
  }  
}
 800080a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800080c:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 800080e:	0409      	lsls	r1, r1, #16
 8000810:	d5ea      	bpl.n	80007e8 <HAL_CAN_IRQHandler+0xb0>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8000812:	6999      	ldr	r1, [r3, #24]
 8000814:	400a      	ands	r2, r1
 8000816:	2a30      	cmp	r2, #48	; 0x30
 8000818:	d100      	bne.n	800081c <HAL_CAN_IRQHandler+0xe4>
 800081a:	e164      	b.n	8000ae6 <HAL_CAN_IRQHandler+0x3ae>
 800081c:	d800      	bhi.n	8000820 <HAL_CAN_IRQHandler+0xe8>
 800081e:	e141      	b.n	8000aa4 <HAL_CAN_IRQHandler+0x36c>
 8000820:	2a50      	cmp	r2, #80	; 0x50
 8000822:	d100      	bne.n	8000826 <HAL_CAN_IRQHandler+0xee>
 8000824:	e139      	b.n	8000a9a <HAL_CAN_IRQHandler+0x362>
 8000826:	2a60      	cmp	r2, #96	; 0x60
 8000828:	d100      	bne.n	800082c <HAL_CAN_IRQHandler+0xf4>
 800082a:	e156      	b.n	8000ada <HAL_CAN_IRQHandler+0x3a2>
 800082c:	2a40      	cmp	r2, #64	; 0x40
 800082e:	d102      	bne.n	8000836 <HAL_CAN_IRQHandler+0xfe>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8000830:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000832:	430a      	orrs	r2, r1
 8000834:	6422      	str	r2, [r4, #64]	; 0x40
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000836:	2170      	movs	r1, #112	; 0x70
 8000838:	699a      	ldr	r2, [r3, #24]
 800083a:	438a      	bics	r2, r1
 800083c:	619a      	str	r2, [r3, #24]
 800083e:	e7d3      	b.n	80007e8 <HAL_CAN_IRQHandler+0xb0>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000840:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000842:	0409      	lsls	r1, r1, #16
 8000844:	d5c9      	bpl.n	80007da <HAL_CAN_IRQHandler+0xa2>
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000846:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000848:	430a      	orrs	r2, r1
 800084a:	6422      	str	r2, [r4, #64]	; 0x40
 800084c:	e7c5      	b.n	80007da <HAL_CAN_IRQHandler+0xa2>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800084e:	611a      	str	r2, [r3, #16]
    errorcode |= HAL_CAN_ERROR_FOV1;
 8000850:	0005      	movs	r5, r0
 8000852:	e787      	b.n	8000764 <HAL_CAN_IRQHandler+0x2c>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000854:	20c0      	movs	r0, #192	; 0xc0
    errorcode |= HAL_CAN_ERROR_FOV0;
 8000856:	2580      	movs	r5, #128	; 0x80
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	00c0      	lsls	r0, r0, #3
    errorcode |= HAL_CAN_ERROR_FOV0;
 800085c:	00ad      	lsls	r5, r5, #2
 800085e:	e779      	b.n	8000754 <HAL_CAN_IRQHandler+0x1c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000860:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000862:	0409      	lsls	r1, r1, #16
 8000864:	d5b2      	bpl.n	80007cc <HAL_CAN_IRQHandler+0x94>
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000866:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000868:	430a      	orrs	r2, r1
 800086a:	6422      	str	r2, [r4, #64]	; 0x40
 800086c:	e7ae      	b.n	80007cc <HAL_CAN_IRQHandler+0x94>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800086e:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000870:	0409      	lsls	r1, r1, #16
 8000872:	d5a4      	bpl.n	80007be <HAL_CAN_IRQHandler+0x86>
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8000874:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000876:	430a      	orrs	r2, r1
 8000878:	6422      	str	r2, [r4, #64]	; 0x40
 800087a:	e7a0      	b.n	80007be <HAL_CAN_IRQHandler+0x86>
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	0792      	lsls	r2, r2, #30
 8000880:	d409      	bmi.n	8000896 <HAL_CAN_IRQHandler+0x15e>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 8000882:	689a      	ldr	r2, [r3, #8]
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 8000884:	0592      	lsls	r2, r2, #22
 8000886:	d406      	bmi.n	8000896 <HAL_CAN_IRQHandler+0x15e>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2)))
 8000888:	689a      	ldr	r2, [r3, #8]
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 800088a:	0392      	lsls	r2, r2, #14
 800088c:	d403      	bmi.n	8000896 <HAL_CAN_IRQHandler+0x15e>
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0112      	lsls	r2, r2, #4
 8000892:	4315      	orrs	r5, r2
 8000894:	e01a      	b.n	80008cc <HAL_CAN_IRQHandler+0x194>
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8000896:	2101      	movs	r1, #1
 8000898:	695a      	ldr	r2, [r3, #20]
 800089a:	438a      	bics	r2, r1
 800089c:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 800089e:	223d      	movs	r2, #61	; 0x3d
 80008a0:	5ca2      	ldrb	r2, [r4, r2]
 80008a2:	2a12      	cmp	r2, #18
 80008a4:	d100      	bne.n	80008a8 <HAL_CAN_IRQHandler+0x170>
 80008a6:	e0c6      	b.n	8000a36 <HAL_CAN_IRQHandler+0x2fe>
                               CAN_IT_LEC |
                               CAN_IT_ERR );
  }

  /* Change CAN state */
  switch(hcan->State)
 80008a8:	223d      	movs	r2, #61	; 0x3d
 80008aa:	5ca3      	ldrb	r3, [r4, r2]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b52      	cmp	r3, #82	; 0x52
 80008b0:	d100      	bne.n	80008b4 <HAL_CAN_IRQHandler+0x17c>
 80008b2:	e0c5      	b.n	8000a40 <HAL_CAN_IRQHandler+0x308>
 80008b4:	2b72      	cmp	r3, #114	; 0x72
 80008b6:	d100      	bne.n	80008ba <HAL_CAN_IRQHandler+0x182>
 80008b8:	e0da      	b.n	8000a70 <HAL_CAN_IRQHandler+0x338>
 80008ba:	2b42      	cmp	r3, #66	; 0x42
 80008bc:	d100      	bne.n	80008c0 <HAL_CAN_IRQHandler+0x188>
 80008be:	e0d4      	b.n	8000a6a <HAL_CAN_IRQHandler+0x332>
      break;
    case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
      break;
    default: /* HAL_CAN_STATE_BUSY_TX */
      hcan->State = HAL_CAN_STATE_READY;
 80008c0:	2301      	movs	r3, #1
 80008c2:	54a3      	strb	r3, [r4, r2]
      break;
  }

  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 80008c4:	0020      	movs	r0, r4
 80008c6:	f7ff ff35 	bl	8000734 <HAL_CAN_TxCpltCallback>
 80008ca:	6823      	ldr	r3, [r4, #0]
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 80008cc:	6899      	ldr	r1, [r3, #8]
 80008ce:	4a6f      	ldr	r2, [pc, #444]	; (8000a8c <HAL_CAN_IRQHandler+0x354>)
 80008d0:	430a      	orrs	r2, r1
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	e75b      	b.n	800078e <HAL_CAN_IRQHandler+0x56>
  {
    pRxMsg = hcan->pRx1Msg;
  }

  /* Get the Id */
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80008d6:	20d8      	movs	r0, #216	; 0xd8
 80008d8:	2104      	movs	r1, #4
 80008da:	0040      	lsls	r0, r0, #1
 80008dc:	581e      	ldr	r6, [r3, r0]
    pRxMsg = hcan->pRxMsg;
 80008de:	6b62      	ldr	r2, [r4, #52]	; 0x34
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80008e0:	4031      	ands	r1, r6
 80008e2:	6091      	str	r1, [r2, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 80008e4:	d000      	beq.n	80008e8 <HAL_CAN_IRQHandler+0x1b0>
 80008e6:	e0ae      	b.n	8000a46 <HAL_CAN_IRQHandler+0x30e>
  {
    pRxMsg->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_TI0R_STID_Pos;
 80008e8:	5819      	ldr	r1, [r3, r0]
 80008ea:	0d49      	lsrs	r1, r1, #21
 80008ec:	6011      	str	r1, [r2, #0]
  }
  else
  {
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
  }
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 80008ee:	21d8      	movs	r1, #216	; 0xd8
 80008f0:	0049      	lsls	r1, r1, #1
 80008f2:	5859      	ldr	r1, [r3, r1]
  /* Get the DLC */
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008f4:	20da      	movs	r0, #218	; 0xda
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 80008f6:	0789      	lsls	r1, r1, #30
 80008f8:	0fc9      	lsrs	r1, r1, #31
 80008fa:	60d1      	str	r1, [r2, #12]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008fc:	210f      	movs	r1, #15
 80008fe:	0040      	lsls	r0, r0, #1
 8000900:	581e      	ldr	r6, [r3, r0]
 8000902:	4031      	ands	r1, r6
 8000904:	6111      	str	r1, [r2, #16]
  /* Get the FMI */
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000906:	5819      	ldr	r1, [r3, r0]
 8000908:	0409      	lsls	r1, r1, #16
 800090a:	0e09      	lsrs	r1, r1, #24
 800090c:	61d1      	str	r1, [r2, #28]
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
 800090e:	2100      	movs	r1, #0
 8000910:	6211      	str	r1, [r2, #32]
  /* Get the data field */
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8000912:	31b9      	adds	r1, #185	; 0xb9
 8000914:	31ff      	adds	r1, #255	; 0xff
 8000916:	5858      	ldr	r0, [r3, r1]
 8000918:	7510      	strb	r0, [r2, #20]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 800091a:	5858      	ldr	r0, [r3, r1]
 800091c:	0a00      	lsrs	r0, r0, #8
 800091e:	7550      	strb	r0, [r2, #21]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 8000920:	5858      	ldr	r0, [r3, r1]
 8000922:	0c00      	lsrs	r0, r0, #16
 8000924:	7590      	strb	r0, [r2, #22]
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
 8000926:	5859      	ldr	r1, [r3, r1]
 8000928:	0e09      	lsrs	r1, r1, #24
 800092a:	75d1      	strb	r1, [r2, #23]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 800092c:	21de      	movs	r1, #222	; 0xde
 800092e:	0049      	lsls	r1, r1, #1
 8000930:	5858      	ldr	r0, [r3, r1]
 8000932:	7610      	strb	r0, [r2, #24]
  pRxMsg->Data[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8000934:	5858      	ldr	r0, [r3, r1]
 8000936:	0a00      	lsrs	r0, r0, #8
 8000938:	7650      	strb	r0, [r2, #25]
  pRxMsg->Data[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA6_Pos;
 800093a:	5858      	ldr	r0, [r3, r1]
 800093c:	0c00      	lsrs	r0, r0, #16
 800093e:	7690      	strb	r0, [r2, #26]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8000940:	5859      	ldr	r1, [r3, r1]
 8000942:	0e09      	lsrs	r1, r1, #24
 8000944:	76d1      	strb	r1, [r2, #27]

  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000946:	2120      	movs	r1, #32
 8000948:	68da      	ldr	r2, [r3, #12]
 800094a:	430a      	orrs	r2, r1
 800094c:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	3916      	subs	r1, #22
 8000952:	438a      	bics	r2, r1
 8000954:	615a      	str	r2, [r3, #20]
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }
  
  if((hcan->State == HAL_CAN_STATE_BUSY_RX0) || (hcan->State == HAL_CAN_STATE_BUSY_RX1))
 8000956:	223d      	movs	r2, #61	; 0x3d
 8000958:	5ca1      	ldrb	r1, [r4, r2]
 800095a:	2922      	cmp	r1, #34	; 0x22
 800095c:	d07b      	beq.n	8000a56 <HAL_CAN_IRQHandler+0x31e>
 800095e:	5ca2      	ldrb	r2, [r4, r2]
 8000960:	2a32      	cmp	r2, #50	; 0x32
 8000962:	d078      	beq.n	8000a56 <HAL_CAN_IRQHandler+0x31e>
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 8000964:	223d      	movs	r2, #61	; 0x3d
 8000966:	5ca3      	ldrb	r3, [r4, r2]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b62      	cmp	r3, #98	; 0x62
 800096c:	d100      	bne.n	8000970 <HAL_CAN_IRQHandler+0x238>
 800096e:	e0a6      	b.n	8000abe <HAL_CAN_IRQHandler+0x386>
 8000970:	2b72      	cmp	r3, #114	; 0x72
 8000972:	d100      	bne.n	8000976 <HAL_CAN_IRQHandler+0x23e>
 8000974:	e0a0      	b.n	8000ab8 <HAL_CAN_IRQHandler+0x380>
 8000976:	2b42      	cmp	r3, #66	; 0x42
 8000978:	d100      	bne.n	800097c <HAL_CAN_IRQHandler+0x244>
 800097a:	e08b      	b.n	8000a94 <HAL_CAN_IRQHandler+0x35c>
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
        break;
      default: /* HAL_CAN_STATE_BUSY_RX0 */
        hcan->State = HAL_CAN_STATE_READY;
 800097c:	2301      	movs	r3, #1
 800097e:	54a3      	strb	r3, [r4, r2]
        break;
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8000980:	0020      	movs	r0, r4
 8000982:	f003 fbe5 	bl	8004150 <HAL_CAN_RxCpltCallback>
 8000986:	6823      	ldr	r3, [r4, #0]
 8000988:	e708      	b.n	800079c <HAL_CAN_IRQHandler+0x64>
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 800098a:	20e0      	movs	r0, #224	; 0xe0
 800098c:	2104      	movs	r1, #4
 800098e:	0040      	lsls	r0, r0, #1
 8000990:	581e      	ldr	r6, [r3, r0]
    pRxMsg = hcan->pRx1Msg;
 8000992:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000994:	4031      	ands	r1, r6
 8000996:	6091      	str	r1, [r2, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8000998:	d159      	bne.n	8000a4e <HAL_CAN_IRQHandler+0x316>
    pRxMsg->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_TI0R_STID_Pos;
 800099a:	5819      	ldr	r1, [r3, r0]
 800099c:	0d49      	lsrs	r1, r1, #21
 800099e:	6011      	str	r1, [r2, #0]
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 80009a0:	21e0      	movs	r1, #224	; 0xe0
 80009a2:	2001      	movs	r0, #1
 80009a4:	0049      	lsls	r1, r1, #1
 80009a6:	5859      	ldr	r1, [r3, r1]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 80009a8:	26e2      	movs	r6, #226	; 0xe2
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 80009aa:	0849      	lsrs	r1, r1, #1
 80009ac:	4001      	ands	r1, r0
 80009ae:	60d1      	str	r1, [r2, #12]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 80009b0:	210f      	movs	r1, #15
 80009b2:	0076      	lsls	r6, r6, #1
 80009b4:	599f      	ldr	r7, [r3, r6]
 80009b6:	4039      	ands	r1, r7
 80009b8:	6111      	str	r1, [r2, #16]
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 80009ba:	5999      	ldr	r1, [r3, r6]
  pRxMsg->FIFONumber = FIFONumber;
 80009bc:	6210      	str	r0, [r2, #32]
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 80009be:	0409      	lsls	r1, r1, #16
 80009c0:	0e09      	lsrs	r1, r1, #24
 80009c2:	61d1      	str	r1, [r2, #28]
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80009c4:	21e4      	movs	r1, #228	; 0xe4
 80009c6:	0049      	lsls	r1, r1, #1
 80009c8:	5858      	ldr	r0, [r3, r1]
 80009ca:	7510      	strb	r0, [r2, #20]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80009cc:	5858      	ldr	r0, [r3, r1]
 80009ce:	0a00      	lsrs	r0, r0, #8
 80009d0:	7550      	strb	r0, [r2, #21]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80009d2:	5858      	ldr	r0, [r3, r1]
 80009d4:	0c00      	lsrs	r0, r0, #16
 80009d6:	7590      	strb	r0, [r2, #22]
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80009d8:	5859      	ldr	r1, [r3, r1]
 80009da:	0e09      	lsrs	r1, r1, #24
 80009dc:	75d1      	strb	r1, [r2, #23]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80009de:	21e6      	movs	r1, #230	; 0xe6
 80009e0:	0049      	lsls	r1, r1, #1
 80009e2:	5858      	ldr	r0, [r3, r1]
 80009e4:	7610      	strb	r0, [r2, #24]
  pRxMsg->Data[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA5_Pos;
 80009e6:	5858      	ldr	r0, [r3, r1]
 80009e8:	0a00      	lsrs	r0, r0, #8
 80009ea:	7650      	strb	r0, [r2, #25]
  pRxMsg->Data[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA6_Pos;
 80009ec:	5858      	ldr	r0, [r3, r1]
 80009ee:	0c00      	lsrs	r0, r0, #16
 80009f0:	7690      	strb	r0, [r2, #26]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 80009f2:	5859      	ldr	r1, [r3, r1]
 80009f4:	0e09      	lsrs	r1, r1, #24
 80009f6:	76d1      	strb	r1, [r2, #27]
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 80009f8:	2120      	movs	r1, #32
 80009fa:	691a      	ldr	r2, [r3, #16]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	611a      	str	r2, [r3, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000a00:	695a      	ldr	r2, [r3, #20]
 8000a02:	3130      	adds	r1, #48	; 0x30
 8000a04:	438a      	bics	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
  if((hcan->State == HAL_CAN_STATE_BUSY_RX0) || (hcan->State == HAL_CAN_STATE_BUSY_RX1))
 8000a08:	223d      	movs	r2, #61	; 0x3d
 8000a0a:	5ca1      	ldrb	r1, [r4, r2]
 8000a0c:	2922      	cmp	r1, #34	; 0x22
 8000a0e:	d027      	beq.n	8000a60 <HAL_CAN_IRQHandler+0x328>
 8000a10:	5ca2      	ldrb	r2, [r4, r2]
 8000a12:	2a32      	cmp	r2, #50	; 0x32
 8000a14:	d024      	beq.n	8000a60 <HAL_CAN_IRQHandler+0x328>
    switch(hcan->State)
 8000a16:	223d      	movs	r2, #61	; 0x3d
 8000a18:	5ca3      	ldrb	r3, [r4, r2]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b62      	cmp	r3, #98	; 0x62
 8000a1e:	d054      	beq.n	8000aca <HAL_CAN_IRQHandler+0x392>
 8000a20:	2b72      	cmp	r3, #114	; 0x72
 8000a22:	d04f      	beq.n	8000ac4 <HAL_CAN_IRQHandler+0x38c>
 8000a24:	2b52      	cmp	r3, #82	; 0x52
 8000a26:	d026      	beq.n	8000a76 <HAL_CAN_IRQHandler+0x33e>
        hcan->State = HAL_CAN_STATE_READY;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	54a3      	strb	r3, [r4, r2]
  HAL_CAN_RxCpltCallback(hcan);
 8000a2c:	0020      	movs	r0, r4
 8000a2e:	f003 fb8f 	bl	8004150 <HAL_CAN_RxCpltCallback>
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	e6b9      	b.n	80007aa <HAL_CAN_IRQHandler+0x72>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000a36:	695a      	ldr	r2, [r3, #20]
 8000a38:	4915      	ldr	r1, [pc, #84]	; (8000a90 <HAL_CAN_IRQHandler+0x358>)
 8000a3a:	400a      	ands	r2, r1
 8000a3c:	615a      	str	r2, [r3, #20]
 8000a3e:	e733      	b.n	80008a8 <HAL_CAN_IRQHandler+0x170>
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000a40:	2332      	movs	r3, #50	; 0x32
 8000a42:	54a3      	strb	r3, [r4, r2]
 8000a44:	e73e      	b.n	80008c4 <HAL_CAN_IRQHandler+0x18c>
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
 8000a46:	5819      	ldr	r1, [r3, r0]
 8000a48:	08c9      	lsrs	r1, r1, #3
 8000a4a:	6051      	str	r1, [r2, #4]
 8000a4c:	e74f      	b.n	80008ee <HAL_CAN_IRQHandler+0x1b6>
 8000a4e:	5819      	ldr	r1, [r3, r0]
 8000a50:	08c9      	lsrs	r1, r1, #3
 8000a52:	6051      	str	r1, [r2, #4]
 8000a54:	e7a4      	b.n	80009a0 <HAL_CAN_IRQHandler+0x268>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	490d      	ldr	r1, [pc, #52]	; (8000a90 <HAL_CAN_IRQHandler+0x358>)
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	e781      	b.n	8000964 <HAL_CAN_IRQHandler+0x22c>
 8000a60:	695a      	ldr	r2, [r3, #20]
 8000a62:	490b      	ldr	r1, [pc, #44]	; (8000a90 <HAL_CAN_IRQHandler+0x358>)
 8000a64:	400a      	ands	r2, r1
 8000a66:	615a      	str	r2, [r3, #20]
 8000a68:	e7d5      	b.n	8000a16 <HAL_CAN_IRQHandler+0x2de>
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000a6a:	3b20      	subs	r3, #32
 8000a6c:	54a3      	strb	r3, [r4, r2]
 8000a6e:	e729      	b.n	80008c4 <HAL_CAN_IRQHandler+0x18c>
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000a70:	2362      	movs	r3, #98	; 0x62
 8000a72:	54a3      	strb	r3, [r4, r2]
 8000a74:	e726      	b.n	80008c4 <HAL_CAN_IRQHandler+0x18c>
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000a76:	3b40      	subs	r3, #64	; 0x40
 8000a78:	54a3      	strb	r3, [r4, r2]
 8000a7a:	e7d7      	b.n	8000a2c <HAL_CAN_IRQHandler+0x2f4>
 8000a7c:	04000001 	.word	0x04000001
 8000a80:	08000100 	.word	0x08000100
 8000a84:	10010000 	.word	0x10010000
 8000a88:	ffff70a4 	.word	0xffff70a4
 8000a8c:	00010519 	.word	0x00010519
 8000a90:	ffff70ff 	.word	0xffff70ff
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000a94:	3b30      	subs	r3, #48	; 0x30
 8000a96:	54a3      	strb	r3, [r4, r2]
 8000a98:	e772      	b.n	8000980 <HAL_CAN_IRQHandler+0x248>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8000a9a:	2180      	movs	r1, #128	; 0x80
 8000a9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000aa2:	e6c8      	b.n	8000836 <HAL_CAN_IRQHandler+0xfe>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8000aa4:	2a10      	cmp	r2, #16
 8000aa6:	d013      	beq.n	8000ad0 <HAL_CAN_IRQHandler+0x398>
 8000aa8:	2a20      	cmp	r2, #32
 8000aaa:	d000      	beq.n	8000aae <HAL_CAN_IRQHandler+0x376>
 8000aac:	e6c3      	b.n	8000836 <HAL_CAN_IRQHandler+0xfe>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8000aae:	2110      	movs	r1, #16
 8000ab0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000ab6:	e6be      	b.n	8000836 <HAL_CAN_IRQHandler+0xfe>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000ab8:	2352      	movs	r3, #82	; 0x52
 8000aba:	54a3      	strb	r3, [r4, r2]
 8000abc:	e760      	b.n	8000980 <HAL_CAN_IRQHandler+0x248>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000abe:	2332      	movs	r3, #50	; 0x32
 8000ac0:	54a3      	strb	r3, [r4, r2]
 8000ac2:	e75d      	b.n	8000980 <HAL_CAN_IRQHandler+0x248>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000ac4:	2342      	movs	r3, #66	; 0x42
 8000ac6:	54a3      	strb	r3, [r4, r2]
 8000ac8:	e7b0      	b.n	8000a2c <HAL_CAN_IRQHandler+0x2f4>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000aca:	2322      	movs	r3, #34	; 0x22
 8000acc:	54a3      	strb	r3, [r4, r2]
 8000ace:	e7ad      	b.n	8000a2c <HAL_CAN_IRQHandler+0x2f4>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000ad8:	e6ad      	b.n	8000836 <HAL_CAN_IRQHandler+0xfe>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000ade:	0052      	lsls	r2, r2, #1
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000ae4:	e6a7      	b.n	8000836 <HAL_CAN_IRQHandler+0xfe>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000aea:	430a      	orrs	r2, r1
 8000aec:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000aee:	e6a2      	b.n	8000836 <HAL_CAN_IRQHandler+0xfe>

08000af0 <HAL_CAN_GetError>:
  return hcan->ErrorCode;
 8000af0:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8000af2:	4770      	bx	lr

08000af4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af4:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000af6:	2800      	cmp	r0, #0
 8000af8:	db11      	blt.n	8000b1e <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afa:	0883      	lsrs	r3, r0, #2
 8000afc:	4d14      	ldr	r5, [pc, #80]	; (8000b50 <HAL_NVIC_SetPriority+0x5c>)
 8000afe:	33c0      	adds	r3, #192	; 0xc0
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	595c      	ldr	r4, [r3, r5]
 8000b04:	2203      	movs	r2, #3
 8000b06:	4010      	ands	r0, r2
 8000b08:	00c0      	lsls	r0, r0, #3
 8000b0a:	32fc      	adds	r2, #252	; 0xfc
 8000b0c:	0016      	movs	r6, r2
 8000b0e:	4086      	lsls	r6, r0
 8000b10:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b12:	0189      	lsls	r1, r1, #6
 8000b14:	400a      	ands	r2, r1
 8000b16:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b18:	4322      	orrs	r2, r4
 8000b1a:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1e:	b2c0      	uxtb	r0, r0
 8000b20:	230f      	movs	r3, #15
 8000b22:	4003      	ands	r3, r0
 8000b24:	3b08      	subs	r3, #8
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	3306      	adds	r3, #6
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <HAL_NVIC_SetPriority+0x60>)
 8000b2e:	4694      	mov	ip, r2
 8000b30:	4463      	add	r3, ip
 8000b32:	685d      	ldr	r5, [r3, #4]
 8000b34:	2203      	movs	r2, #3
 8000b36:	4010      	ands	r0, r2
 8000b38:	00c0      	lsls	r0, r0, #3
 8000b3a:	24ff      	movs	r4, #255	; 0xff
 8000b3c:	0022      	movs	r2, r4
 8000b3e:	4082      	lsls	r2, r0
 8000b40:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b42:	0189      	lsls	r1, r1, #6
 8000b44:	400c      	ands	r4, r1
 8000b46:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	432c      	orrs	r4, r5
 8000b4a:	605c      	str	r4, [r3, #4]
 8000b4c:	e7e6      	b.n	8000b1c <HAL_NVIC_SetPriority+0x28>
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b58:	231f      	movs	r3, #31
 8000b5a:	4018      	ands	r0, r3
 8000b5c:	3b1e      	subs	r3, #30
 8000b5e:	4083      	lsls	r3, r0
 8000b60:	4a01      	ldr	r2, [pc, #4]	; (8000b68 <HAL_NVIC_EnableIRQ+0x10>)
 8000b62:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b64:	4770      	bx	lr
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b6c:	231f      	movs	r3, #31
 8000b6e:	4018      	ands	r0, r3
 8000b70:	3b1e      	subs	r3, #30
 8000b72:	4083      	lsls	r3, r0
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	4901      	ldr	r1, [pc, #4]	; (8000b7c <HAL_NVIC_DisableIRQ+0x10>)
 8000b78:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	3801      	subs	r0, #1
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_SYSTICK_Config+0x2c>)
 8000b84:	4298      	cmp	r0, r3
 8000b86:	d80f      	bhi.n	8000ba8 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <HAL_SYSTICK_Config+0x30>)
 8000b8a:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <HAL_SYSTICK_Config+0x34>)
 8000b8e:	6a03      	ldr	r3, [r0, #32]
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	21c0      	movs	r1, #192	; 0xc0
 8000b96:	0609      	lsls	r1, r1, #24
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba0:	3307      	adds	r3, #7
 8000ba2:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ba6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ba8:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000baa:	e7fc      	b.n	8000ba6 <HAL_SYSTICK_Config+0x26>
 8000bac:	00ffffff 	.word	0x00ffffff
 8000bb0:	e000e010 	.word	0xe000e010
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bb8:	2804      	cmp	r0, #4
 8000bba:	d005      	beq.n	8000bc8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bbc:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	438b      	bics	r3, r1
 8000bc4:	6013      	str	r3, [r2, #0]
  }
}
 8000bc6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bc8:	4a02      	ldr	r2, [pc, #8]	; (8000bd4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000bca:	6813      	ldr	r3, [r2, #0]
 8000bcc:	2104      	movs	r1, #4
 8000bce:	430b      	orrs	r3, r1
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	e7f8      	b.n	8000bc6 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000bd8:	4770      	bx	lr

08000bda <HAL_SYSTICK_IRQHandler>:
{
 8000bda:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000bdc:	f7ff fffc 	bl	8000bd8 <HAL_SYSTICK_Callback>
}
 8000be0:	bd10      	pop	{r4, pc}
	...

08000be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8000be8:	2001      	movs	r0, #1
  if(NULL == hdma)
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d028      	beq.n	8000c40 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bee:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bf0:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bf2:	1ca5      	adds	r5, r4, #2
 8000bf4:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8000bf6:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_DMA_Init+0x60>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bfa:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bfc:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000bfe:	6863      	ldr	r3, [r4, #4]
 8000c00:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c02:	68e1      	ldr	r1, [r4, #12]
 8000c04:	430b      	orrs	r3, r1
 8000c06:	6921      	ldr	r1, [r4, #16]
 8000c08:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c0a:	6961      	ldr	r1, [r4, #20]
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	69a1      	ldr	r1, [r4, #24]
 8000c10:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c12:	69e1      	ldr	r1, [r4, #28]
 8000c14:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000c16:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c18:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_DMA_Init+0x64>)
 8000c1c:	2114      	movs	r1, #20
 8000c1e:	18c0      	adds	r0, r0, r3
 8000c20:	f7ff fa8e 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_DMA_Init+0x68>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c26:	0080      	lsls	r0, r0, #2
 8000c28:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c2a:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000c2c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000c2e:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 8000c30:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000c32:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000c34:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000c36:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c38:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000c3a:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8000c3c:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000c3e:	77e0      	strb	r0, [r4, #31]
}  
 8000c40:	bd70      	pop	{r4, r5, r6, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	ffffc00f 	.word	0xffffc00f
 8000c48:	bffdfff8 	.word	0xbffdfff8
 8000c4c:	40020000 	.word	0x40020000

08000c50 <HAL_DMA_Start_IT>:
{
 8000c50:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000c52:	1c46      	adds	r6, r0, #1
 8000c54:	7ff5      	ldrb	r5, [r6, #31]
 8000c56:	2402      	movs	r4, #2
 8000c58:	2d01      	cmp	r5, #1
 8000c5a:	d026      	beq.n	8000caa <HAL_DMA_Start_IT+0x5a>
 8000c5c:	2501      	movs	r5, #1
 8000c5e:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c60:	1905      	adds	r5, r0, r4
 8000c62:	46ac      	mov	ip, r5
 8000c64:	7fed      	ldrb	r5, [r5, #31]
 8000c66:	2700      	movs	r7, #0
 8000c68:	b2ed      	uxtb	r5, r5
 8000c6a:	2d01      	cmp	r5, #1
 8000c6c:	d129      	bne.n	8000cc2 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000c6e:	4666      	mov	r6, ip
 8000c70:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c72:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c74:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c76:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c78:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c7a:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c7c:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c7e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c80:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000c82:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000c84:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c86:	6843      	ldr	r3, [r0, #4]
 8000c88:	6805      	ldr	r5, [r0, #0]
 8000c8a:	2b10      	cmp	r3, #16
 8000c8c:	d10f      	bne.n	8000cae <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8000c8e:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000c90:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000c92:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c94:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00c      	beq.n	8000cb4 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c9a:	230e      	movs	r3, #14
 8000c9c:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c9e:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000ca0:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8000ca2:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000ca4:	682a      	ldr	r2, [r5, #0]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	602b      	str	r3, [r5, #0]
} 
 8000caa:	0020      	movs	r0, r4
 8000cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8000cae:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000cb0:	60e2      	str	r2, [r4, #12]
 8000cb2:	e7ee      	b.n	8000c92 <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000cb4:	230a      	movs	r3, #10
 8000cb6:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cb8:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000cba:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cbc:	6823      	ldr	r3, [r4, #0]
 8000cbe:	4393      	bics	r3, r2
 8000cc0:	e7ed      	b.n	8000c9e <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 8000cc2:	77f7      	strb	r7, [r6, #31]
 8000cc4:	e7f1      	b.n	8000caa <HAL_DMA_Start_IT+0x5a>

08000cc6 <HAL_DMA_Abort>:
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cc6:	210e      	movs	r1, #14
 8000cc8:	6803      	ldr	r3, [r0, #0]
{
 8000cca:	b510      	push	{r4, lr}
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ccc:	681a      	ldr	r2, [r3, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cce:	6c04      	ldr	r4, [r0, #64]	; 0x40
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cd0:	438a      	bics	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	4391      	bics	r1, r2
 8000cda:	6019      	str	r1, [r3, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cdc:	0011      	movs	r1, r2
 8000cde:	40a1      	lsls	r1, r4
 8000ce0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000ce2:	6059      	str	r1, [r3, #4]
	hdma->State = HAL_DMA_STATE_READY; 
 8000ce4:	1c83      	adds	r3, r0, #2
 8000ce6:	77da      	strb	r2, [r3, #31]
	__HAL_UNLOCK(hdma);
 8000ce8:	1883      	adds	r3, r0, r2
 8000cea:	2000      	movs	r0, #0
 8000cec:	77d8      	strb	r0, [r3, #31]
}
 8000cee:	bd10      	pop	{r4, pc}

08000cf0 <HAL_DMA_Abort_IT>:
{  
 8000cf0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf2:	1c84      	adds	r4, r0, #2
 8000cf4:	7fe3      	ldrb	r3, [r4, #31]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d004      	beq.n	8000d04 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000cfe:	3b03      	subs	r3, #3
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d04:	210e      	movs	r1, #14
 8000d06:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d08:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	438a      	bics	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d10:	2201      	movs	r2, #1
 8000d12:	6819      	ldr	r1, [r3, #0]
 8000d14:	4391      	bics	r1, r2
 8000d16:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d18:	0011      	movs	r1, r2
 8000d1a:	40a9      	lsls	r1, r5
 8000d1c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000d1e:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d20:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000d22:	2400      	movs	r4, #0
 8000d24:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8000d26:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000d28:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2a:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000d2c:	42a2      	cmp	r2, r4
 8000d2e:	d0e7      	beq.n	8000d00 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000d30:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000d32:	0023      	movs	r3, r4
 8000d34:	e7e4      	b.n	8000d00 <HAL_DMA_Abort_IT+0x10>

08000d36 <HAL_DMA_IRQHandler>:
{
 8000d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d38:	2704      	movs	r7, #4
 8000d3a:	003e      	movs	r6, r7
 8000d3c:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d3e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d40:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d42:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000d44:	6803      	ldr	r3, [r0, #0]
 8000d46:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d48:	422e      	tst	r6, r5
 8000d4a:	d00d      	beq.n	8000d68 <HAL_DMA_IRQHandler+0x32>
 8000d4c:	423c      	tst	r4, r7
 8000d4e:	d00b      	beq.n	8000d68 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d50:	6819      	ldr	r1, [r3, #0]
 8000d52:	0689      	lsls	r1, r1, #26
 8000d54:	d402      	bmi.n	8000d5c <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d56:	6819      	ldr	r1, [r3, #0]
 8000d58:	43b9      	bics	r1, r7
 8000d5a:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d5c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d5e:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d019      	beq.n	8000d98 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8000d64:	4798      	blx	r3
}  
 8000d66:	e017      	b.n	8000d98 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d68:	2702      	movs	r7, #2
 8000d6a:	003e      	movs	r6, r7
 8000d6c:	408e      	lsls	r6, r1
 8000d6e:	422e      	tst	r6, r5
 8000d70:	d013      	beq.n	8000d9a <HAL_DMA_IRQHandler+0x64>
 8000d72:	423c      	tst	r4, r7
 8000d74:	d011      	beq.n	8000d9a <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d76:	6819      	ldr	r1, [r3, #0]
 8000d78:	0689      	lsls	r1, r1, #26
 8000d7a:	d406      	bmi.n	8000d8a <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d7c:	240a      	movs	r4, #10
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	43a1      	bics	r1, r4
 8000d82:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000d84:	2101      	movs	r1, #1
 8000d86:	19c3      	adds	r3, r0, r7
 8000d88:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d8a:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	1c43      	adds	r3, r0, #1
 8000d90:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8000d92:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d1e5      	bne.n	8000d64 <HAL_DMA_IRQHandler+0x2e>
}  
 8000d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d9a:	2608      	movs	r6, #8
 8000d9c:	0037      	movs	r7, r6
 8000d9e:	408f      	lsls	r7, r1
 8000da0:	423d      	tst	r5, r7
 8000da2:	d0f9      	beq.n	8000d98 <HAL_DMA_IRQHandler+0x62>
 8000da4:	4234      	tst	r4, r6
 8000da6:	d0f7      	beq.n	8000d98 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000da8:	250e      	movs	r5, #14
 8000daa:	681c      	ldr	r4, [r3, #0]
 8000dac:	43ac      	bics	r4, r5
 8000dae:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000db0:	2301      	movs	r3, #1
 8000db2:	001c      	movs	r4, r3
 8000db4:	408c      	lsls	r4, r1
 8000db6:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8000db8:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dba:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000dbc:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	18c3      	adds	r3, r0, r3
 8000dc2:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8000dc4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000dc6:	e7e5      	b.n	8000d94 <HAL_DMA_IRQHandler+0x5e>

08000dc8 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000dc8:	2110      	movs	r1, #16
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <FLASH_SetErrorCode+0x34>)
{
 8000dcc:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000dce:	68d8      	ldr	r0, [r3, #12]
  uint32_t flags = 0U;
 8000dd0:	2200      	movs	r2, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000dd2:	4208      	tst	r0, r1
 8000dd4:	d005      	beq.n	8000de2 <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000dd6:	480a      	ldr	r0, [pc, #40]	; (8000e00 <FLASH_SetErrorCode+0x38>)
 8000dd8:	3202      	adds	r2, #2
 8000dda:	69c4      	ldr	r4, [r0, #28]
 8000ddc:	4322      	orrs	r2, r4
 8000dde:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000de0:	000a      	movs	r2, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000de2:	2004      	movs	r0, #4
 8000de4:	68d9      	ldr	r1, [r3, #12]
 8000de6:	4201      	tst	r1, r0
 8000de8:	d005      	beq.n	8000df6 <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000dea:	2101      	movs	r1, #1
 8000dec:	4c04      	ldr	r4, [pc, #16]	; (8000e00 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8000dee:	4302      	orrs	r2, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000df0:	69e5      	ldr	r5, [r4, #28]
 8000df2:	4329      	orrs	r1, r5
 8000df4:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000df6:	60da      	str	r2, [r3, #12]
}  
 8000df8:	bd30      	pop	{r4, r5, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	40022000 	.word	0x40022000
 8000e00:	20000470 	.word	0x20000470

08000e04 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_FLASH_Unlock+0x18>)
    return HAL_ERROR;
 8000e06:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000e08:	691a      	ldr	r2, [r3, #16]
 8000e0a:	0612      	lsls	r2, r2, #24
 8000e0c:	d504      	bpl.n	8000e18 <HAL_FLASH_Unlock+0x14>
  return HAL_OK; 
 8000e0e:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e10:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <HAL_FLASH_Unlock+0x1c>)
 8000e12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e14:	4a03      	ldr	r2, [pc, #12]	; (8000e24 <HAL_FLASH_Unlock+0x20>)
 8000e16:	605a      	str	r2, [r3, #4]
}
 8000e18:	4770      	bx	lr
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	40022000 	.word	0x40022000
 8000e20:	45670123 	.word	0x45670123
 8000e24:	cdef89ab 	.word	0xcdef89ab

08000e28 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <HAL_FLASH_Lock+0x10>)
}
 8000e2c:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e2e:	6911      	ldr	r1, [r2, #16]
 8000e30:	430b      	orrs	r3, r1
 8000e32:	6113      	str	r3, [r2, #16]
}
 8000e34:	4770      	bx	lr
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	40022000 	.word	0x40022000

08000e3c <HAL_FLASH_OB_Unlock>:
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_FLASH_OB_Unlock+0x1c>)
 8000e40:	0089      	lsls	r1, r1, #2
 8000e42:	6913      	ldr	r3, [r2, #16]
    return HAL_ERROR;
 8000e44:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8000e46:	400b      	ands	r3, r1
 8000e48:	d104      	bne.n	8000e54 <HAL_FLASH_OB_Unlock+0x18>
  return HAL_OK;  
 8000e4a:	0018      	movs	r0, r3
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000e4c:	4903      	ldr	r1, [pc, #12]	; (8000e5c <HAL_FLASH_OB_Unlock+0x20>)
 8000e4e:	6091      	str	r1, [r2, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8000e50:	4903      	ldr	r1, [pc, #12]	; (8000e60 <HAL_FLASH_OB_Unlock+0x24>)
 8000e52:	6091      	str	r1, [r2, #8]
}
 8000e54:	4770      	bx	lr
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	40022000 	.word	0x40022000
 8000e5c:	45670123 	.word	0x45670123
 8000e60:	cdef89ab 	.word	0xcdef89ab

08000e64 <HAL_FLASH_OB_Lock>:
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8000e64:	4a03      	ldr	r2, [pc, #12]	; (8000e74 <HAL_FLASH_OB_Lock+0x10>)
 8000e66:	4904      	ldr	r1, [pc, #16]	; (8000e78 <HAL_FLASH_OB_Lock+0x14>)
 8000e68:	6913      	ldr	r3, [r2, #16]
}
 8000e6a:	2000      	movs	r0, #0
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	6113      	str	r3, [r2, #16]
}
 8000e70:	4770      	bx	lr
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	40022000 	.word	0x40022000
 8000e78:	fffffdff 	.word	0xfffffdff

08000e7c <FLASH_WaitForLastOperation>:
{
 8000e7c:	b570      	push	{r4, r5, r6, lr}
 8000e7e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff fa14 	bl	80002ac <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e84:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 8000e86:	0006      	movs	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <FLASH_WaitForLastOperation+0x50>)
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	68d9      	ldr	r1, [r3, #12]
 8000e8e:	4229      	tst	r1, r5
 8000e90:	d10f      	bne.n	8000eb2 <FLASH_WaitForLastOperation+0x36>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e92:	2120      	movs	r1, #32
 8000e94:	68d8      	ldr	r0, [r3, #12]
 8000e96:	4208      	tst	r0, r1
 8000e98:	d000      	beq.n	8000e9c <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e9a:	60d9      	str	r1, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	68d0      	ldr	r0, [r2, #12]
 8000ea0:	4018      	ands	r0, r3
 8000ea2:	d102      	bne.n	8000eaa <FLASH_WaitForLastOperation+0x2e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ea4:	68d3      	ldr	r3, [r2, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ea6:	075b      	lsls	r3, r3, #29
 8000ea8:	d508      	bpl.n	8000ebc <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8000eaa:	f7ff ff8d 	bl	8000dc8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000eae:	2001      	movs	r0, #1
 8000eb0:	e004      	b.n	8000ebc <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8000eb2:	1c61      	adds	r1, r4, #1
 8000eb4:	d0ea      	beq.n	8000e8c <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000eb6:	2c00      	cmp	r4, #0
 8000eb8:	d101      	bne.n	8000ebe <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 8000eba:	2003      	movs	r0, #3
}
 8000ebc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ebe:	f7ff f9f5 	bl	80002ac <HAL_GetTick>
 8000ec2:	1b80      	subs	r0, r0, r6
 8000ec4:	4284      	cmp	r4, r0
 8000ec6:	d2df      	bcs.n	8000e88 <FLASH_WaitForLastOperation+0xc>
 8000ec8:	e7f7      	b.n	8000eba <FLASH_WaitForLastOperation+0x3e>
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_FLASH_OB_Launch>:
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <HAL_FLASH_OB_Launch+0x18>)
{
 8000ed4:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8000ed6:	6911      	ldr	r1, [r2, #16]
 8000ed8:	019b      	lsls	r3, r3, #6
 8000eda:	430b      	orrs	r3, r1
 8000edc:	6113      	str	r3, [r2, #16]
  return(FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE));
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <HAL_FLASH_OB_Launch+0x1c>)
 8000ee0:	f7ff ffcc 	bl	8000e7c <FLASH_WaitForLastOperation>
}
 8000ee4:	bd10      	pop	{r4, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	40022000 	.word	0x40022000
 8000eec:	0000c350 	.word	0x0000c350

08000ef0 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @note   Warning: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8000ef0:	b570      	push	{r4, r5, r6, lr}
 8000ef2:	0006      	movs	r6, r0
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ef4:	4812      	ldr	r0, [pc, #72]	; (8000f40 <FLASH_OB_RDP_LevelConfig+0x50>)
 8000ef6:	f7ff ffc1 	bl	8000e7c <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d11f      	bne.n	8000f3e <FLASH_OB_RDP_LevelConfig+0x4e>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000efe:	2520      	movs	r5, #32
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <FLASH_OB_RDP_LevelConfig+0x54>)
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000f02:	4c11      	ldr	r4, [pc, #68]	; (8000f48 <FLASH_OB_RDP_LevelConfig+0x58>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f04:	61d8      	str	r0, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000f06:	6923      	ldr	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <FLASH_OB_RDP_LevelConfig+0x50>)
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000f0a:	432b      	orrs	r3, r5
 8000f0c:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f0e:	2340      	movs	r3, #64	; 0x40
 8000f10:	6922      	ldr	r2, [r4, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f16:	f7ff ffb1 	bl	8000e7c <FLASH_WaitForLastOperation>

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000f1a:	6923      	ldr	r3, [r4, #16]
 8000f1c:	43ab      	bics	r3, r5
 8000f1e:	6123      	str	r3, [r4, #16]

    if(status == HAL_OK)
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d10c      	bne.n	8000f3e <FLASH_OB_RDP_LevelConfig+0x4e>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000f24:	6923      	ldr	r3, [r4, #16]
 8000f26:	3d10      	subs	r5, #16
 8000f28:	432b      	orrs	r3, r5
 8000f2a:	6123      	str	r3, [r4, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <FLASH_OB_RDP_LevelConfig+0x5c>)
 8000f2e:	b2b6      	uxth	r6, r6
 8000f30:	801e      	strh	r6, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <FLASH_OB_RDP_LevelConfig+0x50>)
 8000f34:	f7ff ffa2 	bl	8000e7c <FLASH_WaitForLastOperation>
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000f38:	6923      	ldr	r3, [r4, #16]
 8000f3a:	43ab      	bics	r3, r5
 8000f3c:	6123      	str	r3, [r4, #16]
    }
  }
  
  return status;
}
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}
 8000f40:	0000c350 	.word	0x0000c350
 8000f44:	20000470 	.word	0x20000470
 8000f48:	40022000 	.word	0x40022000
 8000f4c:	1ffff800 	.word	0x1ffff800

08000f50 <HAL_FLASHEx_OBErase>:
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t tmp_reg = 0U;
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 8000f50:	2206      	movs	r2, #6
{
 8000f52:	b570      	push	{r4, r5, r6, lr}
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 8000f54:	4c12      	ldr	r4, [pc, #72]	; (8000fa0 <HAL_FLASHEx_OBErase+0x50>)

  if (tmp_reg == FLASH_OBR_RDPRT1)
  {
    return OB_RDP_LEVEL_1;
 8000f56:	25bb      	movs	r5, #187	; 0xbb
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 8000f58:	69e3      	ldr	r3, [r4, #28]
 8000f5a:	4013      	ands	r3, r2
  if (tmp_reg == FLASH_OBR_RDPRT1)
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d003      	beq.n	8000f68 <HAL_FLASHEx_OBErase+0x18>
  }
  else if (tmp_reg == FLASH_OBR_RDPRT2)
  {
    return OB_RDP_LEVEL_2;
 8000f60:	3511      	adds	r5, #17
  else if (tmp_reg == FLASH_OBR_RDPRT2)
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d000      	beq.n	8000f68 <HAL_FLASHEx_OBErase+0x18>
  }
  else 
  {
    return OB_RDP_LEVEL_0;
 8000f66:	3d22      	subs	r5, #34	; 0x22
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f68:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <HAL_FLASHEx_OBErase+0x54>)
 8000f6a:	f7ff ff87 	bl	8000e7c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	d114      	bne.n	8000f9c <HAL_FLASHEx_OBErase+0x4c>
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000f72:	2620      	movs	r6, #32
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_FLASHEx_OBErase+0x58>)
 8000f76:	61d8      	str	r0, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000f78:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <HAL_FLASHEx_OBErase+0x54>)
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000f7c:	4333      	orrs	r3, r6
 8000f7e:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f80:	2340      	movs	r3, #64	; 0x40
 8000f82:	6922      	ldr	r2, [r4, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f88:	f7ff ff78 	bl	8000e7c <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000f8c:	6923      	ldr	r3, [r4, #16]
 8000f8e:	43b3      	bics	r3, r6
 8000f90:	6123      	str	r3, [r4, #16]
    if(status == HAL_OK)
 8000f92:	2800      	cmp	r0, #0
 8000f94:	d102      	bne.n	8000f9c <HAL_FLASHEx_OBErase+0x4c>
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8000f96:	b2e8      	uxtb	r0, r5
 8000f98:	f7ff ffaa 	bl	8000ef0 <FLASH_OB_RDP_LevelConfig>
}
 8000f9c:	bd70      	pop	{r4, r5, r6, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	40022000 	.word	0x40022000
 8000fa4:	0000c350 	.word	0x0000c350
 8000fa8:	20000470 	.word	0x20000470

08000fac <HAL_FLASHEx_OBProgram>:
{
 8000fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000fae:	4c46      	ldr	r4, [pc, #280]	; (80010c8 <HAL_FLASHEx_OBProgram+0x11c>)
{
 8000fb0:	0005      	movs	r5, r0
  __HAL_LOCK(&pFlash);
 8000fb2:	7e23      	ldrb	r3, [r4, #24]
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d02d      	beq.n	8001016 <HAL_FLASHEx_OBProgram+0x6a>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8000fba:	682b      	ldr	r3, [r5, #0]
  __HAL_LOCK(&pFlash);
 8000fbc:	3801      	subs	r0, #1
 8000fbe:	7620      	strb	r0, [r4, #24]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8000fc0:	4203      	tst	r3, r0
 8000fc2:	d041      	beq.n	8001048 <HAL_FLASHEx_OBProgram+0x9c>
 8000fc4:	68ab      	ldr	r3, [r5, #8]
 8000fc6:	4e41      	ldr	r6, [pc, #260]	; (80010cc <HAL_FLASHEx_OBProgram+0x120>)
 8000fc8:	9301      	str	r3, [sp, #4]
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8000fca:	686b      	ldr	r3, [r5, #4]
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8000fcc:	6a37      	ldr	r7, [r6, #32]
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8000fce:	4283      	cmp	r3, r0
 8000fd0:	d122      	bne.n	8001018 <HAL_FLASHEx_OBProgram+0x6c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fd2:	483f      	ldr	r0, [pc, #252]	; (80010d0 <HAL_FLASHEx_OBProgram+0x124>)
 8000fd4:	f7ff ff52 	bl	8000e7c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d11a      	bne.n	8001012 <HAL_FLASHEx_OBProgram+0x66>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fdc:	61e0      	str	r0, [r4, #28]
    status = HAL_FLASHEx_OBErase();
 8000fde:	f7ff ffb7 	bl	8000f50 <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	d115      	bne.n	8001012 <HAL_FLASHEx_OBProgram+0x66>
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8000fe6:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000fe8:	6932      	ldr	r2, [r6, #16]
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8000fea:	439f      	bics	r7, r3
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000fec:	2310      	movs	r3, #16
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8000fee:	b2ff      	uxtb	r7, r7
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	6133      	str	r3, [r6, #16]
      if(WRP0_Data != 0xFFU)
 8000ff4:	2fff      	cmp	r7, #255	; 0xff
 8000ff6:	d006      	beq.n	8001006 <HAL_FLASHEx_OBProgram+0x5a>
        OB->WRP0 &= WRP0_Data;
 8000ff8:	4a36      	ldr	r2, [pc, #216]	; (80010d4 <HAL_FLASHEx_OBProgram+0x128>)
 8000ffa:	8913      	ldrh	r3, [r2, #8]
 8000ffc:	401f      	ands	r7, r3
 8000ffe:	8117      	strh	r7, [r2, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001000:	4833      	ldr	r0, [pc, #204]	; (80010d0 <HAL_FLASHEx_OBProgram+0x124>)
 8001002:	f7ff ff3b 	bl	8000e7c <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001006:	2210      	movs	r2, #16
 8001008:	6933      	ldr	r3, [r6, #16]
 800100a:	4393      	bics	r3, r2
 800100c:	6133      	str	r3, [r6, #16]
    if (status != HAL_OK)
 800100e:	2800      	cmp	r0, #0
 8001010:	d01a      	beq.n	8001048 <HAL_FLASHEx_OBProgram+0x9c>
  __HAL_UNLOCK(&pFlash);
 8001012:	2300      	movs	r3, #0
 8001014:	7623      	strb	r3, [r4, #24]
}
 8001016:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001018:	482d      	ldr	r0, [pc, #180]	; (80010d0 <HAL_FLASHEx_OBProgram+0x124>)
 800101a:	f7ff ff2f 	bl	8000e7c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800101e:	2800      	cmp	r0, #0
 8001020:	d1f7      	bne.n	8001012 <HAL_FLASHEx_OBProgram+0x66>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001022:	61e0      	str	r0, [r4, #28]
    status = HAL_FLASHEx_OBErase();
 8001024:	f7ff ff94 	bl	8000f50 <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8001028:	2800      	cmp	r0, #0
 800102a:	d1f2      	bne.n	8001012 <HAL_FLASHEx_OBProgram+0x66>
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 800102c:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800102e:	6932      	ldr	r2, [r6, #16]
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8001030:	433b      	orrs	r3, r7
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001032:	b2df      	uxtb	r7, r3
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001034:	2310      	movs	r3, #16
 8001036:	4313      	orrs	r3, r2
 8001038:	6133      	str	r3, [r6, #16]
      if(WRP0_Data != 0xFFU)
 800103a:	2fff      	cmp	r7, #255	; 0xff
 800103c:	d0e3      	beq.n	8001006 <HAL_FLASHEx_OBProgram+0x5a>
        OB->WRP0 |= WRP0_Data;
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <HAL_FLASHEx_OBProgram+0x128>)
 8001040:	891a      	ldrh	r2, [r3, #8]
 8001042:	4317      	orrs	r7, r2
 8001044:	811f      	strh	r7, [r3, #8]
 8001046:	e7db      	b.n	8001000 <HAL_FLASHEx_OBProgram+0x54>
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001048:	682b      	ldr	r3, [r5, #0]
 800104a:	079b      	lsls	r3, r3, #30
 800104c:	d504      	bpl.n	8001058 <HAL_FLASHEx_OBProgram+0xac>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800104e:	7b28      	ldrb	r0, [r5, #12]
 8001050:	f7ff ff4e 	bl	8000ef0 <FLASH_OB_RDP_LevelConfig>
    if (status != HAL_OK)
 8001054:	2800      	cmp	r0, #0
 8001056:	d1dc      	bne.n	8001012 <HAL_FLASHEx_OBProgram+0x66>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	075b      	lsls	r3, r3, #29
 800105c:	d518      	bpl.n	8001090 <HAL_FLASHEx_OBProgram+0xe4>
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 800105e:	7b6b      	ldrb	r3, [r5, #13]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001060:	481b      	ldr	r0, [pc, #108]	; (80010d0 <HAL_FLASHEx_OBProgram+0x124>)
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8001062:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001064:	f7ff ff0a 	bl	8000e7c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001068:	2800      	cmp	r0, #0
 800106a:	d1d2      	bne.n	8001012 <HAL_FLASHEx_OBProgram+0x66>
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 800106c:	2710      	movs	r7, #16
 800106e:	4e17      	ldr	r6, [pc, #92]	; (80010cc <HAL_FLASHEx_OBProgram+0x120>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001070:	61e0      	str	r0, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8001072:	6933      	ldr	r3, [r6, #16]
    OB->USER = UserConfig;
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_FLASHEx_OBProgram+0x128>)
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8001076:	433b      	orrs	r3, r7
 8001078:	6133      	str	r3, [r6, #16]
    OB->USER = UserConfig;
 800107a:	466b      	mov	r3, sp
 800107c:	889b      	ldrh	r3, [r3, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800107e:	4814      	ldr	r0, [pc, #80]	; (80010d0 <HAL_FLASHEx_OBProgram+0x124>)
    OB->USER = UserConfig;
 8001080:	8053      	strh	r3, [r2, #2]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001082:	f7ff fefb 	bl	8000e7c <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001086:	6933      	ldr	r3, [r6, #16]
 8001088:	43bb      	bics	r3, r7
 800108a:	6133      	str	r3, [r6, #16]
    if (status != HAL_OK)
 800108c:	2800      	cmp	r0, #0
 800108e:	d1c0      	bne.n	8001012 <HAL_FLASHEx_OBProgram+0x66>
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	071b      	lsls	r3, r3, #28
 8001094:	d5bd      	bpl.n	8001012 <HAL_FLASHEx_OBProgram+0x66>
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8001096:	692b      	ldr	r3, [r5, #16]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <HAL_FLASHEx_OBProgram+0x124>)
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	7d2e      	ldrb	r6, [r5, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800109e:	f7ff feed 	bl	8000e7c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80010a2:	2800      	cmp	r0, #0
 80010a4:	d1b5      	bne.n	8001012 <HAL_FLASHEx_OBProgram+0x66>
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80010a6:	2710      	movs	r7, #16
 80010a8:	4d08      	ldr	r5, [pc, #32]	; (80010cc <HAL_FLASHEx_OBProgram+0x120>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010aa:	61e0      	str	r0, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80010ac:	692b      	ldr	r3, [r5, #16]
    *(__IO uint16_t*)Address = Data;
 80010ae:	b2b6      	uxth	r6, r6
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80010b0:	433b      	orrs	r3, r7
 80010b2:	612b      	str	r3, [r5, #16]
    *(__IO uint16_t*)Address = Data;
 80010b4:	9b01      	ldr	r3, [sp, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <HAL_FLASHEx_OBProgram+0x124>)
    *(__IO uint16_t*)Address = Data;
 80010b8:	801e      	strh	r6, [r3, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010ba:	f7ff fedf 	bl	8000e7c <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80010be:	692b      	ldr	r3, [r5, #16]
 80010c0:	43bb      	bics	r3, r7
 80010c2:	612b      	str	r3, [r5, #16]
 80010c4:	e7a5      	b.n	8001012 <HAL_FLASHEx_OBProgram+0x66>
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	20000470 	.word	0x20000470
 80010cc:	40022000 	.word	0x40022000
 80010d0:	0000c350 	.word	0x0000c350
 80010d4:	1ffff800 	.word	0x1ffff800

080010d8 <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 80010d8:	2307      	movs	r3, #7
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 80010da:	2106      	movs	r1, #6
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 80010dc:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_REG(FLASH->WRPR));
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_FLASHEx_OBGetConfig+0x28>)
 80010e0:	6a1a      	ldr	r2, [r3, #32]
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 80010e2:	6082      	str	r2, [r0, #8]
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 80010e4:	69da      	ldr	r2, [r3, #28]
 80010e6:	400a      	ands	r2, r1
    return OB_RDP_LEVEL_1;
 80010e8:	31b5      	adds	r1, #181	; 0xb5
  if (tmp_reg == FLASH_OBR_RDPRT1)
 80010ea:	2a02      	cmp	r2, #2
 80010ec:	d003      	beq.n	80010f6 <HAL_FLASHEx_OBGetConfig+0x1e>
    return OB_RDP_LEVEL_2;
 80010ee:	3111      	adds	r1, #17
  else if (tmp_reg == FLASH_OBR_RDPRT2)
 80010f0:	2a04      	cmp	r2, #4
 80010f2:	d000      	beq.n	80010f6 <HAL_FLASHEx_OBGetConfig+0x1e>
    return OB_RDP_LEVEL_0;
 80010f4:	3922      	subs	r1, #34	; 0x22
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80010f6:	7301      	strb	r1, [r0, #12]
  *         For few devices, following option bytes are available: nBOOT0(Bit3) & BOOT_SEL(Bit7).
  */
static uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	0a1b      	lsrs	r3, r3, #8
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80010fc:	7343      	strb	r3, [r0, #13]
}
 80010fe:	4770      	bx	lr
 8001100:	40022000 	.word	0x40022000

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	46c6      	mov	lr, r8
 8001108:	b500      	push	{lr}
 800110a:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 800110c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800110e:	e07b      	b.n	8001208 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001110:	08df      	lsrs	r7, r3, #3
 8001112:	3708      	adds	r7, #8
 8001114:	00bf      	lsls	r7, r7, #2
 8001116:	583e      	ldr	r6, [r7, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001118:	2507      	movs	r5, #7
 800111a:	401d      	ands	r5, r3
 800111c:	00ad      	lsls	r5, r5, #2
 800111e:	240f      	movs	r4, #15
 8001120:	40ac      	lsls	r4, r5
 8001122:	43a6      	bics	r6, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001124:	690c      	ldr	r4, [r1, #16]
 8001126:	40ac      	lsls	r4, r5
 8001128:	0025      	movs	r5, r4
 800112a:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 800112c:	503d      	str	r5, [r7, r0]
 800112e:	e07b      	b.n	8001228 <HAL_GPIO_Init+0x124>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001130:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001132:	4664      	mov	r4, ip
 8001134:	4025      	ands	r5, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001136:	68ce      	ldr	r6, [r1, #12]
 8001138:	40be      	lsls	r6, r7
 800113a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800113c:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	6845      	ldr	r5, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001140:	002c      	movs	r4, r5
 8001142:	4645      	mov	r5, r8
 8001144:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001146:	684d      	ldr	r5, [r1, #4]
 8001148:	092e      	lsrs	r6, r5, #4
 800114a:	2501      	movs	r5, #1
 800114c:	4035      	ands	r5, r6
 800114e:	409d      	lsls	r5, r3
 8001150:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001152:	6044      	str	r4, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001154:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001156:	4665      	mov	r5, ip
 8001158:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800115a:	688d      	ldr	r5, [r1, #8]
 800115c:	40bd      	lsls	r5, r7
 800115e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001160:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001162:	684c      	ldr	r4, [r1, #4]
 8001164:	00e4      	lsls	r4, r4, #3
 8001166:	d54e      	bpl.n	8001206 <HAL_GPIO_Init+0x102>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001168:	4d41      	ldr	r5, [pc, #260]	; (8001270 <HAL_GPIO_Init+0x16c>)
 800116a:	69ae      	ldr	r6, [r5, #24]
 800116c:	2401      	movs	r4, #1
 800116e:	4326      	orrs	r6, r4
 8001170:	61ae      	str	r6, [r5, #24]
 8001172:	69ad      	ldr	r5, [r5, #24]
 8001174:	402c      	ands	r4, r5
 8001176:	9401      	str	r4, [sp, #4]
 8001178:	9c01      	ldr	r4, [sp, #4]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800117a:	089c      	lsrs	r4, r3, #2
 800117c:	1ca5      	adds	r5, r4, #2
 800117e:	00ad      	lsls	r5, r5, #2
 8001180:	4e3c      	ldr	r6, [pc, #240]	; (8001274 <HAL_GPIO_Init+0x170>)
 8001182:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001184:	2503      	movs	r5, #3
 8001186:	401d      	ands	r5, r3
 8001188:	00ad      	lsls	r5, r5, #2
 800118a:	270f      	movs	r7, #15
 800118c:	40af      	lsls	r7, r5
 800118e:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001190:	2790      	movs	r7, #144	; 0x90
 8001192:	05ff      	lsls	r7, r7, #23
 8001194:	42b8      	cmp	r0, r7
 8001196:	d062      	beq.n	800125e <HAL_GPIO_Init+0x15a>
 8001198:	4f37      	ldr	r7, [pc, #220]	; (8001278 <HAL_GPIO_Init+0x174>)
 800119a:	42b8      	cmp	r0, r7
 800119c:	d061      	beq.n	8001262 <HAL_GPIO_Init+0x15e>
 800119e:	4f37      	ldr	r7, [pc, #220]	; (800127c <HAL_GPIO_Init+0x178>)
 80011a0:	42b8      	cmp	r0, r7
 80011a2:	d05a      	beq.n	800125a <HAL_GPIO_Init+0x156>
 80011a4:	2705      	movs	r7, #5
 80011a6:	40af      	lsls	r7, r5
 80011a8:	003d      	movs	r5, r7
 80011aa:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80011ac:	3402      	adds	r4, #2
 80011ae:	00a4      	lsls	r4, r4, #2
 80011b0:	4e30      	ldr	r6, [pc, #192]	; (8001274 <HAL_GPIO_Init+0x170>)
 80011b2:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b4:	4c32      	ldr	r4, [pc, #200]	; (8001280 <HAL_GPIO_Init+0x17c>)
 80011b6:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011b8:	43d4      	mvns	r4, r2
 80011ba:	0026      	movs	r6, r4
 80011bc:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011be:	684f      	ldr	r7, [r1, #4]
 80011c0:	03ff      	lsls	r7, r7, #15
 80011c2:	d501      	bpl.n	80011c8 <HAL_GPIO_Init+0xc4>
        {
          SET_BIT(temp, iocurrent); 
 80011c4:	4315      	orrs	r5, r2
 80011c6:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 80011c8:	4d2d      	ldr	r5, [pc, #180]	; (8001280 <HAL_GPIO_Init+0x17c>)
 80011ca:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80011cc:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80011ce:	002e      	movs	r6, r5
 80011d0:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d2:	684f      	ldr	r7, [r1, #4]
 80011d4:	03bf      	lsls	r7, r7, #14
 80011d6:	d501      	bpl.n	80011dc <HAL_GPIO_Init+0xd8>
        { 
          SET_BIT(temp, iocurrent); 
 80011d8:	4315      	orrs	r5, r2
 80011da:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 80011dc:	4d28      	ldr	r5, [pc, #160]	; (8001280 <HAL_GPIO_Init+0x17c>)
 80011de:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e0:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80011e2:	002e      	movs	r6, r5
 80011e4:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e6:	684f      	ldr	r7, [r1, #4]
 80011e8:	02ff      	lsls	r7, r7, #11
 80011ea:	d501      	bpl.n	80011f0 <HAL_GPIO_Init+0xec>
        {
          SET_BIT(temp, iocurrent); 
 80011ec:	4315      	orrs	r5, r2
 80011ee:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80011f0:	4d23      	ldr	r5, [pc, #140]	; (8001280 <HAL_GPIO_Init+0x17c>)
 80011f2:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80011f4:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80011f6:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f8:	684e      	ldr	r6, [r1, #4]
 80011fa:	02b6      	lsls	r6, r6, #10
 80011fc:	d501      	bpl.n	8001202 <HAL_GPIO_Init+0xfe>
        {
          SET_BIT(temp, iocurrent); 
 80011fe:	432a      	orrs	r2, r5
 8001200:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8001202:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <HAL_GPIO_Init+0x17c>)
 8001204:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001206:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001208:	680a      	ldr	r2, [r1, #0]
 800120a:	0014      	movs	r4, r2
 800120c:	40dc      	lsrs	r4, r3
 800120e:	d02a      	beq.n	8001266 <HAL_GPIO_Init+0x162>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001210:	2401      	movs	r4, #1
 8001212:	409c      	lsls	r4, r3
 8001214:	46a0      	mov	r8, r4
 8001216:	4022      	ands	r2, r4
    if(iocurrent)
 8001218:	d0f5      	beq.n	8001206 <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800121a:	684d      	ldr	r5, [r1, #4]
 800121c:	2d02      	cmp	r5, #2
 800121e:	d100      	bne.n	8001222 <HAL_GPIO_Init+0x11e>
 8001220:	e776      	b.n	8001110 <HAL_GPIO_Init+0xc>
 8001222:	2d12      	cmp	r5, #18
 8001224:	d100      	bne.n	8001228 <HAL_GPIO_Init+0x124>
 8001226:	e773      	b.n	8001110 <HAL_GPIO_Init+0xc>
      temp = GPIOx->MODER;
 8001228:	6806      	ldr	r6, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800122a:	005f      	lsls	r7, r3, #1
 800122c:	2503      	movs	r5, #3
 800122e:	002c      	movs	r4, r5
 8001230:	40bc      	lsls	r4, r7
 8001232:	43e4      	mvns	r4, r4
 8001234:	46a4      	mov	ip, r4
 8001236:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001238:	684c      	ldr	r4, [r1, #4]
 800123a:	4025      	ands	r5, r4
 800123c:	40bd      	lsls	r5, r7
 800123e:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8001240:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001242:	684d      	ldr	r5, [r1, #4]
 8001244:	1e6e      	subs	r6, r5, #1
 8001246:	2e01      	cmp	r6, #1
 8001248:	d800      	bhi.n	800124c <HAL_GPIO_Init+0x148>
 800124a:	e771      	b.n	8001130 <HAL_GPIO_Init+0x2c>
 800124c:	2d11      	cmp	r5, #17
 800124e:	d100      	bne.n	8001252 <HAL_GPIO_Init+0x14e>
 8001250:	e76e      	b.n	8001130 <HAL_GPIO_Init+0x2c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001252:	2d12      	cmp	r5, #18
 8001254:	d000      	beq.n	8001258 <HAL_GPIO_Init+0x154>
 8001256:	e77d      	b.n	8001154 <HAL_GPIO_Init+0x50>
 8001258:	e76a      	b.n	8001130 <HAL_GPIO_Init+0x2c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125a:	2702      	movs	r7, #2
 800125c:	e7a3      	b.n	80011a6 <HAL_GPIO_Init+0xa2>
 800125e:	2700      	movs	r7, #0
 8001260:	e7a1      	b.n	80011a6 <HAL_GPIO_Init+0xa2>
 8001262:	2701      	movs	r7, #1
 8001264:	e79f      	b.n	80011a6 <HAL_GPIO_Init+0xa2>
  } 
}
 8001266:	b002      	add	sp, #8
 8001268:	bc04      	pop	{r2}
 800126a:	4690      	mov	r8, r2
 800126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000
 8001278:	48000400 	.word	0x48000400
 800127c:	48000800 	.word	0x48000800
 8001280:	40010400 	.word	0x40010400

08001284 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001284:	2a00      	cmp	r2, #0
 8001286:	d101      	bne.n	800128c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001288:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800128a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800128c:	6181      	str	r1, [r0, #24]
 800128e:	e7fc      	b.n	800128a <HAL_GPIO_WritePin+0x6>

08001290 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8001294:	d024      	beq.n	80012e0 <HAL_IWDG_Init+0x50>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8001296:	6803      	ldr	r3, [r0, #0]
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <HAL_IWDG_Init+0x54>)
 800129a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800129c:	6803      	ldr	r3, [r0, #0]
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_IWDG_Init+0x58>)
 80012a0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80012a2:	6803      	ldr	r3, [r0, #0]
 80012a4:	6842      	ldr	r2, [r0, #4]
 80012a6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80012a8:	6803      	ldr	r3, [r0, #0]
 80012aa:	6882      	ldr	r2, [r0, #8]
 80012ac:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80012ae:	f7fe fffd 	bl	80002ac <HAL_GetTick>
 80012b2:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d006      	beq.n	80012ca <HAL_IWDG_Init+0x3a>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 80012bc:	f7fe fff6 	bl	80002ac <HAL_GetTick>
 80012c0:	1b40      	subs	r0, r0, r5
 80012c2:	2827      	cmp	r0, #39	; 0x27
 80012c4:	d9f6      	bls.n	80012b4 <HAL_IWDG_Init+0x24>
    {
      return HAL_TIMEOUT;
 80012c6:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 80012c8:	bd70      	pop	{r4, r5, r6, pc}
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 80012ca:	6919      	ldr	r1, [r3, #16]
 80012cc:	68e2      	ldr	r2, [r4, #12]
 80012ce:	4291      	cmp	r1, r2
 80012d0:	d002      	beq.n	80012d8 <HAL_IWDG_Init+0x48>
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80012d2:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80012d4:	2000      	movs	r0, #0
 80012d6:	e7f7      	b.n	80012c8 <HAL_IWDG_Init+0x38>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IWDG_Init+0x5c>)
 80012da:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80012dc:	2000      	movs	r0, #0
 80012de:	e7f3      	b.n	80012c8 <HAL_IWDG_Init+0x38>
    return HAL_ERROR;
 80012e0:	2001      	movs	r0, #1
 80012e2:	e7f1      	b.n	80012c8 <HAL_IWDG_Init+0x38>
 80012e4:	0000cccc 	.word	0x0000cccc
 80012e8:	00005555 	.word	0x00005555
 80012ec:	0000aaaa 	.word	0x0000aaaa

080012f0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80012f0:	6803      	ldr	r3, [r0, #0]
 80012f2:	4a02      	ldr	r2, [pc, #8]	; (80012fc <HAL_IWDG_Refresh+0xc>)
 80012f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80012f6:	2000      	movs	r0, #0
 80012f8:	4770      	bx	lr
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	0000aaaa 	.word	0x0000aaaa

08001300 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	1e04      	subs	r4, r0, #0
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001304:	d058      	beq.n	80013b8 <HAL_PCD_Init+0xb8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001306:	23ea      	movs	r3, #234	; 0xea
 8001308:	33ff      	adds	r3, #255	; 0xff
 800130a:	5cc3      	ldrb	r3, [r0, r3]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_PCD_Init+0x1c>
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001310:	2203      	movs	r2, #3
 8001312:	23ea      	movs	r3, #234	; 0xea
 8001314:	33ff      	adds	r3, #255	; 0xff
 8001316:	54e2      	strb	r2, [r4, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001318:	2200      	movs	r2, #0
 800131a:	e018      	b.n	800134e <HAL_PCD_Init+0x4e>
    hpcd->Lock = HAL_UNLOCKED;
 800131c:	2200      	movs	r2, #0
 800131e:	33e9      	adds	r3, #233	; 0xe9
 8001320:	33ff      	adds	r3, #255	; 0xff
 8001322:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 8001324:	f003 fd78 	bl	8004e18 <HAL_PCD_MspInit>
 8001328:	e7f2      	b.n	8001310 <HAL_PCD_Init+0x10>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 800132a:	00d1      	lsls	r1, r2, #3
 800132c:	1a89      	subs	r1, r1, r2
 800132e:	008b      	lsls	r3, r1, #2
 8001330:	18e3      	adds	r3, r4, r3
 8001332:	0019      	movs	r1, r3
 8001334:	3129      	adds	r1, #41	; 0x29
 8001336:	2001      	movs	r0, #1
 8001338:	7008      	strb	r0, [r1, #0]
   hpcd->IN_ep[i].num = i;
 800133a:	3901      	subs	r1, #1
 800133c:	700a      	strb	r2, [r1, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 800133e:	0018      	movs	r0, r3
 8001340:	302b      	adds	r0, #43	; 0x2b
 8001342:	2100      	movs	r1, #0
 8001344:	7001      	strb	r1, [r0, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 8001346:	6359      	str	r1, [r3, #52]	; 0x34
   hpcd->IN_ep[i].xfer_buff = 0U;
 8001348:	6399      	str	r1, [r3, #56]	; 0x38
   hpcd->IN_ep[i].xfer_len = 0U;
 800134a:	63d9      	str	r1, [r3, #60]	; 0x3c
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800134c:	3201      	adds	r2, #1
 800134e:	6860      	ldr	r0, [r4, #4]
 8001350:	4282      	cmp	r2, r0
 8001352:	d3ea      	bcc.n	800132a <HAL_PCD_Init+0x2a>
 8001354:	2200      	movs	r2, #0
 8001356:	e014      	b.n	8001382 <HAL_PCD_Init+0x82>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8001358:	00d1      	lsls	r1, r2, #3
 800135a:	1a89      	subs	r1, r1, r2
 800135c:	008b      	lsls	r3, r1, #2
 800135e:	18e3      	adds	r3, r4, r3
 8001360:	001d      	movs	r5, r3
 8001362:	350a      	adds	r5, #10
 8001364:	35ff      	adds	r5, #255	; 0xff
 8001366:	2100      	movs	r1, #0
 8001368:	7029      	strb	r1, [r5, #0]
   hpcd->OUT_ep[i].num = i;
 800136a:	3d01      	subs	r5, #1
 800136c:	702a      	strb	r2, [r5, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 800136e:	3503      	adds	r5, #3
 8001370:	7029      	strb	r1, [r5, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8001372:	3509      	adds	r5, #9
 8001374:	6029      	str	r1, [r5, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001376:	3504      	adds	r5, #4
 8001378:	6029      	str	r1, [r5, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800137a:	331d      	adds	r3, #29
 800137c:	33ff      	adds	r3, #255	; 0xff
 800137e:	6019      	str	r1, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001380:	3201      	adds	r2, #1
 8001382:	4282      	cmp	r2, r0
 8001384:	d3e8      	bcc.n	8001358 <HAL_PCD_Init+0x58>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8001386:	2340      	movs	r3, #64	; 0x40
 8001388:	2201      	movs	r2, #1
 800138a:	6821      	ldr	r1, [r4, #0]
 800138c:	52ca      	strh	r2, [r1, r3]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 800138e:	2200      	movs	r2, #0
 8001390:	6821      	ldr	r1, [r4, #0]
 8001392:	52ca      	strh	r2, [r1, r3]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8001394:	2144      	movs	r1, #68	; 0x44
 8001396:	6820      	ldr	r0, [r4, #0]
 8001398:	5242      	strh	r2, [r0, r1]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 800139a:	310c      	adds	r1, #12
 800139c:	6820      	ldr	r0, [r4, #0]
 800139e:	5242      	strh	r2, [r0, r1]
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <HAL_PCD_Init+0xbc>)
 80013a2:	6821      	ldr	r1, [r4, #0]
 80013a4:	52ca      	strh	r2, [r1, r3]
  
  hpcd->USB_Address = 0U;
 80013a6:	3b1c      	subs	r3, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	54e2      	strb	r2, [r4, r3]
  hpcd->State= HAL_PCD_STATE_READY;
 80013ac:	23ea      	movs	r3, #234	; 0xea
 80013ae:	33ff      	adds	r3, #255	; 0xff
 80013b0:	2201      	movs	r2, #1
 80013b2:	54e2      	strb	r2, [r4, r3]

 return HAL_OK;
 80013b4:	2000      	movs	r0, #0
}
 80013b6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80013b8:	2001      	movs	r0, #1
 80013ba:	e7fc      	b.n	80013b6 <HAL_PCD_Init+0xb6>
 80013bc:	ffffbf00 	.word	0xffffbf00

080013c0 <HAL_PCD_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 80013c0:	6801      	ldr	r1, [r0, #0]
 80013c2:	2258      	movs	r2, #88	; 0x58
 80013c4:	5a8b      	ldrh	r3, [r1, r2]
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <HAL_PCD_Start+0x14>)
 80013c8:	4303      	orrs	r3, r0
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	528b      	strh	r3, [r1, r2]
  
  return HAL_OK;
}
 80013ce:	2000      	movs	r0, #0
 80013d0:	4770      	bx	lr
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	ffff8000 	.word	0xffff8000

080013d8 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 80013d8:	23f4      	movs	r3, #244	; 0xf4
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	5cc3      	ldrb	r3, [r0, r3]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d013      	beq.n	800140a <HAL_PCD_SetAddress+0x32>
 80013e2:	2201      	movs	r2, #1
 80013e4:	23f4      	movs	r3, #244	; 0xf4
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	54c2      	strb	r2, [r0, r3]

   if(address == 0U) 
 80013ea:	2900      	cmp	r1, #0
 80013ec:	d10a      	bne.n	8001404 <HAL_PCD_SetAddress+0x2c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80013ee:	327f      	adds	r2, #127	; 0x7f
 80013f0:	3b9d      	subs	r3, #157	; 0x9d
 80013f2:	3bff      	subs	r3, #255	; 0xff
 80013f4:	6801      	ldr	r1, [r0, #0]
 80013f6:	52ca      	strh	r2, [r1, r3]
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 80013f8:	2200      	movs	r2, #0
 80013fa:	23f4      	movs	r3, #244	; 0xf4
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001400:	2000      	movs	r0, #0
}
 8001402:	4770      	bx	lr
     hpcd->USB_Address = address;
 8001404:	2324      	movs	r3, #36	; 0x24
 8001406:	54c1      	strb	r1, [r0, r3]
 8001408:	e7f6      	b.n	80013f8 <HAL_PCD_SetAddress+0x20>
   __HAL_LOCK(hpcd); 
 800140a:	2002      	movs	r0, #2
 800140c:	e7f9      	b.n	8001402 <HAL_PCD_SetAddress+0x2a>
	...

08001410 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001410:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001412:	b24e      	sxtb	r6, r1
 8001414:	2e00      	cmp	r6, #0
 8001416:	db65      	blt.n	80014e4 <HAL_PCD_EP_Open+0xd4>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001418:	247f      	movs	r4, #127	; 0x7f
 800141a:	400c      	ands	r4, r1
 800141c:	00e5      	lsls	r5, r4, #3
 800141e:	1b2d      	subs	r5, r5, r4
 8001420:	00ac      	lsls	r4, r5, #2
 8001422:	3409      	adds	r4, #9
 8001424:	34ff      	adds	r4, #255	; 0xff
 8001426:	1904      	adds	r4, r0, r4
  }
  ep->num   = ep_addr & 0x7FU;
 8001428:	257f      	movs	r5, #127	; 0x7f
 800142a:	400d      	ands	r5, r1
 800142c:	7025      	strb	r5, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800142e:	0ff6      	lsrs	r6, r6, #31
 8001430:	7066      	strb	r6, [r4, #1]
  ep->maxpacket = ep_mps;
 8001432:	60e2      	str	r2, [r4, #12]
  ep->type = ep_type;
 8001434:	70e3      	strb	r3, [r4, #3]
  
  __HAL_LOCK(hpcd); 
 8001436:	23f4      	movs	r3, #244	; 0xf4
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	5cc3      	ldrb	r3, [r0, r3]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d100      	bne.n	8001442 <HAL_PCD_EP_Open+0x32>
 8001440:	e175      	b.n	800172e <HAL_PCD_EP_Open+0x31e>
 8001442:	2201      	movs	r2, #1
 8001444:	23f4      	movs	r3, #244	; 0xf4
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	54c2      	strb	r2, [r0, r3]

  /* initialize Endpoint */
  switch (ep->type)
 800144a:	78e3      	ldrb	r3, [r4, #3]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d100      	bne.n	8001452 <HAL_PCD_EP_Open+0x42>
 8001450:	e074      	b.n	800153c <HAL_PCD_EP_Open+0x12c>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d04e      	beq.n	80014f4 <HAL_PCD_EP_Open+0xe4>
 8001456:	2b02      	cmp	r3, #2
 8001458:	d059      	beq.n	800150e <HAL_PCD_EP_Open+0xfe>
 800145a:	2b03      	cmp	r3, #3
 800145c:	d061      	beq.n	8001522 <HAL_PCD_EP_Open+0x112>
    break;
  default:
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 800145e:	7822      	ldrb	r2, [r4, #0]
 8001460:	0093      	lsls	r3, r2, #2
 8001462:	6801      	ldr	r1, [r0, #0]
 8001464:	468c      	mov	ip, r1
 8001466:	4463      	add	r3, ip
 8001468:	8819      	ldrh	r1, [r3, #0]
 800146a:	4db2      	ldr	r5, [pc, #712]	; (8001734 <HAL_PCD_EP_Open+0x324>)
 800146c:	4029      	ands	r1, r5
 800146e:	430a      	orrs	r2, r1
 8001470:	49b1      	ldr	r1, [pc, #708]	; (8001738 <HAL_PCD_EP_Open+0x328>)
 8001472:	430a      	orrs	r2, r1
 8001474:	801a      	strh	r2, [r3, #0]
  
  if (ep->doublebuffer == 0U) 
 8001476:	7aa3      	ldrb	r3, [r4, #10]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d000      	beq.n	800147e <HAL_PCD_EP_Open+0x6e>
 800147c:	e0b5      	b.n	80015ea <HAL_PCD_EP_Open+0x1da>
  {
    if (ep->is_in)
 800147e:	7863      	ldrb	r3, [r4, #1]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d100      	bne.n	8001486 <HAL_PCD_EP_Open+0x76>
 8001484:	e067      	b.n	8001556 <HAL_PCD_EP_Open+0x146>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8001486:	6801      	ldr	r1, [r0, #0]
 8001488:	2350      	movs	r3, #80	; 0x50
 800148a:	5acb      	ldrh	r3, [r1, r3]
 800148c:	7822      	ldrb	r2, [r4, #0]
 800148e:	00d2      	lsls	r2, r2, #3
 8001490:	189b      	adds	r3, r3, r2
 8001492:	185b      	adds	r3, r3, r1
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	00d2      	lsls	r2, r2, #3
 8001498:	4694      	mov	ip, r2
 800149a:	4463      	add	r3, ip
 800149c:	88a2      	ldrh	r2, [r4, #4]
 800149e:	2101      	movs	r1, #1
 80014a0:	438a      	bics	r2, r1
 80014a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80014a4:	7823      	ldrb	r3, [r4, #0]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	6802      	ldr	r2, [r0, #0]
 80014aa:	4694      	mov	ip, r2
 80014ac:	4463      	add	r3, ip
 80014ae:	881a      	ldrh	r2, [r3, #0]
 80014b0:	0651      	lsls	r1, r2, #25
 80014b2:	d503      	bpl.n	80014bc <HAL_PCD_EP_Open+0xac>
 80014b4:	402a      	ands	r2, r5
 80014b6:	49a1      	ldr	r1, [pc, #644]	; (800173c <HAL_PCD_EP_Open+0x32c>)
 80014b8:	430a      	orrs	r2, r1
 80014ba:	801a      	strh	r2, [r3, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 80014bc:	7822      	ldrb	r2, [r4, #0]
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	6803      	ldr	r3, [r0, #0]
 80014c2:	469c      	mov	ip, r3
 80014c4:	4462      	add	r2, ip
 80014c6:	8813      	ldrh	r3, [r2, #0]
 80014c8:	499d      	ldr	r1, [pc, #628]	; (8001740 <HAL_PCD_EP_Open+0x330>)
 80014ca:	400b      	ands	r3, r1
 80014cc:	2120      	movs	r1, #32
 80014ce:	404b      	eors	r3, r1
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4999      	ldr	r1, [pc, #612]	; (8001738 <HAL_PCD_EP_Open+0x328>)
 80014d4:	430b      	orrs	r3, r1
 80014d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80014d8:	2200      	movs	r2, #0
 80014da:	23f4      	movs	r3, #244	; 0xf4
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	54c2      	strb	r2, [r0, r3]
  return ret;
 80014e0:	2000      	movs	r0, #0
}
 80014e2:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80014e4:	247f      	movs	r4, #127	; 0x7f
 80014e6:	400c      	ands	r4, r1
 80014e8:	00e5      	lsls	r5, r4, #3
 80014ea:	1b2d      	subs	r5, r5, r4
 80014ec:	00ac      	lsls	r4, r5, #2
 80014ee:	3428      	adds	r4, #40	; 0x28
 80014f0:	1904      	adds	r4, r0, r4
 80014f2:	e799      	b.n	8001428 <HAL_PCD_EP_Open+0x18>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80014f4:	7823      	ldrb	r3, [r4, #0]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	6802      	ldr	r2, [r0, #0]
 80014fa:	4694      	mov	ip, r2
 80014fc:	4463      	add	r3, ip
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	4990      	ldr	r1, [pc, #576]	; (8001744 <HAL_PCD_EP_Open+0x334>)
 8001502:	4011      	ands	r1, r2
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	430a      	orrs	r2, r1
 800150a:	801a      	strh	r2, [r3, #0]
    break;
 800150c:	e7a7      	b.n	800145e <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 800150e:	7823      	ldrb	r3, [r4, #0]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	6802      	ldr	r2, [r0, #0]
 8001514:	4694      	mov	ip, r2
 8001516:	4463      	add	r3, ip
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	498a      	ldr	r1, [pc, #552]	; (8001744 <HAL_PCD_EP_Open+0x334>)
 800151c:	400a      	ands	r2, r1
 800151e:	801a      	strh	r2, [r3, #0]
    break;
 8001520:	e79d      	b.n	800145e <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8001522:	7823      	ldrb	r3, [r4, #0]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	6802      	ldr	r2, [r0, #0]
 8001528:	4694      	mov	ip, r2
 800152a:	4463      	add	r3, ip
 800152c:	881a      	ldrh	r2, [r3, #0]
 800152e:	4985      	ldr	r1, [pc, #532]	; (8001744 <HAL_PCD_EP_Open+0x334>)
 8001530:	4011      	ands	r1, r2
 8001532:	22c0      	movs	r2, #192	; 0xc0
 8001534:	00d2      	lsls	r2, r2, #3
 8001536:	430a      	orrs	r2, r1
 8001538:	801a      	strh	r2, [r3, #0]
    break;
 800153a:	e790      	b.n	800145e <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 800153c:	7823      	ldrb	r3, [r4, #0]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	6802      	ldr	r2, [r0, #0]
 8001542:	4694      	mov	ip, r2
 8001544:	4463      	add	r3, ip
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	497e      	ldr	r1, [pc, #504]	; (8001744 <HAL_PCD_EP_Open+0x334>)
 800154a:	4011      	ands	r1, r2
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	00d2      	lsls	r2, r2, #3
 8001550:	430a      	orrs	r2, r1
 8001552:	801a      	strh	r2, [r3, #0]
    break;
 8001554:	e783      	b.n	800145e <HAL_PCD_EP_Open+0x4e>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8001556:	6801      	ldr	r1, [r0, #0]
 8001558:	2550      	movs	r5, #80	; 0x50
 800155a:	5b4b      	ldrh	r3, [r1, r5]
 800155c:	7822      	ldrb	r2, [r4, #0]
 800155e:	00d2      	lsls	r2, r2, #3
 8001560:	189b      	adds	r3, r3, r2
 8001562:	185b      	adds	r3, r3, r1
 8001564:	4a78      	ldr	r2, [pc, #480]	; (8001748 <HAL_PCD_EP_Open+0x338>)
 8001566:	4694      	mov	ip, r2
 8001568:	4463      	add	r3, ip
 800156a:	88a2      	ldrh	r2, [r4, #4]
 800156c:	2101      	movs	r1, #1
 800156e:	438a      	bics	r2, r1
 8001570:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8001572:	6801      	ldr	r1, [r0, #0]
 8001574:	5b4b      	ldrh	r3, [r1, r5]
 8001576:	7822      	ldrb	r2, [r4, #0]
 8001578:	00d2      	lsls	r2, r2, #3
 800157a:	189b      	adds	r3, r3, r2
 800157c:	185b      	adds	r3, r3, r1
 800157e:	4a73      	ldr	r2, [pc, #460]	; (800174c <HAL_PCD_EP_Open+0x33c>)
 8001580:	4694      	mov	ip, r2
 8001582:	4463      	add	r3, ip
 8001584:	68e1      	ldr	r1, [r4, #12]
 8001586:	293e      	cmp	r1, #62	; 0x3e
 8001588:	d926      	bls.n	80015d8 <HAL_PCD_EP_Open+0x1c8>
 800158a:	094a      	lsrs	r2, r1, #5
 800158c:	b292      	uxth	r2, r2
 800158e:	06c9      	lsls	r1, r1, #27
 8001590:	d101      	bne.n	8001596 <HAL_PCD_EP_Open+0x186>
 8001592:	3a01      	subs	r2, #1
 8001594:	b292      	uxth	r2, r2
 8001596:	0292      	lsls	r2, r2, #10
 8001598:	b292      	uxth	r2, r2
 800159a:	496d      	ldr	r1, [pc, #436]	; (8001750 <HAL_PCD_EP_Open+0x340>)
 800159c:	430a      	orrs	r2, r1
 800159e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80015a0:	7823      	ldrb	r3, [r4, #0]
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	6802      	ldr	r2, [r0, #0]
 80015a6:	4694      	mov	ip, r2
 80015a8:	4463      	add	r3, ip
 80015aa:	881a      	ldrh	r2, [r3, #0]
 80015ac:	0451      	lsls	r1, r2, #17
 80015ae:	d504      	bpl.n	80015ba <HAL_PCD_EP_Open+0x1aa>
 80015b0:	4960      	ldr	r1, [pc, #384]	; (8001734 <HAL_PCD_EP_Open+0x324>)
 80015b2:	400a      	ands	r2, r1
 80015b4:	4967      	ldr	r1, [pc, #412]	; (8001754 <HAL_PCD_EP_Open+0x344>)
 80015b6:	430a      	orrs	r2, r1
 80015b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80015ba:	7823      	ldrb	r3, [r4, #0]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	6802      	ldr	r2, [r0, #0]
 80015c0:	4694      	mov	ip, r2
 80015c2:	4463      	add	r3, ip
 80015c4:	8819      	ldrh	r1, [r3, #0]
 80015c6:	4a64      	ldr	r2, [pc, #400]	; (8001758 <HAL_PCD_EP_Open+0x348>)
 80015c8:	4011      	ands	r1, r2
 80015ca:	22c0      	movs	r2, #192	; 0xc0
 80015cc:	0192      	lsls	r2, r2, #6
 80015ce:	4051      	eors	r1, r2
 80015d0:	4a59      	ldr	r2, [pc, #356]	; (8001738 <HAL_PCD_EP_Open+0x328>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	801a      	strh	r2, [r3, #0]
 80015d6:	e77f      	b.n	80014d8 <HAL_PCD_EP_Open+0xc8>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 80015d8:	084a      	lsrs	r2, r1, #1
 80015da:	b292      	uxth	r2, r2
 80015dc:	07c9      	lsls	r1, r1, #31
 80015de:	d501      	bpl.n	80015e4 <HAL_PCD_EP_Open+0x1d4>
 80015e0:	3201      	adds	r2, #1
 80015e2:	b292      	uxth	r2, r2
 80015e4:	0292      	lsls	r2, r2, #10
 80015e6:	801a      	strh	r2, [r3, #0]
 80015e8:	e7da      	b.n	80015a0 <HAL_PCD_EP_Open+0x190>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80015ea:	7823      	ldrb	r3, [r4, #0]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	6802      	ldr	r2, [r0, #0]
 80015f0:	4694      	mov	ip, r2
 80015f2:	4463      	add	r3, ip
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	4959      	ldr	r1, [pc, #356]	; (800175c <HAL_PCD_EP_Open+0x34c>)
 80015f8:	4011      	ands	r1, r2
 80015fa:	4a59      	ldr	r2, [pc, #356]	; (8001760 <HAL_PCD_EP_Open+0x350>)
 80015fc:	430a      	orrs	r2, r1
 80015fe:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8001600:	6801      	ldr	r1, [r0, #0]
 8001602:	2650      	movs	r6, #80	; 0x50
 8001604:	5b8b      	ldrh	r3, [r1, r6]
 8001606:	7822      	ldrb	r2, [r4, #0]
 8001608:	00d2      	lsls	r2, r2, #3
 800160a:	189b      	adds	r3, r3, r2
 800160c:	185b      	adds	r3, r3, r1
 800160e:	2280      	movs	r2, #128	; 0x80
 8001610:	00d2      	lsls	r2, r2, #3
 8001612:	4694      	mov	ip, r2
 8001614:	4463      	add	r3, ip
 8001616:	88e2      	ldrh	r2, [r4, #6]
 8001618:	2101      	movs	r1, #1
 800161a:	438a      	bics	r2, r1
 800161c:	801a      	strh	r2, [r3, #0]
 800161e:	6805      	ldr	r5, [r0, #0]
 8001620:	5bab      	ldrh	r3, [r5, r6]
 8001622:	7822      	ldrb	r2, [r4, #0]
 8001624:	00d2      	lsls	r2, r2, #3
 8001626:	189b      	adds	r3, r3, r2
 8001628:	195b      	adds	r3, r3, r5
 800162a:	4a47      	ldr	r2, [pc, #284]	; (8001748 <HAL_PCD_EP_Open+0x338>)
 800162c:	4694      	mov	ip, r2
 800162e:	4463      	add	r3, ip
 8001630:	8922      	ldrh	r2, [r4, #8]
 8001632:	438a      	bics	r2, r1
 8001634:	801a      	strh	r2, [r3, #0]
    if (ep->is_in==0U)
 8001636:	7863      	ldrb	r3, [r4, #1]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d13d      	bne.n	80016b8 <HAL_PCD_EP_Open+0x2a8>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800163c:	7823      	ldrb	r3, [r4, #0]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	6802      	ldr	r2, [r0, #0]
 8001642:	4694      	mov	ip, r2
 8001644:	4463      	add	r3, ip
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	0451      	lsls	r1, r2, #17
 800164a:	d504      	bpl.n	8001656 <HAL_PCD_EP_Open+0x246>
 800164c:	4939      	ldr	r1, [pc, #228]	; (8001734 <HAL_PCD_EP_Open+0x324>)
 800164e:	400a      	ands	r2, r1
 8001650:	4940      	ldr	r1, [pc, #256]	; (8001754 <HAL_PCD_EP_Open+0x344>)
 8001652:	430a      	orrs	r2, r1
 8001654:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001656:	7823      	ldrb	r3, [r4, #0]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	6802      	ldr	r2, [r0, #0]
 800165c:	4694      	mov	ip, r2
 800165e:	4463      	add	r3, ip
 8001660:	881a      	ldrh	r2, [r3, #0]
 8001662:	0651      	lsls	r1, r2, #25
 8001664:	d504      	bpl.n	8001670 <HAL_PCD_EP_Open+0x260>
 8001666:	4933      	ldr	r1, [pc, #204]	; (8001734 <HAL_PCD_EP_Open+0x324>)
 8001668:	400a      	ands	r2, r1
 800166a:	4934      	ldr	r1, [pc, #208]	; (800173c <HAL_PCD_EP_Open+0x32c>)
 800166c:	430a      	orrs	r2, r1
 800166e:	801a      	strh	r2, [r3, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001670:	7823      	ldrb	r3, [r4, #0]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	6802      	ldr	r2, [r0, #0]
 8001676:	4694      	mov	ip, r2
 8001678:	4463      	add	r3, ip
 800167a:	881a      	ldrh	r2, [r3, #0]
 800167c:	492d      	ldr	r1, [pc, #180]	; (8001734 <HAL_PCD_EP_Open+0x324>)
 800167e:	4011      	ands	r1, r2
 8001680:	4a2e      	ldr	r2, [pc, #184]	; (800173c <HAL_PCD_EP_Open+0x32c>)
 8001682:	430a      	orrs	r2, r1
 8001684:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001686:	7821      	ldrb	r1, [r4, #0]
 8001688:	0089      	lsls	r1, r1, #2
 800168a:	6803      	ldr	r3, [r0, #0]
 800168c:	469c      	mov	ip, r3
 800168e:	4461      	add	r1, ip
 8001690:	880b      	ldrh	r3, [r1, #0]
 8001692:	4a31      	ldr	r2, [pc, #196]	; (8001758 <HAL_PCD_EP_Open+0x348>)
 8001694:	401a      	ands	r2, r3
 8001696:	23c0      	movs	r3, #192	; 0xc0
 8001698:	019b      	lsls	r3, r3, #6
 800169a:	4053      	eors	r3, r2
 800169c:	4a26      	ldr	r2, [pc, #152]	; (8001738 <HAL_PCD_EP_Open+0x328>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	800b      	strh	r3, [r1, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80016a2:	7823      	ldrb	r3, [r4, #0]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	6801      	ldr	r1, [r0, #0]
 80016a8:	468c      	mov	ip, r1
 80016aa:	4463      	add	r3, ip
 80016ac:	8819      	ldrh	r1, [r3, #0]
 80016ae:	4c24      	ldr	r4, [pc, #144]	; (8001740 <HAL_PCD_EP_Open+0x330>)
 80016b0:	4021      	ands	r1, r4
 80016b2:	430a      	orrs	r2, r1
 80016b4:	801a      	strh	r2, [r3, #0]
 80016b6:	e70f      	b.n	80014d8 <HAL_PCD_EP_Open+0xc8>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80016b8:	7823      	ldrb	r3, [r4, #0]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	6802      	ldr	r2, [r0, #0]
 80016be:	4694      	mov	ip, r2
 80016c0:	4463      	add	r3, ip
 80016c2:	881a      	ldrh	r2, [r3, #0]
 80016c4:	0451      	lsls	r1, r2, #17
 80016c6:	d504      	bpl.n	80016d2 <HAL_PCD_EP_Open+0x2c2>
 80016c8:	491a      	ldr	r1, [pc, #104]	; (8001734 <HAL_PCD_EP_Open+0x324>)
 80016ca:	400a      	ands	r2, r1
 80016cc:	4921      	ldr	r1, [pc, #132]	; (8001754 <HAL_PCD_EP_Open+0x344>)
 80016ce:	430a      	orrs	r2, r1
 80016d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80016d2:	7823      	ldrb	r3, [r4, #0]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	6802      	ldr	r2, [r0, #0]
 80016d8:	4694      	mov	ip, r2
 80016da:	4463      	add	r3, ip
 80016dc:	881a      	ldrh	r2, [r3, #0]
 80016de:	0651      	lsls	r1, r2, #25
 80016e0:	d504      	bpl.n	80016ec <HAL_PCD_EP_Open+0x2dc>
 80016e2:	4914      	ldr	r1, [pc, #80]	; (8001734 <HAL_PCD_EP_Open+0x324>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	4915      	ldr	r1, [pc, #84]	; (800173c <HAL_PCD_EP_Open+0x32c>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80016ec:	7823      	ldrb	r3, [r4, #0]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	6802      	ldr	r2, [r0, #0]
 80016f2:	4694      	mov	ip, r2
 80016f4:	4463      	add	r3, ip
 80016f6:	881a      	ldrh	r2, [r3, #0]
 80016f8:	490e      	ldr	r1, [pc, #56]	; (8001734 <HAL_PCD_EP_Open+0x324>)
 80016fa:	4011      	ands	r1, r2
 80016fc:	4a15      	ldr	r2, [pc, #84]	; (8001754 <HAL_PCD_EP_Open+0x344>)
 80016fe:	430a      	orrs	r2, r1
 8001700:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8001702:	7821      	ldrb	r1, [r4, #0]
 8001704:	0089      	lsls	r1, r1, #2
 8001706:	6803      	ldr	r3, [r0, #0]
 8001708:	469c      	mov	ip, r3
 800170a:	4461      	add	r1, ip
 800170c:	880b      	ldrh	r3, [r1, #0]
 800170e:	4a0c      	ldr	r2, [pc, #48]	; (8001740 <HAL_PCD_EP_Open+0x330>)
 8001710:	4013      	ands	r3, r2
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_PCD_EP_Open+0x328>)
 8001714:	4313      	orrs	r3, r2
 8001716:	800b      	strh	r3, [r1, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001718:	7823      	ldrb	r3, [r4, #0]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	6801      	ldr	r1, [r0, #0]
 800171e:	468c      	mov	ip, r1
 8001720:	4463      	add	r3, ip
 8001722:	8819      	ldrh	r1, [r3, #0]
 8001724:	4c0c      	ldr	r4, [pc, #48]	; (8001758 <HAL_PCD_EP_Open+0x348>)
 8001726:	4021      	ands	r1, r4
 8001728:	430a      	orrs	r2, r1
 800172a:	801a      	strh	r2, [r3, #0]
 800172c:	e6d4      	b.n	80014d8 <HAL_PCD_EP_Open+0xc8>
  __HAL_LOCK(hpcd); 
 800172e:	2002      	movs	r0, #2
 8001730:	e6d7      	b.n	80014e2 <HAL_PCD_EP_Open+0xd2>
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	00000f0f 	.word	0x00000f0f
 8001738:	ffff8080 	.word	0xffff8080
 800173c:	ffff80c0 	.word	0xffff80c0
 8001740:	ffff8fbf 	.word	0xffff8fbf
 8001744:	ffff898f 	.word	0xffff898f
 8001748:	00000404 	.word	0x00000404
 800174c:	00000406 	.word	0x00000406
 8001750:	ffff8000 	.word	0xffff8000
 8001754:	ffffc080 	.word	0xffffc080
 8001758:	ffffbf8f 	.word	0xffffbf8f
 800175c:	00000e0f 	.word	0x00000e0f
 8001760:	ffff8180 	.word	0xffff8180

08001764 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001764:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001766:	b24a      	sxtb	r2, r1
 8001768:	2a00      	cmp	r2, #0
 800176a:	db3a      	blt.n	80017e2 <HAL_PCD_EP_Close+0x7e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800176c:	237f      	movs	r3, #127	; 0x7f
 800176e:	400b      	ands	r3, r1
 8001770:	00dc      	lsls	r4, r3, #3
 8001772:	1ae4      	subs	r4, r4, r3
 8001774:	00a3      	lsls	r3, r4, #2
 8001776:	3309      	adds	r3, #9
 8001778:	33ff      	adds	r3, #255	; 0xff
 800177a:	18c3      	adds	r3, r0, r3
  }
  ep->num   = ep_addr & 0x7FU;
 800177c:	247f      	movs	r4, #127	; 0x7f
 800177e:	4021      	ands	r1, r4
 8001780:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001782:	0fd2      	lsrs	r2, r2, #31
 8001784:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001786:	22f4      	movs	r2, #244	; 0xf4
 8001788:	0052      	lsls	r2, r2, #1
 800178a:	5c82      	ldrb	r2, [r0, r2]
 800178c:	2a01      	cmp	r2, #1
 800178e:	d100      	bne.n	8001792 <HAL_PCD_EP_Close+0x2e>
 8001790:	e0c1      	b.n	8001916 <HAL_PCD_EP_Close+0x1b2>
 8001792:	2101      	movs	r1, #1
 8001794:	22f4      	movs	r2, #244	; 0xf4
 8001796:	0052      	lsls	r2, r2, #1
 8001798:	5481      	strb	r1, [r0, r2]

  if (ep->doublebuffer == 0U) 
 800179a:	7a9a      	ldrb	r2, [r3, #10]
 800179c:	2a00      	cmp	r2, #0
 800179e:	d141      	bne.n	8001824 <HAL_PCD_EP_Close+0xc0>
  {
    if (ep->is_in)
 80017a0:	785a      	ldrb	r2, [r3, #1]
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	d025      	beq.n	80017f2 <HAL_PCD_EP_Close+0x8e>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	0092      	lsls	r2, r2, #2
 80017aa:	6801      	ldr	r1, [r0, #0]
 80017ac:	468c      	mov	ip, r1
 80017ae:	4462      	add	r2, ip
 80017b0:	8811      	ldrh	r1, [r2, #0]
 80017b2:	064c      	lsls	r4, r1, #25
 80017b4:	d504      	bpl.n	80017c0 <HAL_PCD_EP_Close+0x5c>
 80017b6:	4c59      	ldr	r4, [pc, #356]	; (800191c <HAL_PCD_EP_Close+0x1b8>)
 80017b8:	4021      	ands	r1, r4
 80017ba:	4c59      	ldr	r4, [pc, #356]	; (8001920 <HAL_PCD_EP_Close+0x1bc>)
 80017bc:	4321      	orrs	r1, r4
 80017be:	8011      	strh	r1, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	6802      	ldr	r2, [r0, #0]
 80017c6:	4694      	mov	ip, r2
 80017c8:	4463      	add	r3, ip
 80017ca:	881a      	ldrh	r2, [r3, #0]
 80017cc:	4955      	ldr	r1, [pc, #340]	; (8001924 <HAL_PCD_EP_Close+0x1c0>)
 80017ce:	4011      	ands	r1, r2
 80017d0:	4a55      	ldr	r2, [pc, #340]	; (8001928 <HAL_PCD_EP_Close+0x1c4>)
 80017d2:	430a      	orrs	r2, r1
 80017d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80017d6:	2200      	movs	r2, #0
 80017d8:	23f4      	movs	r3, #244	; 0xf4
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80017de:	2000      	movs	r0, #0
}
 80017e0:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80017e2:	237f      	movs	r3, #127	; 0x7f
 80017e4:	400b      	ands	r3, r1
 80017e6:	00dc      	lsls	r4, r3, #3
 80017e8:	1ae4      	subs	r4, r4, r3
 80017ea:	00a3      	lsls	r3, r4, #2
 80017ec:	3328      	adds	r3, #40	; 0x28
 80017ee:	18c3      	adds	r3, r0, r3
 80017f0:	e7c4      	b.n	800177c <HAL_PCD_EP_Close+0x18>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	6801      	ldr	r1, [r0, #0]
 80017f8:	468c      	mov	ip, r1
 80017fa:	4462      	add	r2, ip
 80017fc:	8811      	ldrh	r1, [r2, #0]
 80017fe:	044c      	lsls	r4, r1, #17
 8001800:	d504      	bpl.n	800180c <HAL_PCD_EP_Close+0xa8>
 8001802:	4c46      	ldr	r4, [pc, #280]	; (800191c <HAL_PCD_EP_Close+0x1b8>)
 8001804:	4021      	ands	r1, r4
 8001806:	4c49      	ldr	r4, [pc, #292]	; (800192c <HAL_PCD_EP_Close+0x1c8>)
 8001808:	4321      	orrs	r1, r4
 800180a:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	6802      	ldr	r2, [r0, #0]
 8001812:	4694      	mov	ip, r2
 8001814:	4463      	add	r3, ip
 8001816:	881a      	ldrh	r2, [r3, #0]
 8001818:	4945      	ldr	r1, [pc, #276]	; (8001930 <HAL_PCD_EP_Close+0x1cc>)
 800181a:	4011      	ands	r1, r2
 800181c:	4a42      	ldr	r2, [pc, #264]	; (8001928 <HAL_PCD_EP_Close+0x1c4>)
 800181e:	430a      	orrs	r2, r1
 8001820:	801a      	strh	r2, [r3, #0]
 8001822:	e7d8      	b.n	80017d6 <HAL_PCD_EP_Close+0x72>
    if (ep->is_in==0U)
 8001824:	785a      	ldrb	r2, [r3, #1]
 8001826:	2a00      	cmp	r2, #0
 8001828:	d13a      	bne.n	80018a0 <HAL_PCD_EP_Close+0x13c>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	6801      	ldr	r1, [r0, #0]
 8001830:	468c      	mov	ip, r1
 8001832:	4462      	add	r2, ip
 8001834:	8811      	ldrh	r1, [r2, #0]
 8001836:	044c      	lsls	r4, r1, #17
 8001838:	d504      	bpl.n	8001844 <HAL_PCD_EP_Close+0xe0>
 800183a:	4c38      	ldr	r4, [pc, #224]	; (800191c <HAL_PCD_EP_Close+0x1b8>)
 800183c:	4021      	ands	r1, r4
 800183e:	4c3b      	ldr	r4, [pc, #236]	; (800192c <HAL_PCD_EP_Close+0x1c8>)
 8001840:	4321      	orrs	r1, r4
 8001842:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	6801      	ldr	r1, [r0, #0]
 800184a:	468c      	mov	ip, r1
 800184c:	4462      	add	r2, ip
 800184e:	8811      	ldrh	r1, [r2, #0]
 8001850:	064c      	lsls	r4, r1, #25
 8001852:	d504      	bpl.n	800185e <HAL_PCD_EP_Close+0xfa>
 8001854:	4c31      	ldr	r4, [pc, #196]	; (800191c <HAL_PCD_EP_Close+0x1b8>)
 8001856:	4021      	ands	r1, r4
 8001858:	4c31      	ldr	r4, [pc, #196]	; (8001920 <HAL_PCD_EP_Close+0x1bc>)
 800185a:	4321      	orrs	r1, r4
 800185c:	8011      	strh	r1, [r2, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	6801      	ldr	r1, [r0, #0]
 8001864:	468c      	mov	ip, r1
 8001866:	4462      	add	r2, ip
 8001868:	8811      	ldrh	r1, [r2, #0]
 800186a:	4c2c      	ldr	r4, [pc, #176]	; (800191c <HAL_PCD_EP_Close+0x1b8>)
 800186c:	400c      	ands	r4, r1
 800186e:	492c      	ldr	r1, [pc, #176]	; (8001920 <HAL_PCD_EP_Close+0x1bc>)
 8001870:	4321      	orrs	r1, r4
 8001872:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001874:	781c      	ldrb	r4, [r3, #0]
 8001876:	00a4      	lsls	r4, r4, #2
 8001878:	6802      	ldr	r2, [r0, #0]
 800187a:	4694      	mov	ip, r2
 800187c:	4464      	add	r4, ip
 800187e:	8822      	ldrh	r2, [r4, #0]
 8001880:	492b      	ldr	r1, [pc, #172]	; (8001930 <HAL_PCD_EP_Close+0x1cc>)
 8001882:	400a      	ands	r2, r1
 8001884:	4928      	ldr	r1, [pc, #160]	; (8001928 <HAL_PCD_EP_Close+0x1c4>)
 8001886:	430a      	orrs	r2, r1
 8001888:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	6802      	ldr	r2, [r0, #0]
 8001890:	4694      	mov	ip, r2
 8001892:	4463      	add	r3, ip
 8001894:	881a      	ldrh	r2, [r3, #0]
 8001896:	4c23      	ldr	r4, [pc, #140]	; (8001924 <HAL_PCD_EP_Close+0x1c0>)
 8001898:	4022      	ands	r2, r4
 800189a:	4311      	orrs	r1, r2
 800189c:	8019      	strh	r1, [r3, #0]
 800189e:	e79a      	b.n	80017d6 <HAL_PCD_EP_Close+0x72>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	6801      	ldr	r1, [r0, #0]
 80018a6:	468c      	mov	ip, r1
 80018a8:	4462      	add	r2, ip
 80018aa:	8811      	ldrh	r1, [r2, #0]
 80018ac:	044c      	lsls	r4, r1, #17
 80018ae:	d504      	bpl.n	80018ba <HAL_PCD_EP_Close+0x156>
 80018b0:	4c1a      	ldr	r4, [pc, #104]	; (800191c <HAL_PCD_EP_Close+0x1b8>)
 80018b2:	4021      	ands	r1, r4
 80018b4:	4c1d      	ldr	r4, [pc, #116]	; (800192c <HAL_PCD_EP_Close+0x1c8>)
 80018b6:	4321      	orrs	r1, r4
 80018b8:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	6801      	ldr	r1, [r0, #0]
 80018c0:	468c      	mov	ip, r1
 80018c2:	4462      	add	r2, ip
 80018c4:	8811      	ldrh	r1, [r2, #0]
 80018c6:	064c      	lsls	r4, r1, #25
 80018c8:	d504      	bpl.n	80018d4 <HAL_PCD_EP_Close+0x170>
 80018ca:	4c14      	ldr	r4, [pc, #80]	; (800191c <HAL_PCD_EP_Close+0x1b8>)
 80018cc:	4021      	ands	r1, r4
 80018ce:	4c14      	ldr	r4, [pc, #80]	; (8001920 <HAL_PCD_EP_Close+0x1bc>)
 80018d0:	4321      	orrs	r1, r4
 80018d2:	8011      	strh	r1, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	0092      	lsls	r2, r2, #2
 80018d8:	6801      	ldr	r1, [r0, #0]
 80018da:	468c      	mov	ip, r1
 80018dc:	4462      	add	r2, ip
 80018de:	8811      	ldrh	r1, [r2, #0]
 80018e0:	4c0e      	ldr	r4, [pc, #56]	; (800191c <HAL_PCD_EP_Close+0x1b8>)
 80018e2:	400c      	ands	r4, r1
 80018e4:	4911      	ldr	r1, [pc, #68]	; (800192c <HAL_PCD_EP_Close+0x1c8>)
 80018e6:	4321      	orrs	r1, r4
 80018e8:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80018ea:	781c      	ldrb	r4, [r3, #0]
 80018ec:	00a4      	lsls	r4, r4, #2
 80018ee:	6802      	ldr	r2, [r0, #0]
 80018f0:	4694      	mov	ip, r2
 80018f2:	4464      	add	r4, ip
 80018f4:	8822      	ldrh	r2, [r4, #0]
 80018f6:	490b      	ldr	r1, [pc, #44]	; (8001924 <HAL_PCD_EP_Close+0x1c0>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	490b      	ldr	r1, [pc, #44]	; (8001928 <HAL_PCD_EP_Close+0x1c4>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	6802      	ldr	r2, [r0, #0]
 8001906:	4694      	mov	ip, r2
 8001908:	4463      	add	r3, ip
 800190a:	881a      	ldrh	r2, [r3, #0]
 800190c:	4c08      	ldr	r4, [pc, #32]	; (8001930 <HAL_PCD_EP_Close+0x1cc>)
 800190e:	4022      	ands	r2, r4
 8001910:	4311      	orrs	r1, r2
 8001912:	8019      	strh	r1, [r3, #0]
 8001914:	e75f      	b.n	80017d6 <HAL_PCD_EP_Close+0x72>
  __HAL_LOCK(hpcd); 
 8001916:	2002      	movs	r0, #2
 8001918:	e762      	b.n	80017e0 <HAL_PCD_EP_Close+0x7c>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	00000f0f 	.word	0x00000f0f
 8001920:	ffff80c0 	.word	0xffff80c0
 8001924:	ffff8fbf 	.word	0xffff8fbf
 8001928:	ffff8080 	.word	0xffff8080
 800192c:	ffffc080 	.word	0xffffc080
 8001930:	ffffbf8f 	.word	0xffffbf8f

08001934 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	247f      	movs	r4, #127	; 0x7f
 8001938:	4021      	ands	r1, r4
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800193a:	00cd      	lsls	r5, r1, #3
 800193c:	1a6d      	subs	r5, r5, r1
 800193e:	00ac      	lsls	r4, r5, #2
 8001940:	1904      	adds	r4, r0, r4
 8001942:	0025      	movs	r5, r4
 8001944:	3519      	adds	r5, #25
 8001946:	35ff      	adds	r5, #255	; 0xff
 8001948:	602a      	str	r2, [r5, #0]
  ep->xfer_len = len;
 800194a:	0022      	movs	r2, r4
 800194c:	321d      	adds	r2, #29
 800194e:	32ff      	adds	r2, #255	; 0xff
 8001950:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 8001952:	3508      	adds	r5, #8
 8001954:	2200      	movs	r2, #0
 8001956:	602a      	str	r2, [r5, #0]
  ep->is_in = 0U;
 8001958:	3d17      	subs	r5, #23
 800195a:	702a      	strb	r2, [r5, #0]
  ep->num = ep_addr & 0x7FU;
 800195c:	0022      	movs	r2, r4
 800195e:	3209      	adds	r2, #9
 8001960:	32ff      	adds	r2, #255	; 0xff
 8001962:	7011      	strb	r1, [r2, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001964:	3415      	adds	r4, #21
 8001966:	34ff      	adds	r4, #255	; 0xff
 8001968:	6822      	ldr	r2, [r4, #0]
 800196a:	4293      	cmp	r3, r2
 800196c:	d940      	bls.n	80019f0 <HAL_PCD_EP_Receive+0xbc>
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800196e:	00cd      	lsls	r5, r1, #3
 8001970:	1a6d      	subs	r5, r5, r1
 8001972:	00ac      	lsls	r4, r5, #2
 8001974:	1904      	adds	r4, r0, r4
 8001976:	341d      	adds	r4, #29
 8001978:	34ff      	adds	r4, #255	; 0xff
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	6023      	str	r3, [r4, #0]
    len=ep->xfer_len;
    ep->xfer_len =0U;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800197e:	00cc      	lsls	r4, r1, #3
 8001980:	1a64      	subs	r4, r4, r1
 8001982:	00a3      	lsls	r3, r4, #2
 8001984:	001c      	movs	r4, r3
 8001986:	18c3      	adds	r3, r0, r3
 8001988:	3313      	adds	r3, #19
 800198a:	33ff      	adds	r3, #255	; 0xff
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d141      	bne.n	8001a16 <HAL_PCD_EP_Receive+0xe2>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8001992:	6805      	ldr	r5, [r0, #0]
 8001994:	3350      	adds	r3, #80	; 0x50
 8001996:	5aeb      	ldrh	r3, [r5, r3]
 8001998:	1904      	adds	r4, r0, r4
 800199a:	3409      	adds	r4, #9
 800199c:	34ff      	adds	r4, #255	; 0xff
 800199e:	7824      	ldrb	r4, [r4, #0]
 80019a0:	00e4      	lsls	r4, r4, #3
 80019a2:	191b      	adds	r3, r3, r4
 80019a4:	195b      	adds	r3, r3, r5
 80019a6:	4c5e      	ldr	r4, [pc, #376]	; (8001b20 <HAL_PCD_EP_Receive+0x1ec>)
 80019a8:	46a4      	mov	ip, r4
 80019aa:	4463      	add	r3, ip
 80019ac:	2a3e      	cmp	r2, #62	; 0x3e
 80019ae:	d929      	bls.n	8001a04 <HAL_PCD_EP_Receive+0xd0>
 80019b0:	0954      	lsrs	r4, r2, #5
 80019b2:	b2a4      	uxth	r4, r4
 80019b4:	06d2      	lsls	r2, r2, #27
 80019b6:	d101      	bne.n	80019bc <HAL_PCD_EP_Receive+0x88>
 80019b8:	3c01      	subs	r4, #1
 80019ba:	b2a4      	uxth	r4, r4
 80019bc:	02a4      	lsls	r4, r4, #10
 80019be:	b2a4      	uxth	r4, r4
 80019c0:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <HAL_PCD_EP_Receive+0x1f0>)
 80019c2:	4314      	orrs	r4, r2
 80019c4:	801c      	strh	r4, [r3, #0]
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80019c6:	6803      	ldr	r3, [r0, #0]
 80019c8:	00ca      	lsls	r2, r1, #3
 80019ca:	1a51      	subs	r1, r2, r1
 80019cc:	008a      	lsls	r2, r1, #2
 80019ce:	1880      	adds	r0, r0, r2
 80019d0:	3009      	adds	r0, #9
 80019d2:	30ff      	adds	r0, #255	; 0xff
 80019d4:	7802      	ldrb	r2, [r0, #0]
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	189b      	adds	r3, r3, r2
 80019da:	8819      	ldrh	r1, [r3, #0]
 80019dc:	4a52      	ldr	r2, [pc, #328]	; (8001b28 <HAL_PCD_EP_Receive+0x1f4>)
 80019de:	4011      	ands	r1, r2
 80019e0:	22c0      	movs	r2, #192	; 0xc0
 80019e2:	0192      	lsls	r2, r2, #6
 80019e4:	4051      	eors	r1, r2
 80019e6:	4a51      	ldr	r2, [pc, #324]	; (8001b2c <HAL_PCD_EP_Receive+0x1f8>)
 80019e8:	430a      	orrs	r2, r1
 80019ea:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
}
 80019ec:	2000      	movs	r0, #0
 80019ee:	bd70      	pop	{r4, r5, r6, pc}
    ep->xfer_len =0U;
 80019f0:	00cc      	lsls	r4, r1, #3
 80019f2:	1a64      	subs	r4, r4, r1
 80019f4:	00a2      	lsls	r2, r4, #2
 80019f6:	1882      	adds	r2, r0, r2
 80019f8:	321d      	adds	r2, #29
 80019fa:	32ff      	adds	r2, #255	; 0xff
 80019fc:	2400      	movs	r4, #0
 80019fe:	6014      	str	r4, [r2, #0]
    len=ep->xfer_len;
 8001a00:	001a      	movs	r2, r3
 8001a02:	e7bc      	b.n	800197e <HAL_PCD_EP_Receive+0x4a>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8001a04:	0854      	lsrs	r4, r2, #1
 8001a06:	b2a4      	uxth	r4, r4
 8001a08:	07d2      	lsls	r2, r2, #31
 8001a0a:	d501      	bpl.n	8001a10 <HAL_PCD_EP_Receive+0xdc>
 8001a0c:	3401      	adds	r4, #1
 8001a0e:	b2a4      	uxth	r4, r4
 8001a10:	02a4      	lsls	r4, r4, #10
 8001a12:	801c      	strh	r4, [r3, #0]
 8001a14:	e7d7      	b.n	80019c6 <HAL_PCD_EP_Receive+0x92>
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001a16:	00cc      	lsls	r4, r1, #3
 8001a18:	1a64      	subs	r4, r4, r1
 8001a1a:	00a3      	lsls	r3, r4, #2
 8001a1c:	001c      	movs	r4, r3
 8001a1e:	18c3      	adds	r3, r0, r3
 8001a20:	330a      	adds	r3, #10
 8001a22:	33ff      	adds	r3, #255	; 0xff
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d123      	bne.n	8001a72 <HAL_PCD_EP_Receive+0x13e>
 8001a2a:	6805      	ldr	r5, [r0, #0]
 8001a2c:	3350      	adds	r3, #80	; 0x50
 8001a2e:	5aeb      	ldrh	r3, [r5, r3]
 8001a30:	1904      	adds	r4, r0, r4
 8001a32:	3409      	adds	r4, #9
 8001a34:	34ff      	adds	r4, #255	; 0xff
 8001a36:	7824      	ldrb	r4, [r4, #0]
 8001a38:	00e4      	lsls	r4, r4, #3
 8001a3a:	191b      	adds	r3, r3, r4
 8001a3c:	195b      	adds	r3, r3, r5
 8001a3e:	4c3c      	ldr	r4, [pc, #240]	; (8001b30 <HAL_PCD_EP_Receive+0x1fc>)
 8001a40:	46a4      	mov	ip, r4
 8001a42:	4463      	add	r3, ip
 8001a44:	2a3e      	cmp	r2, #62	; 0x3e
 8001a46:	d90b      	bls.n	8001a60 <HAL_PCD_EP_Receive+0x12c>
 8001a48:	0954      	lsrs	r4, r2, #5
 8001a4a:	b2a4      	uxth	r4, r4
 8001a4c:	06d5      	lsls	r5, r2, #27
 8001a4e:	d101      	bne.n	8001a54 <HAL_PCD_EP_Receive+0x120>
 8001a50:	3c01      	subs	r4, #1
 8001a52:	b2a4      	uxth	r4, r4
 8001a54:	02a4      	lsls	r4, r4, #10
 8001a56:	b2a4      	uxth	r4, r4
 8001a58:	4d32      	ldr	r5, [pc, #200]	; (8001b24 <HAL_PCD_EP_Receive+0x1f0>)
 8001a5a:	432c      	orrs	r4, r5
 8001a5c:	801c      	strh	r4, [r3, #0]
 8001a5e:	e00a      	b.n	8001a76 <HAL_PCD_EP_Receive+0x142>
 8001a60:	0854      	lsrs	r4, r2, #1
 8001a62:	b2a4      	uxth	r4, r4
 8001a64:	07d5      	lsls	r5, r2, #31
 8001a66:	d501      	bpl.n	8001a6c <HAL_PCD_EP_Receive+0x138>
 8001a68:	3401      	adds	r4, #1
 8001a6a:	b2a4      	uxth	r4, r4
 8001a6c:	02a4      	lsls	r4, r4, #10
 8001a6e:	801c      	strh	r4, [r3, #0]
 8001a70:	e001      	b.n	8001a76 <HAL_PCD_EP_Receive+0x142>
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d024      	beq.n	8001ac0 <HAL_PCD_EP_Receive+0x18c>
 8001a76:	00cc      	lsls	r4, r1, #3
 8001a78:	1a64      	subs	r4, r4, r1
 8001a7a:	00a3      	lsls	r3, r4, #2
 8001a7c:	001c      	movs	r4, r3
 8001a7e:	18c3      	adds	r3, r0, r3
 8001a80:	330a      	adds	r3, #10
 8001a82:	33ff      	adds	r3, #255	; 0xff
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d135      	bne.n	8001af6 <HAL_PCD_EP_Receive+0x1c2>
 8001a8a:	6805      	ldr	r5, [r0, #0]
 8001a8c:	3350      	adds	r3, #80	; 0x50
 8001a8e:	5aeb      	ldrh	r3, [r5, r3]
 8001a90:	1904      	adds	r4, r0, r4
 8001a92:	3409      	adds	r4, #9
 8001a94:	34ff      	adds	r4, #255	; 0xff
 8001a96:	7824      	ldrb	r4, [r4, #0]
 8001a98:	00e4      	lsls	r4, r4, #3
 8001a9a:	191b      	adds	r3, r3, r4
 8001a9c:	195b      	adds	r3, r3, r5
 8001a9e:	4c20      	ldr	r4, [pc, #128]	; (8001b20 <HAL_PCD_EP_Receive+0x1ec>)
 8001aa0:	46a4      	mov	ip, r4
 8001aa2:	4463      	add	r3, ip
 8001aa4:	2a3e      	cmp	r2, #62	; 0x3e
 8001aa6:	d91d      	bls.n	8001ae4 <HAL_PCD_EP_Receive+0x1b0>
 8001aa8:	0954      	lsrs	r4, r2, #5
 8001aaa:	b2a4      	uxth	r4, r4
 8001aac:	06d2      	lsls	r2, r2, #27
 8001aae:	d101      	bne.n	8001ab4 <HAL_PCD_EP_Receive+0x180>
 8001ab0:	3c01      	subs	r4, #1
 8001ab2:	b2a4      	uxth	r4, r4
 8001ab4:	02a4      	lsls	r4, r4, #10
 8001ab6:	b2a4      	uxth	r4, r4
 8001ab8:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <HAL_PCD_EP_Receive+0x1f0>)
 8001aba:	4314      	orrs	r4, r2
 8001abc:	801c      	strh	r4, [r3, #0]
 8001abe:	e782      	b.n	80019c6 <HAL_PCD_EP_Receive+0x92>
 8001ac0:	6805      	ldr	r5, [r0, #0]
 8001ac2:	334f      	adds	r3, #79	; 0x4f
 8001ac4:	5aeb      	ldrh	r3, [r5, r3]
 8001ac6:	00ce      	lsls	r6, r1, #3
 8001ac8:	1a76      	subs	r6, r6, r1
 8001aca:	00b4      	lsls	r4, r6, #2
 8001acc:	1904      	adds	r4, r0, r4
 8001ace:	3409      	adds	r4, #9
 8001ad0:	34ff      	adds	r4, #255	; 0xff
 8001ad2:	7824      	ldrb	r4, [r4, #0]
 8001ad4:	00e4      	lsls	r4, r4, #3
 8001ad6:	191b      	adds	r3, r3, r4
 8001ad8:	195b      	adds	r3, r3, r5
 8001ada:	4c15      	ldr	r4, [pc, #84]	; (8001b30 <HAL_PCD_EP_Receive+0x1fc>)
 8001adc:	46a4      	mov	ip, r4
 8001ade:	4463      	add	r3, ip
 8001ae0:	801a      	strh	r2, [r3, #0]
 8001ae2:	e7c8      	b.n	8001a76 <HAL_PCD_EP_Receive+0x142>
 8001ae4:	0854      	lsrs	r4, r2, #1
 8001ae6:	b2a4      	uxth	r4, r4
 8001ae8:	07d2      	lsls	r2, r2, #31
 8001aea:	d501      	bpl.n	8001af0 <HAL_PCD_EP_Receive+0x1bc>
 8001aec:	3401      	adds	r4, #1
 8001aee:	b2a4      	uxth	r4, r4
 8001af0:	02a4      	lsls	r4, r4, #10
 8001af2:	801c      	strh	r4, [r3, #0]
 8001af4:	e767      	b.n	80019c6 <HAL_PCD_EP_Receive+0x92>
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d000      	beq.n	8001afc <HAL_PCD_EP_Receive+0x1c8>
 8001afa:	e764      	b.n	80019c6 <HAL_PCD_EP_Receive+0x92>
 8001afc:	6805      	ldr	r5, [r0, #0]
 8001afe:	334f      	adds	r3, #79	; 0x4f
 8001b00:	5aeb      	ldrh	r3, [r5, r3]
 8001b02:	00ce      	lsls	r6, r1, #3
 8001b04:	1a76      	subs	r6, r6, r1
 8001b06:	00b4      	lsls	r4, r6, #2
 8001b08:	1904      	adds	r4, r0, r4
 8001b0a:	3409      	adds	r4, #9
 8001b0c:	34ff      	adds	r4, #255	; 0xff
 8001b0e:	7824      	ldrb	r4, [r4, #0]
 8001b10:	00e4      	lsls	r4, r4, #3
 8001b12:	191b      	adds	r3, r3, r4
 8001b14:	195b      	adds	r3, r3, r5
 8001b16:	4c02      	ldr	r4, [pc, #8]	; (8001b20 <HAL_PCD_EP_Receive+0x1ec>)
 8001b18:	46a4      	mov	ip, r4
 8001b1a:	4463      	add	r3, ip
 8001b1c:	801a      	strh	r2, [r3, #0]
 8001b1e:	e752      	b.n	80019c6 <HAL_PCD_EP_Receive+0x92>
 8001b20:	00000406 	.word	0x00000406
 8001b24:	ffff8000 	.word	0xffff8000
 8001b28:	ffffbf8f 	.word	0xffffbf8f
 8001b2c:	ffff8080 	.word	0xffff8080
 8001b30:	00000402 	.word	0x00000402

08001b34 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 8001b34:	237f      	movs	r3, #127	; 0x7f
 8001b36:	4019      	ands	r1, r3
 8001b38:	00cb      	lsls	r3, r1, #3
 8001b3a:	1a59      	subs	r1, r3, r1
 8001b3c:	008b      	lsls	r3, r1, #2
 8001b3e:	18c0      	adds	r0, r0, r3
 8001b40:	3021      	adds	r0, #33	; 0x21
 8001b42:	30ff      	adds	r0, #255	; 0xff
 8001b44:	8800      	ldrh	r0, [r0, #0]
}
 8001b46:	4770      	bx	lr

08001b48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b48:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8001b4a:	23f4      	movs	r3, #244	; 0xf4
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	5cc3      	ldrb	r3, [r0, r3]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d04e      	beq.n	8001bf2 <HAL_PCD_EP_SetStall+0xaa>
 8001b54:	2201      	movs	r2, #1
 8001b56:	23f4      	movs	r3, #244	; 0xf4
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	54c2      	strb	r2, [r0, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 8001b5c:	b24c      	sxtb	r4, r1
 8001b5e:	2c00      	cmp	r4, #0
 8001b60:	db20      	blt.n	8001ba4 <HAL_PCD_EP_SetStall+0x5c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b62:	00ca      	lsls	r2, r1, #3
 8001b64:	1a52      	subs	r2, r2, r1
 8001b66:	0093      	lsls	r3, r2, #2
 8001b68:	3309      	adds	r3, #9
 8001b6a:	33ff      	adds	r3, #255	; 0xff
 8001b6c:	18c3      	adds	r3, r0, r3
  }
  
  ep->is_stall = 1;
 8001b6e:	2201      	movs	r2, #1
 8001b70:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001b72:	327e      	adds	r2, #126	; 0x7e
 8001b74:	4011      	ands	r1, r2
 8001b76:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001b78:	0fe4      	lsrs	r4, r4, #31
 8001b7a:	705c      	strb	r4, [r3, #1]
  
  if (ep->num == 0U)
 8001b7c:	2900      	cmp	r1, #0
 8001b7e:	d11a      	bne.n	8001bb6 <HAL_PCD_EP_SetStall+0x6e>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 8001b80:	0089      	lsls	r1, r1, #2
 8001b82:	6803      	ldr	r3, [r0, #0]
 8001b84:	469c      	mov	ip, r3
 8001b86:	4461      	add	r1, ip
 8001b88:	880a      	ldrh	r2, [r1, #0]
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_PCD_EP_SetStall+0xb0>)
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_PCD_EP_SetStall+0xb4>)
 8001b90:	405a      	eors	r2, r3
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_PCD_EP_SetStall+0xb8>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	800b      	strh	r3, [r1, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
    }
  }
  __HAL_UNLOCK(hpcd); 
 8001b98:	2200      	movs	r2, #0
 8001b9a:	23f4      	movs	r3, #244	; 0xf4
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	54c2      	strb	r2, [r0, r3]
  
  return HAL_OK;
 8001ba0:	2000      	movs	r0, #0
}
 8001ba2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001ba4:	3b6a      	subs	r3, #106	; 0x6a
 8001ba6:	3bff      	subs	r3, #255	; 0xff
 8001ba8:	400b      	ands	r3, r1
 8001baa:	00da      	lsls	r2, r3, #3
 8001bac:	1ad2      	subs	r2, r2, r3
 8001bae:	0093      	lsls	r3, r2, #2
 8001bb0:	3328      	adds	r3, #40	; 0x28
 8001bb2:	18c3      	adds	r3, r0, r3
 8001bb4:	e7db      	b.n	8001b6e <HAL_PCD_EP_SetStall+0x26>
    if (ep->is_in)
 8001bb6:	2c00      	cmp	r4, #0
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_PCD_EP_SetStall+0x8e>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 8001bba:	0089      	lsls	r1, r1, #2
 8001bbc:	6803      	ldr	r3, [r0, #0]
 8001bbe:	469c      	mov	ip, r3
 8001bc0:	4461      	add	r1, ip
 8001bc2:	880b      	ldrh	r3, [r1, #0]
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <HAL_PCD_EP_SetStall+0xbc>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2210      	movs	r2, #16
 8001bca:	4053      	eors	r3, r2
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <HAL_PCD_EP_SetStall+0xb8>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	800b      	strh	r3, [r1, #0]
 8001bd4:	e7e0      	b.n	8001b98 <HAL_PCD_EP_SetStall+0x50>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8001bd6:	0089      	lsls	r1, r1, #2
 8001bd8:	6803      	ldr	r3, [r0, #0]
 8001bda:	469c      	mov	ip, r3
 8001bdc:	4461      	add	r1, ip
 8001bde:	880a      	ldrh	r2, [r1, #0]
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_PCD_EP_SetStall+0xc0>)
 8001be2:	401a      	ands	r2, r3
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	015b      	lsls	r3, r3, #5
 8001be8:	405a      	eors	r2, r3
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_PCD_EP_SetStall+0xb8>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	800b      	strh	r3, [r1, #0]
 8001bf0:	e7d2      	b.n	8001b98 <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd); 
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	e7d5      	b.n	8001ba2 <HAL_PCD_EP_SetStall+0x5a>
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	ffffbfbf 	.word	0xffffbfbf
 8001bfc:	00001010 	.word	0x00001010
 8001c00:	ffff8080 	.word	0xffff8080
 8001c04:	ffff8fbf 	.word	0xffff8fbf
 8001c08:	ffffbf8f 	.word	0xffffbf8f

08001c0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c0c:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8001c0e:	b24a      	sxtb	r2, r1
 8001c10:	2a00      	cmp	r2, #0
 8001c12:	db39      	blt.n	8001c88 <HAL_PCD_EP_ClrStall+0x7c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c14:	00cc      	lsls	r4, r1, #3
 8001c16:	1a64      	subs	r4, r4, r1
 8001c18:	00a3      	lsls	r3, r4, #2
 8001c1a:	3309      	adds	r3, #9
 8001c1c:	33ff      	adds	r3, #255	; 0xff
 8001c1e:	18c3      	adds	r3, r0, r3
  }
  
  ep->is_stall = 0U;
 8001c20:	2400      	movs	r4, #0
 8001c22:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001c24:	347f      	adds	r4, #127	; 0x7f
 8001c26:	4021      	ands	r1, r4
 8001c28:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001c2a:	0fd2      	lsrs	r2, r2, #31
 8001c2c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001c2e:	22f4      	movs	r2, #244	; 0xf4
 8001c30:	0052      	lsls	r2, r2, #1
 8001c32:	5c82      	ldrb	r2, [r0, r2]
 8001c34:	2a01      	cmp	r2, #1
 8001c36:	d04b      	beq.n	8001cd0 <HAL_PCD_EP_ClrStall+0xc4>
 8001c38:	2101      	movs	r1, #1
 8001c3a:	22f4      	movs	r2, #244	; 0xf4
 8001c3c:	0052      	lsls	r2, r2, #1
 8001c3e:	5481      	strb	r1, [r0, r2]
  
  if (ep->is_in)
 8001c40:	785a      	ldrb	r2, [r3, #1]
 8001c42:	2a00      	cmp	r2, #0
 8001c44:	d028      	beq.n	8001c98 <HAL_PCD_EP_ClrStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	6801      	ldr	r1, [r0, #0]
 8001c4c:	468c      	mov	ip, r1
 8001c4e:	4462      	add	r2, ip
 8001c50:	8811      	ldrh	r1, [r2, #0]
 8001c52:	064c      	lsls	r4, r1, #25
 8001c54:	d504      	bpl.n	8001c60 <HAL_PCD_EP_ClrStall+0x54>
 8001c56:	4c1f      	ldr	r4, [pc, #124]	; (8001cd4 <HAL_PCD_EP_ClrStall+0xc8>)
 8001c58:	4021      	ands	r1, r4
 8001c5a:	4c1f      	ldr	r4, [pc, #124]	; (8001cd8 <HAL_PCD_EP_ClrStall+0xcc>)
 8001c5c:	4321      	orrs	r1, r4
 8001c5e:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8001c60:	781a      	ldrb	r2, [r3, #0]
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	6803      	ldr	r3, [r0, #0]
 8001c66:	469c      	mov	ip, r3
 8001c68:	4462      	add	r2, ip
 8001c6a:	8813      	ldrh	r3, [r2, #0]
 8001c6c:	491b      	ldr	r1, [pc, #108]	; (8001cdc <HAL_PCD_EP_ClrStall+0xd0>)
 8001c6e:	400b      	ands	r3, r1
 8001c70:	2130      	movs	r1, #48	; 0x30
 8001c72:	404b      	eors	r3, r1
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	491a      	ldr	r1, [pc, #104]	; (8001ce0 <HAL_PCD_EP_ClrStall+0xd4>)
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	8013      	strh	r3, [r2, #0]
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
  }
  __HAL_UNLOCK(hpcd); 
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	23f4      	movs	r3, #244	; 0xf4
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	54c2      	strb	r2, [r0, r3]
    
  return HAL_OK;
 8001c84:	2000      	movs	r0, #0
}
 8001c86:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001c88:	237f      	movs	r3, #127	; 0x7f
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	00dc      	lsls	r4, r3, #3
 8001c8e:	1ae4      	subs	r4, r4, r3
 8001c90:	00a3      	lsls	r3, r4, #2
 8001c92:	3328      	adds	r3, #40	; 0x28
 8001c94:	18c3      	adds	r3, r0, r3
 8001c96:	e7c3      	b.n	8001c20 <HAL_PCD_EP_ClrStall+0x14>
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	6801      	ldr	r1, [r0, #0]
 8001c9e:	468c      	mov	ip, r1
 8001ca0:	4462      	add	r2, ip
 8001ca2:	8811      	ldrh	r1, [r2, #0]
 8001ca4:	044c      	lsls	r4, r1, #17
 8001ca6:	d504      	bpl.n	8001cb2 <HAL_PCD_EP_ClrStall+0xa6>
 8001ca8:	4c0a      	ldr	r4, [pc, #40]	; (8001cd4 <HAL_PCD_EP_ClrStall+0xc8>)
 8001caa:	4021      	ands	r1, r4
 8001cac:	4c0d      	ldr	r4, [pc, #52]	; (8001ce4 <HAL_PCD_EP_ClrStall+0xd8>)
 8001cae:	4321      	orrs	r1, r4
 8001cb0:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	6802      	ldr	r2, [r0, #0]
 8001cb8:	4694      	mov	ip, r2
 8001cba:	4463      	add	r3, ip
 8001cbc:	8819      	ldrh	r1, [r3, #0]
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_PCD_EP_ClrStall+0xdc>)
 8001cc0:	4011      	ands	r1, r2
 8001cc2:	22c0      	movs	r2, #192	; 0xc0
 8001cc4:	0192      	lsls	r2, r2, #6
 8001cc6:	4051      	eors	r1, r2
 8001cc8:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <HAL_PCD_EP_ClrStall+0xd4>)
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	801a      	strh	r2, [r3, #0]
 8001cce:	e7d5      	b.n	8001c7c <HAL_PCD_EP_ClrStall+0x70>
  __HAL_LOCK(hpcd); 
 8001cd0:	2002      	movs	r0, #2
 8001cd2:	e7d8      	b.n	8001c86 <HAL_PCD_EP_ClrStall+0x7a>
 8001cd4:	00000f0f 	.word	0x00000f0f
 8001cd8:	ffff80c0 	.word	0xffff80c0
 8001cdc:	ffff8fbf 	.word	0xffff8fbf
 8001ce0:	ffff8080 	.word	0xffff8080
 8001ce4:	ffffc080 	.word	0xffffc080
 8001ce8:	ffffbf8f 	.word	0xffffbf8f

08001cec <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001cec:	b510      	push	{r4, lr}
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8001cee:	3301      	adds	r3, #1
 8001cf0:	085b      	lsrs	r3, r3, #1
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8001cf2:	1812      	adds	r2, r2, r0
 8001cf4:	2080      	movs	r0, #128	; 0x80
 8001cf6:	00c0      	lsls	r0, r0, #3
 8001cf8:	1814      	adds	r4, r2, r0
  
  for (i = n; i != 0; i--)
 8001cfa:	e007      	b.n	8001d0c <PCD_WritePMA+0x20>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8001cfc:	780a      	ldrb	r2, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8001cfe:	7848      	ldrb	r0, [r1, #1]
 8001d00:	0200      	lsls	r0, r0, #8
 8001d02:	4302      	orrs	r2, r0
    *pdwVal++ = temp2;
 8001d04:	8022      	strh	r2, [r4, #0]
    pbUsrBuf++;
 8001d06:	3102      	adds	r1, #2
  for (i = n; i != 0; i--)
 8001d08:	3b01      	subs	r3, #1
    *pdwVal++ = temp2;
 8001d0a:	3402      	adds	r4, #2
  for (i = n; i != 0; i--)
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f5      	bne.n	8001cfc <PCD_WritePMA+0x10>
  }
}
 8001d10:	bd10      	pop	{r4, pc}
	...

08001d14 <HAL_PCD_EP_Transmit>:
{
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	0005      	movs	r5, r0
 8001d18:	247f      	movs	r4, #127	; 0x7f
 8001d1a:	400c      	ands	r4, r1
  ep->xfer_buff = pBuf;  
 8001d1c:	00e0      	lsls	r0, r4, #3
 8001d1e:	1b00      	subs	r0, r0, r4
 8001d20:	0081      	lsls	r1, r0, #2
 8001d22:	1869      	adds	r1, r5, r1
 8001d24:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 8001d26:	63cb      	str	r3, [r1, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001d28:	2200      	movs	r2, #0
 8001d2a:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1U;
 8001d2c:	000a      	movs	r2, r1
 8001d2e:	3229      	adds	r2, #41	; 0x29
 8001d30:	2001      	movs	r0, #1
 8001d32:	7010      	strb	r0, [r2, #0]
  ep->num = ep_addr & 0x7FU;
 8001d34:	3a01      	subs	r2, #1
 8001d36:	7014      	strb	r4, [r2, #0]
  if (ep->xfer_len > ep->maxpacket)
 8001d38:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8001d3a:	42bb      	cmp	r3, r7
 8001d3c:	d933      	bls.n	8001da6 <HAL_PCD_EP_Transmit+0x92>
    ep->xfer_len-=len; 
 8001d3e:	1bdb      	subs	r3, r3, r7
 8001d40:	63cb      	str	r3, [r1, #60]	; 0x3c
  if (ep->doublebuffer == 0U) 
 8001d42:	00e2      	lsls	r2, r4, #3
 8001d44:	1b12      	subs	r2, r2, r4
 8001d46:	0093      	lsls	r3, r2, #2
 8001d48:	001a      	movs	r2, r3
 8001d4a:	18eb      	adds	r3, r5, r3
 8001d4c:	3332      	adds	r3, #50	; 0x32
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d030      	beq.n	8001db6 <HAL_PCD_EP_Transmit+0xa2>
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001d54:	6828      	ldr	r0, [r5, #0]
 8001d56:	00e2      	lsls	r2, r4, #3
 8001d58:	1b12      	subs	r2, r2, r4
 8001d5a:	0093      	lsls	r3, r2, #2
 8001d5c:	18eb      	adds	r3, r5, r3
 8001d5e:	3328      	adds	r3, #40	; 0x28
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	009a      	lsls	r2, r3, #2
 8001d64:	5a82      	ldrh	r2, [r0, r2]
 8001d66:	0652      	lsls	r2, r2, #25
 8001d68:	d574      	bpl.n	8001e54 <HAL_PCD_EP_Transmit+0x140>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001d6a:	00e6      	lsls	r6, r4, #3
 8001d6c:	1b36      	subs	r6, r6, r4
 8001d6e:	00b2      	lsls	r2, r6, #2
 8001d70:	18aa      	adds	r2, r5, r2
 8001d72:	3229      	adds	r2, #41	; 0x29
 8001d74:	7812      	ldrb	r2, [r2, #0]
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d13b      	bne.n	8001df2 <HAL_PCD_EP_Transmit+0xde>
 8001d7a:	3250      	adds	r2, #80	; 0x50
 8001d7c:	5a82      	ldrh	r2, [r0, r2]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	18d3      	adds	r3, r2, r3
 8001d82:	1818      	adds	r0, r3, r0
 8001d84:	4b62      	ldr	r3, [pc, #392]	; (8001f10 <HAL_PCD_EP_Transmit+0x1fc>)
 8001d86:	469c      	mov	ip, r3
 8001d88:	4460      	add	r0, ip
 8001d8a:	2f3e      	cmp	r7, #62	; 0x3e
 8001d8c:	d928      	bls.n	8001de0 <HAL_PCD_EP_Transmit+0xcc>
 8001d8e:	097b      	lsrs	r3, r7, #5
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	06fa      	lsls	r2, r7, #27
 8001d94:	d101      	bne.n	8001d9a <HAL_PCD_EP_Transmit+0x86>
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	029b      	lsls	r3, r3, #10
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <HAL_PCD_EP_Transmit+0x200>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	8003      	strh	r3, [r0, #0]
 8001da4:	e027      	b.n	8001df6 <HAL_PCD_EP_Transmit+0xe2>
    ep->xfer_len =0U;
 8001da6:	00e1      	lsls	r1, r4, #3
 8001da8:	1b09      	subs	r1, r1, r4
 8001daa:	008a      	lsls	r2, r1, #2
 8001dac:	18aa      	adds	r2, r5, r2
 8001dae:	2100      	movs	r1, #0
 8001db0:	63d1      	str	r1, [r2, #60]	; 0x3c
    len=ep->xfer_len;
 8001db2:	001f      	movs	r7, r3
 8001db4:	e7c5      	b.n	8001d42 <HAL_PCD_EP_Transmit+0x2e>
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8001db6:	b2bf      	uxth	r7, r7
 8001db8:	18ae      	adds	r6, r5, r2
 8001dba:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
 8001dbc:	003b      	movs	r3, r7
 8001dbe:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8001dc0:	6828      	ldr	r0, [r5, #0]
 8001dc2:	f7ff ff93 	bl	8001cec <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8001dc6:	682a      	ldr	r2, [r5, #0]
 8001dc8:	2350      	movs	r3, #80	; 0x50
 8001dca:	5ad3      	ldrh	r3, [r2, r3]
 8001dcc:	3628      	adds	r6, #40	; 0x28
 8001dce:	7831      	ldrb	r1, [r6, #0]
 8001dd0:	00c9      	lsls	r1, r1, #3
 8001dd2:	185b      	adds	r3, r3, r1
 8001dd4:	189b      	adds	r3, r3, r2
 8001dd6:	4a50      	ldr	r2, [pc, #320]	; (8001f18 <HAL_PCD_EP_Transmit+0x204>)
 8001dd8:	4694      	mov	ip, r2
 8001dda:	4463      	add	r3, ip
 8001ddc:	801f      	strh	r7, [r3, #0]
 8001dde:	e082      	b.n	8001ee6 <HAL_PCD_EP_Transmit+0x1d2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001de0:	087b      	lsrs	r3, r7, #1
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	07fa      	lsls	r2, r7, #31
 8001de6:	d501      	bpl.n	8001dec <HAL_PCD_EP_Transmit+0xd8>
 8001de8:	3301      	adds	r3, #1
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	029b      	lsls	r3, r3, #10
 8001dee:	8003      	strh	r3, [r0, #0]
 8001df0:	e001      	b.n	8001df6 <HAL_PCD_EP_Transmit+0xe2>
 8001df2:	2a01      	cmp	r2, #1
 8001df4:	d024      	beq.n	8001e40 <HAL_PCD_EP_Transmit+0x12c>
      pmabuffer = ep->pmaaddr1;
 8001df6:	00e2      	lsls	r2, r4, #3
 8001df8:	1b12      	subs	r2, r2, r4
 8001dfa:	0093      	lsls	r3, r2, #2
 8001dfc:	18eb      	adds	r3, r5, r3
 8001dfe:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8001e00:	b2bb      	uxth	r3, r7
 8001e02:	00e1      	lsls	r1, r4, #3
 8001e04:	1b09      	subs	r1, r1, r4
 8001e06:	008e      	lsls	r6, r1, #2
 8001e08:	19ae      	adds	r6, r5, r6
 8001e0a:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8001e0c:	6828      	ldr	r0, [r5, #0]
 8001e0e:	f7ff ff6d 	bl	8001cec <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8001e12:	3629      	adds	r6, #41	; 0x29
 8001e14:	7833      	ldrb	r3, [r6, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d055      	beq.n	8001ec6 <HAL_PCD_EP_Transmit+0x1b2>
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d163      	bne.n	8001ee6 <HAL_PCD_EP_Transmit+0x1d2>
 8001e1e:	00e2      	lsls	r2, r4, #3
 8001e20:	1b12      	subs	r2, r2, r4
 8001e22:	0093      	lsls	r3, r2, #2
 8001e24:	18eb      	adds	r3, r5, r3
 8001e26:	3328      	adds	r3, #40	; 0x28
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	682a      	ldr	r2, [r5, #0]
 8001e2e:	4694      	mov	ip, r2
 8001e30:	4463      	add	r3, ip
 8001e32:	881a      	ldrh	r2, [r3, #0]
 8001e34:	4939      	ldr	r1, [pc, #228]	; (8001f1c <HAL_PCD_EP_Transmit+0x208>)
 8001e36:	4011      	ands	r1, r2
 8001e38:	4a39      	ldr	r2, [pc, #228]	; (8001f20 <HAL_PCD_EP_Transmit+0x20c>)
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	801a      	strh	r2, [r3, #0]
 8001e3e:	e052      	b.n	8001ee6 <HAL_PCD_EP_Transmit+0x1d2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001e40:	324f      	adds	r2, #79	; 0x4f
 8001e42:	5a82      	ldrh	r2, [r0, r2]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	18d3      	adds	r3, r2, r3
 8001e48:	1818      	adds	r0, r3, r0
 8001e4a:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_PCD_EP_Transmit+0x1fc>)
 8001e4c:	469c      	mov	ip, r3
 8001e4e:	4460      	add	r0, ip
 8001e50:	8007      	strh	r7, [r0, #0]
 8001e52:	e7d0      	b.n	8001df6 <HAL_PCD_EP_Transmit+0xe2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001e54:	00e6      	lsls	r6, r4, #3
 8001e56:	1b36      	subs	r6, r6, r4
 8001e58:	00b2      	lsls	r2, r6, #2
 8001e5a:	18aa      	adds	r2, r5, r2
 8001e5c:	3229      	adds	r2, #41	; 0x29
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	2a00      	cmp	r2, #0
 8001e62:	d11e      	bne.n	8001ea2 <HAL_PCD_EP_Transmit+0x18e>
 8001e64:	3250      	adds	r2, #80	; 0x50
 8001e66:	5a82      	ldrh	r2, [r0, r2]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	18d3      	adds	r3, r2, r3
 8001e6c:	1818      	adds	r0, r3, r0
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_PCD_EP_Transmit+0x204>)
 8001e70:	469c      	mov	ip, r3
 8001e72:	4460      	add	r0, ip
 8001e74:	2f3e      	cmp	r7, #62	; 0x3e
 8001e76:	d90b      	bls.n	8001e90 <HAL_PCD_EP_Transmit+0x17c>
 8001e78:	097b      	lsrs	r3, r7, #5
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	06fa      	lsls	r2, r7, #27
 8001e7e:	d101      	bne.n	8001e84 <HAL_PCD_EP_Transmit+0x170>
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	029b      	lsls	r3, r3, #10
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <HAL_PCD_EP_Transmit+0x200>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	8003      	strh	r3, [r0, #0]
 8001e8e:	e00a      	b.n	8001ea6 <HAL_PCD_EP_Transmit+0x192>
 8001e90:	087b      	lsrs	r3, r7, #1
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	07fa      	lsls	r2, r7, #31
 8001e96:	d501      	bpl.n	8001e9c <HAL_PCD_EP_Transmit+0x188>
 8001e98:	3301      	adds	r3, #1
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	029b      	lsls	r3, r3, #10
 8001e9e:	8003      	strh	r3, [r0, #0]
 8001ea0:	e001      	b.n	8001ea6 <HAL_PCD_EP_Transmit+0x192>
 8001ea2:	2a01      	cmp	r2, #1
 8001ea4:	d005      	beq.n	8001eb2 <HAL_PCD_EP_Transmit+0x19e>
      pmabuffer = ep->pmaaddr0;
 8001ea6:	00e2      	lsls	r2, r4, #3
 8001ea8:	1b12      	subs	r2, r2, r4
 8001eaa:	0093      	lsls	r3, r2, #2
 8001eac:	18eb      	adds	r3, r5, r3
 8001eae:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8001eb0:	e7a6      	b.n	8001e00 <HAL_PCD_EP_Transmit+0xec>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001eb2:	324f      	adds	r2, #79	; 0x4f
 8001eb4:	5a82      	ldrh	r2, [r0, r2]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	18d3      	adds	r3, r2, r3
 8001eba:	1818      	adds	r0, r3, r0
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_PCD_EP_Transmit+0x204>)
 8001ebe:	469c      	mov	ip, r3
 8001ec0:	4460      	add	r0, ip
 8001ec2:	8007      	strh	r7, [r0, #0]
 8001ec4:	e7ef      	b.n	8001ea6 <HAL_PCD_EP_Transmit+0x192>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8001ec6:	00e2      	lsls	r2, r4, #3
 8001ec8:	1b12      	subs	r2, r2, r4
 8001eca:	0093      	lsls	r3, r2, #2
 8001ecc:	18eb      	adds	r3, r5, r3
 8001ece:	3328      	adds	r3, #40	; 0x28
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	682a      	ldr	r2, [r5, #0]
 8001ed6:	4694      	mov	ip, r2
 8001ed8:	4463      	add	r3, ip
 8001eda:	881a      	ldrh	r2, [r3, #0]
 8001edc:	490f      	ldr	r1, [pc, #60]	; (8001f1c <HAL_PCD_EP_Transmit+0x208>)
 8001ede:	4011      	ands	r1, r2
 8001ee0:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_PCD_EP_Transmit+0x210>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	801a      	strh	r2, [r3, #0]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8001ee6:	682a      	ldr	r2, [r5, #0]
 8001ee8:	00e1      	lsls	r1, r4, #3
 8001eea:	1b0c      	subs	r4, r1, r4
 8001eec:	00a3      	lsls	r3, r4, #2
 8001eee:	18ed      	adds	r5, r5, r3
 8001ef0:	3528      	adds	r5, #40	; 0x28
 8001ef2:	782b      	ldrb	r3, [r5, #0]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	18d2      	adds	r2, r2, r3
 8001ef8:	8813      	ldrh	r3, [r2, #0]
 8001efa:	490b      	ldr	r1, [pc, #44]	; (8001f28 <HAL_PCD_EP_Transmit+0x214>)
 8001efc:	400b      	ands	r3, r1
 8001efe:	2130      	movs	r1, #48	; 0x30
 8001f00:	404b      	eors	r3, r1
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4909      	ldr	r1, [pc, #36]	; (8001f2c <HAL_PCD_EP_Transmit+0x218>)
 8001f06:	430b      	orrs	r3, r1
 8001f08:	8013      	strh	r3, [r2, #0]
}
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	00000406 	.word	0x00000406
 8001f14:	ffff8000 	.word	0xffff8000
 8001f18:	00000402 	.word	0x00000402
 8001f1c:	00000f0f 	.word	0x00000f0f
 8001f20:	ffffc080 	.word	0xffffc080
 8001f24:	ffff80c0 	.word	0xffff80c0
 8001f28:	ffff8fbf 	.word	0xffff8fbf
 8001f2c:	ffff8080 	.word	0xffff8080

08001f30 <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001f30:	b510      	push	{r4, lr}
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8001f32:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8001f34:	1810      	adds	r0, r2, r0
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	00d2      	lsls	r2, r2, #3
 8001f3a:	4694      	mov	ip, r2
 8001f3c:	4460      	add	r0, ip
  
  for (i = n; i != 0U; i--)
 8001f3e:	e006      	b.n	8001f4e <PCD_ReadPMA+0x1e>
  {
    temp = *pdwVal++;
 8001f40:	8802      	ldrh	r2, [r0, #0]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8001f42:	700a      	strb	r2, [r1, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 8001f44:	0a12      	lsrs	r2, r2, #8
 8001f46:	704a      	strb	r2, [r1, #1]
  for (i = n; i != 0U; i--)
 8001f48:	3c01      	subs	r4, #1
    temp = *pdwVal++;
 8001f4a:	3002      	adds	r0, #2
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 8001f4c:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8001f4e:	2c00      	cmp	r4, #0
 8001f50:	d1f6      	bne.n	8001f40 <PCD_ReadPMA+0x10>
  }
  
  if (wNBytes % 2)
 8001f52:	07db      	lsls	r3, r3, #31
 8001f54:	d501      	bpl.n	8001f5a <PCD_ReadPMA+0x2a>
  {
    temp = *pdwVal++;
 8001f56:	8803      	ldrh	r3, [r0, #0]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8001f58:	700b      	strb	r3, [r1, #0]
  }
}
 8001f5a:	bd10      	pop	{r4, pc}

08001f5c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	0005      	movs	r5, r0
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 8001f62:	2200      	movs	r2, #0
 8001f64:	ab01      	add	r3, sp, #4
 8001f66:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8001f68:	e1b5      	b.n	80022d6 <PCD_EP_ISR_Handler+0x37a>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f6a:	8803      	ldrh	r3, [r0, #0]
 8001f6c:	4aa9      	ldr	r2, [pc, #676]	; (8002214 <PCD_EP_ISR_Handler+0x2b8>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f72:	6829      	ldr	r1, [r5, #0]
 8001f74:	2350      	movs	r3, #80	; 0x50
 8001f76:	5acb      	ldrh	r3, [r1, r3]
 8001f78:	2228      	movs	r2, #40	; 0x28
 8001f7a:	5caa      	ldrb	r2, [r5, r2]
 8001f7c:	00d2      	lsls	r2, r2, #3
 8001f7e:	189b      	adds	r3, r3, r2
 8001f80:	185b      	adds	r3, r3, r1
 8001f82:	4aa5      	ldr	r2, [pc, #660]	; (8002218 <PCD_EP_ISR_Handler+0x2bc>)
 8001f84:	4694      	mov	ip, r2
 8001f86:	4463      	add	r3, ip
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	059b      	lsls	r3, r3, #22
 8001f8c:	0d9b      	lsrs	r3, r3, #22
 8001f8e:	642b      	str	r3, [r5, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8001f90:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001f92:	4694      	mov	ip, r2
 8001f94:	4463      	add	r3, ip
 8001f96:	63ab      	str	r3, [r5, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	0028      	movs	r0, r5
 8001f9c:	f002 ff75 	bl	8004e8a <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001fa0:	2324      	movs	r3, #36	; 0x24
 8001fa2:	5ceb      	ldrb	r3, [r5, r3]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <PCD_EP_ISR_Handler+0x4e>
 8001fa8:	e195      	b.n	80022d6 <PCD_EP_ISR_Handler+0x37a>
 8001faa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d000      	beq.n	8001fb2 <PCD_EP_ISR_Handler+0x56>
 8001fb0:	e191      	b.n	80022d6 <PCD_EP_ISR_Handler+0x37a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001fb2:	2224      	movs	r2, #36	; 0x24
 8001fb4:	5cab      	ldrb	r3, [r5, r2]
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	4249      	negs	r1, r1
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	31cc      	adds	r1, #204	; 0xcc
 8001fc0:	6828      	ldr	r0, [r5, #0]
 8001fc2:	5243      	strh	r3, [r0, r1]
          hpcd->USB_Address = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	54ab      	strb	r3, [r5, r2]
 8001fc8:	e185      	b.n	80022d6 <PCD_EP_ISR_Handler+0x37a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fca:	2350      	movs	r3, #80	; 0x50
 8001fcc:	5ac3      	ldrh	r3, [r0, r3]
 8001fce:	2284      	movs	r2, #132	; 0x84
 8001fd0:	0052      	lsls	r2, r2, #1
 8001fd2:	5caa      	ldrb	r2, [r5, r2]
 8001fd4:	00d2      	lsls	r2, r2, #3
 8001fd6:	189b      	adds	r3, r3, r2
 8001fd8:	181b      	adds	r3, r3, r0
 8001fda:	4a90      	ldr	r2, [pc, #576]	; (800221c <PCD_EP_ISR_Handler+0x2c0>)
 8001fdc:	4694      	mov	ip, r2
 8001fde:	4463      	add	r3, ip
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	059b      	lsls	r3, r3, #22
 8001fe4:	0d9b      	lsrs	r3, r3, #22
 8001fe6:	002a      	movs	r2, r5
 8001fe8:	3209      	adds	r2, #9
 8001fea:	32ff      	adds	r2, #255	; 0xff
 8001fec:	6193      	str	r3, [r2, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 8001fee:	0029      	movs	r1, r5
 8001ff0:	31ed      	adds	r1, #237	; 0xed
 8001ff2:	31ff      	adds	r1, #255	; 0xff
 8001ff4:	8892      	ldrh	r2, [r2, #4]
 8001ff6:	f7ff ff9b 	bl	8001f30 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001ffa:	682a      	ldr	r2, [r5, #0]
 8001ffc:	8813      	ldrh	r3, [r2, #0]
 8001ffe:	4988      	ldr	r1, [pc, #544]	; (8002220 <PCD_EP_ISR_Handler+0x2c4>)
 8002000:	400b      	ands	r3, r1
 8002002:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002004:	0028      	movs	r0, r5
 8002006:	f002 ff27 	bl	8004e58 <HAL_PCD_SetupStageCallback>
 800200a:	e164      	b.n	80022d6 <PCD_EP_ISR_Handler+0x37a>
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          
          if (ep->xfer_count != 0U)
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800200c:	0014      	movs	r4, r2
 800200e:	8892      	ldrh	r2, [r2, #4]
 8002010:	6921      	ldr	r1, [r4, #16]
 8002012:	f7ff ff8d 	bl	8001f30 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8002016:	6923      	ldr	r3, [r4, #16]
 8002018:	69a2      	ldr	r2, [r4, #24]
 800201a:	4694      	mov	ip, r2
 800201c:	4463      	add	r3, ip
 800201e:	6123      	str	r3, [r4, #16]
 8002020:	e195      	b.n	800234e <PCD_EP_ISR_Handler+0x3f2>
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8002022:	084b      	lsrs	r3, r1, #1
 8002024:	b29b      	uxth	r3, r3
 8002026:	07c9      	lsls	r1, r1, #31
 8002028:	d501      	bpl.n	800202e <PCD_EP_ISR_Handler+0xd2>
 800202a:	3301      	adds	r3, #1
 800202c:	b29b      	uxth	r3, r3
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	8013      	strh	r3, [r2, #0]
 8002032:	e1a9      	b.n	8002388 <PCD_EP_ISR_Handler+0x42c>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8002034:	00a6      	lsls	r6, r4, #2
 8002036:	1980      	adds	r0, r0, r6
 8002038:	8802      	ldrh	r2, [r0, #0]
 800203a:	ab01      	add	r3, sp, #4
 800203c:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b21b      	sxth	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	db31      	blt.n	80020aa <PCD_EP_ISR_Handler+0x14e>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002046:	ab01      	add	r3, sp, #4
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	061b      	lsls	r3, r3, #24
 800204c:	d400      	bmi.n	8002050 <PCD_EP_ISR_Handler+0xf4>
 800204e:	e142      	b.n	80022d6 <PCD_EP_ISR_Handler+0x37a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002050:	682b      	ldr	r3, [r5, #0]
 8002052:	469c      	mov	ip, r3
 8002054:	4466      	add	r6, ip
 8002056:	8833      	ldrh	r3, [r6, #0]
 8002058:	4a6e      	ldr	r2, [pc, #440]	; (8002214 <PCD_EP_ISR_Handler+0x2b8>)
 800205a:	4013      	ands	r3, r2
 800205c:	8033      	strh	r3, [r6, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800205e:	00e2      	lsls	r2, r4, #3
 8002060:	1b12      	subs	r2, r2, r4
 8002062:	0093      	lsls	r3, r2, #2
 8002064:	001a      	movs	r2, r3
 8002066:	18eb      	adds	r3, r5, r3
 8002068:	3332      	adds	r3, #50	; 0x32
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d000      	beq.n	8002072 <PCD_EP_ISR_Handler+0x116>
 8002070:	e0dc      	b.n	800222c <PCD_EP_ISR_Handler+0x2d0>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002072:	6828      	ldr	r0, [r5, #0]
 8002074:	3350      	adds	r3, #80	; 0x50
 8002076:	5ac3      	ldrh	r3, [r0, r3]
 8002078:	18aa      	adds	r2, r5, r2
 800207a:	0011      	movs	r1, r2
 800207c:	3128      	adds	r1, #40	; 0x28
 800207e:	7809      	ldrb	r1, [r1, #0]
 8002080:	00c9      	lsls	r1, r1, #3
 8002082:	185b      	adds	r3, r3, r1
 8002084:	181b      	adds	r3, r3, r0
 8002086:	4964      	ldr	r1, [pc, #400]	; (8002218 <PCD_EP_ISR_Handler+0x2bc>)
 8002088:	468c      	mov	ip, r1
 800208a:	4463      	add	r3, ip
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	059b      	lsls	r3, r3, #22
 8002090:	0d9b      	lsrs	r3, r3, #22
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 8002094:	d100      	bne.n	8002098 <PCD_EP_ISR_Handler+0x13c>
 8002096:	e0f9      	b.n	800228c <PCD_EP_ISR_Handler+0x330>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002098:	00e2      	lsls	r2, r4, #3
 800209a:	1b12      	subs	r2, r2, r4
 800209c:	0091      	lsls	r1, r2, #2
 800209e:	1869      	adds	r1, r5, r1
 80020a0:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 80020a2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80020a4:	f7ff fe22 	bl	8001cec <PCD_WritePMA>
 80020a8:	e0f0      	b.n	800228c <PCD_EP_ISR_Handler+0x330>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 80020aa:	4b5d      	ldr	r3, [pc, #372]	; (8002220 <PCD_EP_ISR_Handler+0x2c4>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	8002      	strh	r2, [r0, #0]
        if (ep->doublebuffer == 0U)
 80020b0:	00e2      	lsls	r2, r4, #3
 80020b2:	1b12      	subs	r2, r2, r4
 80020b4:	0093      	lsls	r3, r2, #2
 80020b6:	001a      	movs	r2, r3
 80020b8:	18eb      	adds	r3, r5, r3
 80020ba:	3313      	adds	r3, #19
 80020bc:	33ff      	adds	r3, #255	; 0xff
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11d      	bne.n	8002100 <PCD_EP_ISR_Handler+0x1a4>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020c4:	6828      	ldr	r0, [r5, #0]
 80020c6:	3350      	adds	r3, #80	; 0x50
 80020c8:	5ac3      	ldrh	r3, [r0, r3]
 80020ca:	0011      	movs	r1, r2
 80020cc:	18aa      	adds	r2, r5, r2
 80020ce:	3209      	adds	r2, #9
 80020d0:	32ff      	adds	r2, #255	; 0xff
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	00d2      	lsls	r2, r2, #3
 80020d6:	189b      	adds	r3, r3, r2
 80020d8:	181b      	adds	r3, r3, r0
 80020da:	4a50      	ldr	r2, [pc, #320]	; (800221c <PCD_EP_ISR_Handler+0x2c0>)
 80020dc:	4694      	mov	ip, r2
 80020de:	4463      	add	r3, ip
 80020e0:	881f      	ldrh	r7, [r3, #0]
 80020e2:	05bf      	lsls	r7, r7, #22
 80020e4:	0dbf      	lsrs	r7, r7, #22
          if (count != 0U)
 80020e6:	d034      	beq.n	8002152 <PCD_EP_ISR_Handler+0x1f6>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80020e8:	186b      	adds	r3, r5, r1
 80020ea:	001a      	movs	r2, r3
 80020ec:	320d      	adds	r2, #13
 80020ee:	32ff      	adds	r2, #255	; 0xff
 80020f0:	8812      	ldrh	r2, [r2, #0]
 80020f2:	3319      	adds	r3, #25
 80020f4:	33ff      	adds	r3, #255	; 0xff
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	003b      	movs	r3, r7
 80020fa:	f7ff ff19 	bl	8001f30 <PCD_ReadPMA>
 80020fe:	e028      	b.n	8002152 <PCD_EP_ISR_Handler+0x1f6>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8002100:	6828      	ldr	r0, [r5, #0]
 8002102:	00e2      	lsls	r2, r4, #3
 8002104:	1b12      	subs	r2, r2, r4
 8002106:	0093      	lsls	r3, r2, #2
 8002108:	18eb      	adds	r3, r5, r3
 800210a:	3309      	adds	r3, #9
 800210c:	33ff      	adds	r3, #255	; 0xff
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	009a      	lsls	r2, r3, #2
 8002112:	5a82      	ldrh	r2, [r0, r2]
 8002114:	0452      	lsls	r2, r2, #17
 8002116:	d556      	bpl.n	80021c6 <PCD_EP_ISR_Handler+0x26a>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002118:	2250      	movs	r2, #80	; 0x50
 800211a:	5a82      	ldrh	r2, [r0, r2]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	18d3      	adds	r3, r2, r3
 8002120:	181b      	adds	r3, r3, r0
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <PCD_EP_ISR_Handler+0x2bc>)
 8002124:	4694      	mov	ip, r2
 8002126:	4463      	add	r3, ip
 8002128:	881f      	ldrh	r7, [r3, #0]
 800212a:	05bf      	lsls	r7, r7, #22
 800212c:	0dbf      	lsrs	r7, r7, #22
            if (count != 0U)
 800212e:	d13b      	bne.n	80021a8 <PCD_EP_ISR_Handler+0x24c>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8002130:	00e2      	lsls	r2, r4, #3
 8002132:	1b12      	subs	r2, r2, r4
 8002134:	0093      	lsls	r3, r2, #2
 8002136:	18eb      	adds	r3, r5, r3
 8002138:	3309      	adds	r3, #9
 800213a:	33ff      	adds	r3, #255	; 0xff
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	682a      	ldr	r2, [r5, #0]
 8002142:	4694      	mov	ip, r2
 8002144:	4463      	add	r3, ip
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	4936      	ldr	r1, [pc, #216]	; (8002224 <PCD_EP_ISR_Handler+0x2c8>)
 800214a:	4011      	ands	r1, r2
 800214c:	4a36      	ldr	r2, [pc, #216]	; (8002228 <PCD_EP_ISR_Handler+0x2cc>)
 800214e:	430a      	orrs	r2, r1
 8002150:	801a      	strh	r2, [r3, #0]
        ep->xfer_count+=count;
 8002152:	0039      	movs	r1, r7
 8002154:	00e2      	lsls	r2, r4, #3
 8002156:	1b12      	subs	r2, r2, r4
 8002158:	0093      	lsls	r3, r2, #2
 800215a:	18eb      	adds	r3, r5, r3
 800215c:	0018      	movs	r0, r3
 800215e:	3021      	adds	r0, #33	; 0x21
 8002160:	30ff      	adds	r0, #255	; 0xff
 8002162:	6802      	ldr	r2, [r0, #0]
 8002164:	19d2      	adds	r2, r2, r7
 8002166:	6002      	str	r2, [r0, #0]
        ep->xfer_buff+=count;
 8002168:	001a      	movs	r2, r3
 800216a:	3219      	adds	r2, #25
 800216c:	32ff      	adds	r2, #255	; 0xff
 800216e:	6810      	ldr	r0, [r2, #0]
 8002170:	4684      	mov	ip, r0
 8002172:	4467      	add	r7, ip
 8002174:	6017      	str	r7, [r2, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002176:	331d      	adds	r3, #29
 8002178:	33ff      	adds	r3, #255	; 0xff
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <PCD_EP_ISR_Handler+0x236>
 8002180:	00e2      	lsls	r2, r4, #3
 8002182:	1b12      	subs	r2, r2, r4
 8002184:	0090      	lsls	r0, r2, #2
 8002186:	1828      	adds	r0, r5, r0
 8002188:	3015      	adds	r0, #21
 800218a:	30ff      	adds	r0, #255	; 0xff
 800218c:	6802      	ldr	r2, [r0, #0]
 800218e:	4291      	cmp	r1, r2
 8002190:	d234      	bcs.n	80021fc <PCD_EP_ISR_Handler+0x2a0>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002192:	00e2      	lsls	r2, r4, #3
 8002194:	1b12      	subs	r2, r2, r4
 8002196:	0093      	lsls	r3, r2, #2
 8002198:	18eb      	adds	r3, r5, r3
 800219a:	3309      	adds	r3, #9
 800219c:	33ff      	adds	r3, #255	; 0xff
 800219e:	7819      	ldrb	r1, [r3, #0]
 80021a0:	0028      	movs	r0, r5
 80021a2:	f002 fe63 	bl	8004e6c <HAL_PCD_DataOutStageCallback>
 80021a6:	e74e      	b.n	8002046 <PCD_EP_ISR_Handler+0xea>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021a8:	00e2      	lsls	r2, r4, #3
 80021aa:	1b12      	subs	r2, r2, r4
 80021ac:	0093      	lsls	r3, r2, #2
 80021ae:	18eb      	adds	r3, r5, r3
 80021b0:	001a      	movs	r2, r3
 80021b2:	320f      	adds	r2, #15
 80021b4:	32ff      	adds	r2, #255	; 0xff
 80021b6:	8812      	ldrh	r2, [r2, #0]
 80021b8:	3319      	adds	r3, #25
 80021ba:	33ff      	adds	r3, #255	; 0xff
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	003b      	movs	r3, r7
 80021c0:	f7ff feb6 	bl	8001f30 <PCD_ReadPMA>
 80021c4:	e7b4      	b.n	8002130 <PCD_EP_ISR_Handler+0x1d4>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021c6:	2250      	movs	r2, #80	; 0x50
 80021c8:	5a82      	ldrh	r2, [r0, r2]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	18d3      	adds	r3, r2, r3
 80021ce:	181b      	adds	r3, r3, r0
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <PCD_EP_ISR_Handler+0x2c0>)
 80021d2:	4694      	mov	ip, r2
 80021d4:	4463      	add	r3, ip
 80021d6:	881f      	ldrh	r7, [r3, #0]
 80021d8:	05bf      	lsls	r7, r7, #22
 80021da:	0dbf      	lsrs	r7, r7, #22
            if (count != 0U)
 80021dc:	d0a8      	beq.n	8002130 <PCD_EP_ISR_Handler+0x1d4>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021de:	00e2      	lsls	r2, r4, #3
 80021e0:	1b12      	subs	r2, r2, r4
 80021e2:	0093      	lsls	r3, r2, #2
 80021e4:	18eb      	adds	r3, r5, r3
 80021e6:	001a      	movs	r2, r3
 80021e8:	3211      	adds	r2, #17
 80021ea:	32ff      	adds	r2, #255	; 0xff
 80021ec:	8812      	ldrh	r2, [r2, #0]
 80021ee:	3319      	adds	r3, #25
 80021f0:	33ff      	adds	r3, #255	; 0xff
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	003b      	movs	r3, r7
 80021f6:	f7ff fe9b 	bl	8001f30 <PCD_ReadPMA>
 80021fa:	e799      	b.n	8002130 <PCD_EP_ISR_Handler+0x1d4>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80021fc:	00e1      	lsls	r1, r4, #3
 80021fe:	1b09      	subs	r1, r1, r4
 8002200:	008a      	lsls	r2, r1, #2
 8002202:	18aa      	adds	r2, r5, r2
 8002204:	3209      	adds	r2, #9
 8002206:	32ff      	adds	r2, #255	; 0xff
 8002208:	7811      	ldrb	r1, [r2, #0]
 800220a:	003a      	movs	r2, r7
 800220c:	0028      	movs	r0, r5
 800220e:	f7ff fb91 	bl	8001934 <HAL_PCD_EP_Receive>
 8002212:	e718      	b.n	8002046 <PCD_EP_ISR_Handler+0xea>
 8002214:	ffff8f0f 	.word	0xffff8f0f
 8002218:	00000402 	.word	0x00000402
 800221c:	00000406 	.word	0x00000406
 8002220:	00000f8f 	.word	0x00000f8f
 8002224:	00000f0f 	.word	0x00000f0f
 8002228:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 800222c:	6828      	ldr	r0, [r5, #0]
 800222e:	00e2      	lsls	r2, r4, #3
 8002230:	1b12      	subs	r2, r2, r4
 8002232:	0093      	lsls	r3, r2, #2
 8002234:	18eb      	adds	r3, r5, r3
 8002236:	3328      	adds	r3, #40	; 0x28
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	009a      	lsls	r2, r3, #2
 800223c:	5a82      	ldrh	r2, [r0, r2]
 800223e:	0652      	lsls	r2, r2, #25
 8002240:	d400      	bmi.n	8002244 <PCD_EP_ISR_Handler+0x2e8>
 8002242:	e0b2      	b.n	80023aa <PCD_EP_ISR_Handler+0x44e>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002244:	2250      	movs	r2, #80	; 0x50
 8002246:	5a82      	ldrh	r2, [r0, r2]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	18d3      	adds	r3, r2, r3
 800224c:	181b      	adds	r3, r3, r0
 800224e:	4a6a      	ldr	r2, [pc, #424]	; (80023f8 <PCD_EP_ISR_Handler+0x49c>)
 8002250:	4694      	mov	ip, r2
 8002252:	4463      	add	r3, ip
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	059b      	lsls	r3, r3, #22
 8002258:	0d9b      	lsrs	r3, r3, #22
 800225a:	00e1      	lsls	r1, r4, #3
 800225c:	1b09      	subs	r1, r1, r4
 800225e:	008a      	lsls	r2, r1, #2
 8002260:	0011      	movs	r1, r2
 8002262:	18aa      	adds	r2, r5, r2
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8002266:	2b00      	cmp	r3, #0
 8002268:	d000      	beq.n	800226c <PCD_EP_ISR_Handler+0x310>
 800226a:	e098      	b.n	800239e <PCD_EP_ISR_Handler+0x442>
            if (ep->xfer_count != 0U)
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 800226c:	00e2      	lsls	r2, r4, #3
 800226e:	1b12      	subs	r2, r2, r4
 8002270:	0093      	lsls	r3, r2, #2
 8002272:	18eb      	adds	r3, r5, r3
 8002274:	3328      	adds	r3, #40	; 0x28
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	682a      	ldr	r2, [r5, #0]
 800227c:	4694      	mov	ip, r2
 800227e:	4463      	add	r3, ip
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	495e      	ldr	r1, [pc, #376]	; (80023fc <PCD_EP_ISR_Handler+0x4a0>)
 8002284:	4011      	ands	r1, r2
 8002286:	4a5e      	ldr	r2, [pc, #376]	; (8002400 <PCD_EP_ISR_Handler+0x4a4>)
 8002288:	430a      	orrs	r2, r1
 800228a:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800228c:	6828      	ldr	r0, [r5, #0]
 800228e:	2350      	movs	r3, #80	; 0x50
 8002290:	5ac2      	ldrh	r2, [r0, r3]
 8002292:	00e1      	lsls	r1, r4, #3
 8002294:	1b09      	subs	r1, r1, r4
 8002296:	008b      	lsls	r3, r1, #2
 8002298:	18eb      	adds	r3, r5, r3
 800229a:	0019      	movs	r1, r3
 800229c:	3128      	adds	r1, #40	; 0x28
 800229e:	7809      	ldrb	r1, [r1, #0]
 80022a0:	00c9      	lsls	r1, r1, #3
 80022a2:	1852      	adds	r2, r2, r1
 80022a4:	1812      	adds	r2, r2, r0
 80022a6:	4954      	ldr	r1, [pc, #336]	; (80023f8 <PCD_EP_ISR_Handler+0x49c>)
 80022a8:	468c      	mov	ip, r1
 80022aa:	4462      	add	r2, ip
 80022ac:	8812      	ldrh	r2, [r2, #0]
 80022ae:	0592      	lsls	r2, r2, #22
 80022b0:	0d92      	lsrs	r2, r2, #22
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 80022b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022b6:	468c      	mov	ip, r1
 80022b8:	4462      	add	r2, ip
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d000      	beq.n	80022c4 <PCD_EP_ISR_Handler+0x368>
 80022c2:	e08c      	b.n	80023de <PCD_EP_ISR_Handler+0x482>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022c4:	00e3      	lsls	r3, r4, #3
 80022c6:	1b1c      	subs	r4, r3, r4
 80022c8:	00a3      	lsls	r3, r4, #2
 80022ca:	18eb      	adds	r3, r5, r3
 80022cc:	3328      	adds	r3, #40	; 0x28
 80022ce:	7819      	ldrb	r1, [r3, #0]
 80022d0:	0028      	movs	r0, r5
 80022d2:	f002 fdda 	bl	8004e8a <HAL_PCD_DataInStageCallback>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 80022d6:	6828      	ldr	r0, [r5, #0]
 80022d8:	2344      	movs	r3, #68	; 0x44
 80022da:	5ac3      	ldrh	r3, [r0, r3]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	466a      	mov	r2, sp
 80022e0:	80d3      	strh	r3, [r2, #6]
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db00      	blt.n	80022ea <PCD_EP_ISR_Handler+0x38e>
 80022e8:	e083      	b.n	80023f2 <PCD_EP_ISR_Handler+0x496>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022ea:	466b      	mov	r3, sp
 80022ec:	88dc      	ldrh	r4, [r3, #6]
 80022ee:	230f      	movs	r3, #15
 80022f0:	401c      	ands	r4, r3
    if (EPindex == 0U)
 80022f2:	d000      	beq.n	80022f6 <PCD_EP_ISR_Handler+0x39a>
 80022f4:	e69e      	b.n	8002034 <PCD_EP_ISR_Handler+0xd8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022f6:	466b      	mov	r3, sp
 80022f8:	3306      	adds	r3, #6
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	06db      	lsls	r3, r3, #27
 80022fe:	d400      	bmi.n	8002302 <PCD_EP_ISR_Handler+0x3a6>
 8002300:	e633      	b.n	8001f6a <PCD_EP_ISR_Handler+0xe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002302:	8802      	ldrh	r2, [r0, #0]
 8002304:	ab01      	add	r3, sp, #4
 8002306:	801a      	strh	r2, [r3, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	051b      	lsls	r3, r3, #20
 800230c:	d500      	bpl.n	8002310 <PCD_EP_ISR_Handler+0x3b4>
 800230e:	e65c      	b.n	8001fca <PCD_EP_ISR_Handler+0x6e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002310:	ab01      	add	r3, sp, #4
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	b21b      	sxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	dadd      	bge.n	80022d6 <PCD_EP_ISR_Handler+0x37a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800231a:	8803      	ldrh	r3, [r0, #0]
 800231c:	4a39      	ldr	r2, [pc, #228]	; (8002404 <PCD_EP_ISR_Handler+0x4a8>)
 800231e:	4013      	ands	r3, r2
 8002320:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002322:	6828      	ldr	r0, [r5, #0]
 8002324:	2350      	movs	r3, #80	; 0x50
 8002326:	5ac3      	ldrh	r3, [r0, r3]
 8002328:	2284      	movs	r2, #132	; 0x84
 800232a:	0052      	lsls	r2, r2, #1
 800232c:	5caa      	ldrb	r2, [r5, r2]
 800232e:	00d2      	lsls	r2, r2, #3
 8002330:	189b      	adds	r3, r3, r2
 8002332:	181b      	adds	r3, r3, r0
 8002334:	4a34      	ldr	r2, [pc, #208]	; (8002408 <PCD_EP_ISR_Handler+0x4ac>)
 8002336:	4694      	mov	ip, r2
 8002338:	4463      	add	r3, ip
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	059b      	lsls	r3, r3, #22
 800233e:	0d9b      	lsrs	r3, r3, #22
 8002340:	002a      	movs	r2, r5
 8002342:	3209      	adds	r2, #9
 8002344:	32ff      	adds	r2, #255	; 0xff
 8002346:	6193      	str	r3, [r2, #24]
          if (ep->xfer_count != 0U)
 8002348:	2b00      	cmp	r3, #0
 800234a:	d000      	beq.n	800234e <PCD_EP_ISR_Handler+0x3f2>
 800234c:	e65e      	b.n	800200c <PCD_EP_ISR_Handler+0xb0>
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800234e:	2100      	movs	r1, #0
 8002350:	0028      	movs	r0, r5
 8002352:	f002 fd8b 	bl	8004e6c <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8002356:	682b      	ldr	r3, [r5, #0]
 8002358:	2250      	movs	r2, #80	; 0x50
 800235a:	5a9a      	ldrh	r2, [r3, r2]
 800235c:	189a      	adds	r2, r3, r2
 800235e:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <PCD_EP_ISR_Handler+0x4ac>)
 8002360:	469c      	mov	ip, r3
 8002362:	4462      	add	r2, ip
 8002364:	002b      	movs	r3, r5
 8002366:	3309      	adds	r3, #9
 8002368:	33ff      	adds	r3, #255	; 0xff
 800236a:	68d9      	ldr	r1, [r3, #12]
 800236c:	293e      	cmp	r1, #62	; 0x3e
 800236e:	d800      	bhi.n	8002372 <PCD_EP_ISR_Handler+0x416>
 8002370:	e657      	b.n	8002022 <PCD_EP_ISR_Handler+0xc6>
 8002372:	094b      	lsrs	r3, r1, #5
 8002374:	b29b      	uxth	r3, r3
 8002376:	06c9      	lsls	r1, r1, #27
 8002378:	d101      	bne.n	800237e <PCD_EP_ISR_Handler+0x422>
 800237a:	3b01      	subs	r3, #1
 800237c:	b29b      	uxth	r3, r3
 800237e:	029b      	lsls	r3, r3, #10
 8002380:	b29b      	uxth	r3, r3
 8002382:	4922      	ldr	r1, [pc, #136]	; (800240c <PCD_EP_ISR_Handler+0x4b0>)
 8002384:	430b      	orrs	r3, r1
 8002386:	8013      	strh	r3, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8002388:	6829      	ldr	r1, [r5, #0]
 800238a:	880a      	ldrh	r2, [r1, #0]
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <PCD_EP_ISR_Handler+0x4b4>)
 800238e:	401a      	ands	r2, r3
 8002390:	23c0      	movs	r3, #192	; 0xc0
 8002392:	019b      	lsls	r3, r3, #6
 8002394:	405a      	eors	r2, r3
 8002396:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <PCD_EP_ISR_Handler+0x4b8>)
 8002398:	4313      	orrs	r3, r2
 800239a:	800b      	strh	r3, [r1, #0]
 800239c:	e79b      	b.n	80022d6 <PCD_EP_ISR_Handler+0x37a>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800239e:	1869      	adds	r1, r5, r1
 80023a0:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80023a2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80023a4:	f7ff fca2 	bl	8001cec <PCD_WritePMA>
 80023a8:	e760      	b.n	800226c <PCD_EP_ISR_Handler+0x310>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023aa:	2250      	movs	r2, #80	; 0x50
 80023ac:	5a82      	ldrh	r2, [r0, r2]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	18d3      	adds	r3, r2, r3
 80023b2:	181b      	adds	r3, r3, r0
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <PCD_EP_ISR_Handler+0x4ac>)
 80023b6:	4694      	mov	ip, r2
 80023b8:	4463      	add	r3, ip
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	059b      	lsls	r3, r3, #22
 80023be:	0d9b      	lsrs	r3, r3, #22
 80023c0:	00e1      	lsls	r1, r4, #3
 80023c2:	1b09      	subs	r1, r1, r4
 80023c4:	008a      	lsls	r2, r1, #2
 80023c6:	0011      	movs	r1, r2
 80023c8:	18aa      	adds	r2, r5, r2
 80023ca:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d100      	bne.n	80023d2 <PCD_EP_ISR_Handler+0x476>
 80023d0:	e74c      	b.n	800226c <PCD_EP_ISR_Handler+0x310>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80023d2:	1869      	adds	r1, r5, r1
 80023d4:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 80023d6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80023d8:	f7ff fc88 	bl	8001cec <PCD_WritePMA>
 80023dc:	e746      	b.n	800226c <PCD_EP_ISR_Handler+0x310>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80023de:	00e1      	lsls	r1, r4, #3
 80023e0:	1b0c      	subs	r4, r1, r4
 80023e2:	00a1      	lsls	r1, r4, #2
 80023e4:	1869      	adds	r1, r5, r1
 80023e6:	3128      	adds	r1, #40	; 0x28
 80023e8:	7809      	ldrb	r1, [r1, #0]
 80023ea:	0028      	movs	r0, r5
 80023ec:	f7ff fc92 	bl	8001d14 <HAL_PCD_EP_Transmit>
 80023f0:	e771      	b.n	80022d6 <PCD_EP_ISR_Handler+0x37a>
        }
      } 
    }
  }
  return HAL_OK;
}
 80023f2:	2000      	movs	r0, #0
 80023f4:	b003      	add	sp, #12
 80023f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023f8:	00000402 	.word	0x00000402
 80023fc:	00000f0f 	.word	0x00000f0f
 8002400:	ffffc080 	.word	0xffffc080
 8002404:	00000f8f 	.word	0x00000f8f
 8002408:	00000406 	.word	0x00000406
 800240c:	ffff8000 	.word	0xffff8000
 8002410:	ffffbf8f 	.word	0xffffbf8f
 8002414:	ffff8080 	.word	0xffff8080

08002418 <HAL_PCD_IRQHandler>:
{
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800241c:	2344      	movs	r3, #68	; 0x44
 800241e:	6802      	ldr	r2, [r0, #0]
 8002420:	5ad3      	ldrh	r3, [r2, r3]
 8002422:	b21b      	sxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	db48      	blt.n	80024ba <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	2244      	movs	r2, #68	; 0x44
 800242c:	5a9a      	ldrh	r2, [r3, r2]
 800242e:	0552      	lsls	r2, r2, #21
 8002430:	d446      	bmi.n	80024c0 <HAL_PCD_IRQHandler+0xa8>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	2244      	movs	r2, #68	; 0x44
 8002436:	5a9a      	ldrh	r2, [r3, r2]
 8002438:	0452      	lsls	r2, r2, #17
 800243a:	d504      	bpl.n	8002446 <HAL_PCD_IRQHandler+0x2e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800243c:	2144      	movs	r1, #68	; 0x44
 800243e:	5a5a      	ldrh	r2, [r3, r1]
 8002440:	4835      	ldr	r0, [pc, #212]	; (8002518 <HAL_PCD_IRQHandler+0x100>)
 8002442:	4002      	ands	r2, r0
 8002444:	525a      	strh	r2, [r3, r1]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	2244      	movs	r2, #68	; 0x44
 800244a:	5a9a      	ldrh	r2, [r3, r2]
 800244c:	0492      	lsls	r2, r2, #18
 800244e:	d504      	bpl.n	800245a <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8002450:	2144      	movs	r1, #68	; 0x44
 8002452:	5a5a      	ldrh	r2, [r3, r1]
 8002454:	4831      	ldr	r0, [pc, #196]	; (800251c <HAL_PCD_IRQHandler+0x104>)
 8002456:	4002      	ands	r2, r0
 8002458:	525a      	strh	r2, [r3, r1]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	2244      	movs	r2, #68	; 0x44
 800245e:	5a9a      	ldrh	r2, [r3, r2]
 8002460:	04d2      	lsls	r2, r2, #19
 8002462:	d43a      	bmi.n	80024da <HAL_PCD_IRQHandler+0xc2>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	2244      	movs	r2, #68	; 0x44
 8002468:	5a9a      	ldrh	r2, [r3, r2]
 800246a:	0512      	lsls	r2, r2, #20
 800246c:	d515      	bpl.n	800249a <HAL_PCD_IRQHandler+0x82>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800246e:	2144      	movs	r1, #68	; 0x44
 8002470:	5a5a      	ldrh	r2, [r3, r1]
 8002472:	482b      	ldr	r0, [pc, #172]	; (8002520 <HAL_PCD_IRQHandler+0x108>)
 8002474:	4002      	ands	r2, r0
 8002476:	525a      	strh	r2, [r3, r1]
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002478:	6820      	ldr	r0, [r4, #0]
 800247a:	2240      	movs	r2, #64	; 0x40
 800247c:	5a83      	ldrh	r3, [r0, r2]
 800247e:	2508      	movs	r5, #8
 8002480:	432b      	orrs	r3, r5
 8002482:	b29b      	uxth	r3, r3
 8002484:	5283      	strh	r3, [r0, r2]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002486:	6820      	ldr	r0, [r4, #0]
 8002488:	5a83      	ldrh	r3, [r0, r2]
 800248a:	2504      	movs	r5, #4
 800248c:	432b      	orrs	r3, r5
 800248e:	b29b      	uxth	r3, r3
 8002490:	5283      	strh	r3, [r0, r2]
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	5a5b      	ldrh	r3, [r3, r1]
 8002496:	04db      	lsls	r3, r3, #19
 8002498:	d531      	bpl.n	80024fe <HAL_PCD_IRQHandler+0xe6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	2244      	movs	r2, #68	; 0x44
 800249e:	5a9a      	ldrh	r2, [r3, r2]
 80024a0:	0592      	lsls	r2, r2, #22
 80024a2:	d430      	bmi.n	8002506 <HAL_PCD_IRQHandler+0xee>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	2244      	movs	r2, #68	; 0x44
 80024a8:	5a9a      	ldrh	r2, [r3, r2]
 80024aa:	05d2      	lsls	r2, r2, #23
 80024ac:	d504      	bpl.n	80024b8 <HAL_PCD_IRQHandler+0xa0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80024ae:	2144      	movs	r1, #68	; 0x44
 80024b0:	5a5a      	ldrh	r2, [r3, r1]
 80024b2:	481c      	ldr	r0, [pc, #112]	; (8002524 <HAL_PCD_IRQHandler+0x10c>)
 80024b4:	4002      	ands	r2, r0
 80024b6:	525a      	strh	r2, [r3, r1]
}
 80024b8:	bd70      	pop	{r4, r5, r6, pc}
    PCD_EP_ISR_Handler(hpcd);
 80024ba:	f7ff fd4f 	bl	8001f5c <PCD_EP_ISR_Handler>
 80024be:	e7b3      	b.n	8002428 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024c0:	2144      	movs	r1, #68	; 0x44
 80024c2:	5a5a      	ldrh	r2, [r3, r1]
 80024c4:	4818      	ldr	r0, [pc, #96]	; (8002528 <HAL_PCD_IRQHandler+0x110>)
 80024c6:	4002      	ands	r2, r0
 80024c8:	525a      	strh	r2, [r3, r1]
    HAL_PCD_ResetCallback(hpcd);
 80024ca:	0020      	movs	r0, r4
 80024cc:	f002 fcf1 	bl	8004eb2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80024d0:	2100      	movs	r1, #0
 80024d2:	0020      	movs	r0, r4
 80024d4:	f7fe ff80 	bl	80013d8 <HAL_PCD_SetAddress>
 80024d8:	e7ab      	b.n	8002432 <HAL_PCD_IRQHandler+0x1a>
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 80024da:	2240      	movs	r2, #64	; 0x40
 80024dc:	5a99      	ldrh	r1, [r3, r2]
 80024de:	2004      	movs	r0, #4
 80024e0:	4381      	bics	r1, r0
 80024e2:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR = wInterrupt_Mask;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_PCD_IRQHandler+0x114>)
 80024e6:	6821      	ldr	r1, [r4, #0]
 80024e8:	528b      	strh	r3, [r1, r2]
    HAL_PCD_ResumeCallback(hpcd);
 80024ea:	0020      	movs	r0, r4
 80024ec:	f002 fd00 	bl	8004ef0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80024f0:	6821      	ldr	r1, [r4, #0]
 80024f2:	2244      	movs	r2, #68	; 0x44
 80024f4:	5a8b      	ldrh	r3, [r1, r2]
 80024f6:	480e      	ldr	r0, [pc, #56]	; (8002530 <HAL_PCD_IRQHandler+0x118>)
 80024f8:	4003      	ands	r3, r0
 80024fa:	528b      	strh	r3, [r1, r2]
 80024fc:	e7b2      	b.n	8002464 <HAL_PCD_IRQHandler+0x4c>
      HAL_PCD_SuspendCallback(hpcd);
 80024fe:	0020      	movs	r0, r4
 8002500:	f002 fce4 	bl	8004ecc <HAL_PCD_SuspendCallback>
 8002504:	e7c9      	b.n	800249a <HAL_PCD_IRQHandler+0x82>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8002506:	2144      	movs	r1, #68	; 0x44
 8002508:	5a5a      	ldrh	r2, [r3, r1]
 800250a:	480a      	ldr	r0, [pc, #40]	; (8002534 <HAL_PCD_IRQHandler+0x11c>)
 800250c:	4002      	ands	r2, r0
 800250e:	525a      	strh	r2, [r3, r1]
    HAL_PCD_SOFCallback(hpcd);
 8002510:	0020      	movs	r0, r4
 8002512:	f002 fcc7 	bl	8004ea4 <HAL_PCD_SOFCallback>
 8002516:	e7c5      	b.n	80024a4 <HAL_PCD_IRQHandler+0x8c>
 8002518:	ffffbfff 	.word	0xffffbfff
 800251c:	ffffdfff 	.word	0xffffdfff
 8002520:	fffff7ff 	.word	0xfffff7ff
 8002524:	fffffeff 	.word	0xfffffeff
 8002528:	fffffbff 	.word	0xfffffbff
 800252c:	ffffbd00 	.word	0xffffbd00
 8002530:	ffffefff 	.word	0xffffefff
 8002534:	fffffdff 	.word	0xfffffdff

08002538 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8002538:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800253a:	060c      	lsls	r4, r1, #24
 800253c:	d50f      	bpl.n	800255e <HAL_PCDEx_PMAConfig+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800253e:	247f      	movs	r4, #127	; 0x7f
 8002540:	4021      	ands	r1, r4
 8002542:	00cc      	lsls	r4, r1, #3
 8002544:	1a61      	subs	r1, r4, r1
 8002546:	008c      	lsls	r4, r1, #2
 8002548:	3428      	adds	r4, #40	; 0x28
 800254a:	1900      	adds	r0, r0, r4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800254c:	2a00      	cmp	r2, #0
 800254e:	d00d      	beq.n	800256c <HAL_PCDEx_PMAConfig+0x34>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8002550:	2201      	movs	r2, #1
 8002552:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8002554:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8002556:	0c1b      	lsrs	r3, r3, #16
 8002558:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK;
}
 800255a:	2000      	movs	r0, #0
 800255c:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800255e:	00cc      	lsls	r4, r1, #3
 8002560:	1a61      	subs	r1, r4, r1
 8002562:	008c      	lsls	r4, r1, #2
 8002564:	3409      	adds	r4, #9
 8002566:	34ff      	adds	r4, #255	; 0xff
 8002568:	1900      	adds	r0, r0, r4
 800256a:	e7ef      	b.n	800254c <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 0U;
 800256c:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 800256e:	8083      	strh	r3, [r0, #4]
 8002570:	e7f3      	b.n	800255a <HAL_PCDEx_PMAConfig+0x22>
	...

08002574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	0004      	movs	r4, r0
//    }
//  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002578:	6803      	ldr	r3, [r0, #0]
 800257a:	069b      	lsls	r3, r3, #26
 800257c:	d545      	bpl.n	800260a <HAL_RCC_OscConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800257e:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	230c      	movs	r3, #12
 8002584:	4013      	ands	r3, r2
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d023      	beq.n	80025d2 <HAL_RCC_OscConfig+0x5e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800258a:	4b4d      	ldr	r3, [pc, #308]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	230c      	movs	r3, #12
 8002590:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002592:	2b08      	cmp	r3, #8
 8002594:	d016      	beq.n	80025c4 <HAL_RCC_OscConfig+0x50>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002596:	6a23      	ldr	r3, [r4, #32]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d023      	beq.n	80025e4 <HAL_RCC_OscConfig+0x70>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800259c:	4a48      	ldr	r2, [pc, #288]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 800259e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	025b      	lsls	r3, r3, #9
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fd fe80 	bl	80002ac <HAL_GetTick>
 80025ac:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80025ae:	4b44      	ldr	r3, [pc, #272]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 80025b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b2:	03db      	lsls	r3, r3, #15
 80025b4:	d429      	bmi.n	800260a <HAL_RCC_OscConfig+0x96>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025b6:	f7fd fe79 	bl	80002ac <HAL_GetTick>
 80025ba:	1b40      	subs	r0, r0, r5
 80025bc:	2802      	cmp	r0, #2
 80025be:	d9f6      	bls.n	80025ae <HAL_RCC_OscConfig+0x3a>
          {
            return HAL_TIMEOUT;
 80025c0:	2003      	movs	r0, #3
 80025c2:	e07a      	b.n	80026ba <HAL_RCC_OscConfig+0x146>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025c4:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	22c0      	movs	r2, #192	; 0xc0
 80025ca:	0252      	lsls	r2, r2, #9
 80025cc:	4013      	ands	r3, r2
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d1e1      	bne.n	8002596 <HAL_RCC_OscConfig+0x22>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	03db      	lsls	r3, r3, #15
 80025d8:	d517      	bpl.n	800260a <HAL_RCC_OscConfig+0x96>
 80025da:	6a23      	ldr	r3, [r4, #32]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d014      	beq.n	800260a <HAL_RCC_OscConfig+0x96>
        return HAL_ERROR;
 80025e0:	2001      	movs	r0, #1
 80025e2:	e06a      	b.n	80026ba <HAL_RCC_OscConfig+0x146>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80025e4:	4a36      	ldr	r2, [pc, #216]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 80025e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80025e8:	4936      	ldr	r1, [pc, #216]	; (80026c4 <HAL_RCC_OscConfig+0x150>)
 80025ea:	400b      	ands	r3, r1
 80025ec:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fd fe5d 	bl	80002ac <HAL_GetTick>
 80025f2:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 80025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f8:	03db      	lsls	r3, r3, #15
 80025fa:	d506      	bpl.n	800260a <HAL_RCC_OscConfig+0x96>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025fc:	f7fd fe56 	bl	80002ac <HAL_GetTick>
 8002600:	1b40      	subs	r0, r0, r5
 8002602:	2802      	cmp	r0, #2
 8002604:	d9f6      	bls.n	80025f4 <HAL_RCC_OscConfig+0x80>
          {
            return HAL_TIMEOUT;
 8002606:	2003      	movs	r0, #3
 8002608:	e057      	b.n	80026ba <HAL_RCC_OscConfig+0x146>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800260c:	2b00      	cmp	r3, #0
 800260e:	d053      	beq.n	80026b8 <HAL_RCC_OscConfig+0x144>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002610:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 8002612:	6851      	ldr	r1, [r2, #4]
 8002614:	220c      	movs	r2, #12
 8002616:	400a      	ands	r2, r1
 8002618:	2a08      	cmp	r2, #8
 800261a:	d04f      	beq.n	80026bc <HAL_RCC_OscConfig+0x148>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261c:	2b02      	cmp	r3, #2
 800261e:	d012      	beq.n	8002646 <HAL_RCC_OscConfig+0xd2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002620:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	4928      	ldr	r1, [pc, #160]	; (80026c8 <HAL_RCC_OscConfig+0x154>)
 8002626:	400b      	ands	r3, r1
 8002628:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7fd fe3f 	bl	80002ac <HAL_GetTick>
 800262e:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	019b      	lsls	r3, r3, #6
 8002636:	d53d      	bpl.n	80026b4 <HAL_RCC_OscConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7fd fe38 	bl	80002ac <HAL_GetTick>
 800263c:	1b00      	subs	r0, r0, r4
 800263e:	2802      	cmp	r0, #2
 8002640:	d9f6      	bls.n	8002630 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002642:	2003      	movs	r0, #3
 8002644:	e039      	b.n	80026ba <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_PLL_DISABLE();
 8002646:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 8002648:	6813      	ldr	r3, [r2, #0]
 800264a:	491f      	ldr	r1, [pc, #124]	; (80026c8 <HAL_RCC_OscConfig+0x154>)
 800264c:	400b      	ands	r3, r1
 800264e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002650:	f7fd fe2c 	bl	80002ac <HAL_GetTick>
 8002654:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	019b      	lsls	r3, r3, #6
 800265c:	d506      	bpl.n	800266c <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265e:	f7fd fe25 	bl	80002ac <HAL_GetTick>
 8002662:	1b40      	subs	r0, r0, r5
 8002664:	2802      	cmp	r0, #2
 8002666:	d9f6      	bls.n	8002656 <HAL_RCC_OscConfig+0xe2>
            return HAL_TIMEOUT;
 8002668:	2003      	movs	r0, #3
 800266a:	e026      	b.n	80026ba <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 800266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002670:	210f      	movs	r1, #15
 8002672:	438a      	bics	r2, r1
 8002674:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002676:	430a      	orrs	r2, r1
 8002678:	62da      	str	r2, [r3, #44]	; 0x2c
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4913      	ldr	r1, [pc, #76]	; (80026cc <HAL_RCC_OscConfig+0x158>)
 800267e:	400a      	ands	r2, r1
 8002680:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002682:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002684:	4301      	orrs	r1, r0
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800268a:	6819      	ldr	r1, [r3, #0]
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	0452      	lsls	r2, r2, #17
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002694:	f7fd fe0a 	bl	80002ac <HAL_GetTick>
 8002698:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_RCC_OscConfig+0x14c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	019b      	lsls	r3, r3, #6
 80026a0:	d406      	bmi.n	80026b0 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fd fe03 	bl	80002ac <HAL_GetTick>
 80026a6:	1b00      	subs	r0, r0, r4
 80026a8:	2802      	cmp	r0, #2
 80026aa:	d9f6      	bls.n	800269a <HAL_RCC_OscConfig+0x126>
            return HAL_TIMEOUT;
 80026ac:	2003      	movs	r0, #3
 80026ae:	e004      	b.n	80026ba <HAL_RCC_OscConfig+0x146>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80026b0:	2000      	movs	r0, #0
 80026b2:	e002      	b.n	80026ba <HAL_RCC_OscConfig+0x146>
 80026b4:	2000      	movs	r0, #0
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x146>
 80026b8:	2000      	movs	r0, #0
}
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80026bc:	2001      	movs	r0, #1
 80026be:	e7fc      	b.n	80026ba <HAL_RCC_OscConfig+0x146>
 80026c0:	40021000 	.word	0x40021000
 80026c4:	fffeffff 	.word	0xfffeffff
 80026c8:	feffffff 	.word	0xfeffffff
 80026cc:	ffc27fff 	.word	0xffc27fff

080026d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b530      	push	{r4, r5, lr}
 80026d2:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026d4:	aa04      	add	r2, sp, #16
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_RCC_GetSysClockFreq+0x84>)
 80026d8:	0018      	movs	r0, r3
 80026da:	c832      	ldmia	r0!, {r1, r4, r5}
 80026dc:	c232      	stmia	r2!, {r1, r4, r5}
 80026de:	0011      	movs	r1, r2
 80026e0:	6802      	ldr	r2, [r0, #0]
 80026e2:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80026e4:	466a      	mov	r2, sp
 80026e6:	3310      	adds	r3, #16
 80026e8:	cb13      	ldmia	r3!, {r0, r1, r4}
 80026ea:	c213      	stmia	r2!, {r0, r1, r4}
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_GetSysClockFreq+0x88>)
 80026f2:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026f4:	230c      	movs	r3, #12
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d004      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x36>
 80026fc:	2b0c      	cmp	r3, #12
 80026fe:	d026      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002700:	4816      	ldr	r0, [pc, #88]	; (800275c <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002702:	b009      	add	sp, #36	; 0x24
 8002704:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002706:	0c91      	lsrs	r1, r2, #18
 8002708:	230f      	movs	r3, #15
 800270a:	4019      	ands	r1, r3
 800270c:	a804      	add	r0, sp, #16
 800270e:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002710:	4911      	ldr	r1, [pc, #68]	; (8002758 <HAL_RCC_GetSysClockFreq+0x88>)
 8002712:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002714:	400b      	ands	r3, r1
 8002716:	4669      	mov	r1, sp
 8002718:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800271a:	23c0      	movs	r3, #192	; 0xc0
 800271c:	025b      	lsls	r3, r3, #9
 800271e:	401a      	ands	r2, r3
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	025b      	lsls	r3, r3, #9
 8002724:	429a      	cmp	r2, r3
 8002726:	d008      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x6a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002728:	23c0      	movs	r3, #192	; 0xc0
 800272a:	025b      	lsls	r3, r3, #9
 800272c:	429a      	cmp	r2, r3
 800272e:	d009      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x74>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8002730:	480a      	ldr	r0, [pc, #40]	; (800275c <HAL_RCC_GetSysClockFreq+0x8c>)
 8002732:	f7fd fd05 	bl	8000140 <__udivsi3>
 8002736:	4360      	muls	r0, r4
 8002738:	e7e3      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800273a:	4808      	ldr	r0, [pc, #32]	; (800275c <HAL_RCC_GetSysClockFreq+0x8c>)
 800273c:	f7fd fd00 	bl	8000140 <__udivsi3>
 8002740:	4360      	muls	r0, r4
 8002742:	e7de      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8002744:	4806      	ldr	r0, [pc, #24]	; (8002760 <HAL_RCC_GetSysClockFreq+0x90>)
 8002746:	f7fd fcfb 	bl	8000140 <__udivsi3>
 800274a:	4360      	muls	r0, r4
 800274c:	e7d9      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSI48_VALUE;
 800274e:	4804      	ldr	r0, [pc, #16]	; (8002760 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8002750:	e7d7      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x32>
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	080052cc 	.word	0x080052cc
 8002758:	40021000 	.word	0x40021000
 800275c:	007a1200 	.word	0x007a1200
 8002760:	02dc6c00 	.word	0x02dc6c00

08002764 <HAL_RCC_ClockConfig>:
{
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	0005      	movs	r5, r0
 8002768:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800276a:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <HAL_RCC_ClockConfig+0x16c>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	4013      	ands	r3, r2
 8002772:	428b      	cmp	r3, r1
 8002774:	d20b      	bcs.n	800278e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4956      	ldr	r1, [pc, #344]	; (80028d0 <HAL_RCC_ClockConfig+0x16c>)
 8002778:	680b      	ldr	r3, [r1, #0]
 800277a:	2201      	movs	r2, #1
 800277c:	4393      	bics	r3, r2
 800277e:	4323      	orrs	r3, r4
 8002780:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002782:	680b      	ldr	r3, [r1, #0]
 8002784:	401a      	ands	r2, r3
 8002786:	4294      	cmp	r4, r2
 8002788:	d001      	beq.n	800278e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
 800278c:	e09d      	b.n	80028ca <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278e:	682b      	ldr	r3, [r5, #0]
 8002790:	079b      	lsls	r3, r3, #30
 8002792:	d506      	bpl.n	80027a2 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4a4f      	ldr	r2, [pc, #316]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 8002796:	6853      	ldr	r3, [r2, #4]
 8002798:	21f0      	movs	r1, #240	; 0xf0
 800279a:	438b      	bics	r3, r1
 800279c:	68a9      	ldr	r1, [r5, #8]
 800279e:	430b      	orrs	r3, r1
 80027a0:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	682b      	ldr	r3, [r5, #0]
 80027a4:	07db      	lsls	r3, r3, #31
 80027a6:	d564      	bpl.n	8002872 <HAL_RCC_ClockConfig+0x10e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a8:	686b      	ldr	r3, [r5, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d025      	beq.n	80027fa <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d029      	beq.n	8002806 <HAL_RCC_ClockConfig+0xa2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d02d      	beq.n	8002812 <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b6:	4a47      	ldr	r2, [pc, #284]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	0792      	lsls	r2, r2, #30
 80027bc:	d400      	bmi.n	80027c0 <HAL_RCC_ClockConfig+0x5c>
 80027be:	e085      	b.n	80028cc <HAL_RCC_ClockConfig+0x168>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c0:	4944      	ldr	r1, [pc, #272]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 80027c2:	684a      	ldr	r2, [r1, #4]
 80027c4:	2003      	movs	r0, #3
 80027c6:	4382      	bics	r2, r0
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80027cc:	f7fd fd6e 	bl	80002ac <HAL_GetTick>
 80027d0:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d2:	686b      	ldr	r3, [r5, #4]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d022      	beq.n	800281e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d02e      	beq.n	800283a <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d03a      	beq.n	8002856 <HAL_RCC_ClockConfig+0xf2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027e0:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	220c      	movs	r2, #12
 80027e6:	421a      	tst	r2, r3
 80027e8:	d043      	beq.n	8002872 <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ea:	f7fd fd5f 	bl	80002ac <HAL_GetTick>
 80027ee:	1b80      	subs	r0, r0, r6
 80027f0:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <HAL_RCC_ClockConfig+0x174>)
 80027f2:	4298      	cmp	r0, r3
 80027f4:	d9f4      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 80027f6:	2003      	movs	r0, #3
 80027f8:	e067      	b.n	80028ca <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4a36      	ldr	r2, [pc, #216]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	0392      	lsls	r2, r2, #14
 8002800:	d4de      	bmi.n	80027c0 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8002802:	2001      	movs	r0, #1
 8002804:	e061      	b.n	80028ca <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4a33      	ldr	r2, [pc, #204]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	0192      	lsls	r2, r2, #6
 800280c:	d4d8      	bmi.n	80027c0 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 800280e:	2001      	movs	r0, #1
 8002810:	e05b      	b.n	80028ca <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002812:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 8002814:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002816:	03d2      	lsls	r2, r2, #15
 8002818:	d4d2      	bmi.n	80027c0 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
 800281c:	e055      	b.n	80028ca <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800281e:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	230c      	movs	r3, #12
 8002824:	4013      	ands	r3, r2
 8002826:	2b04      	cmp	r3, #4
 8002828:	d023      	beq.n	8002872 <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282a:	f7fd fd3f 	bl	80002ac <HAL_GetTick>
 800282e:	1b80      	subs	r0, r0, r6
 8002830:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <HAL_RCC_ClockConfig+0x174>)
 8002832:	4298      	cmp	r0, r3
 8002834:	d9f3      	bls.n	800281e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8002836:	2003      	movs	r0, #3
 8002838:	e047      	b.n	80028ca <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800283a:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	230c      	movs	r3, #12
 8002840:	4013      	ands	r3, r2
 8002842:	2b08      	cmp	r3, #8
 8002844:	d015      	beq.n	8002872 <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002846:	f7fd fd31 	bl	80002ac <HAL_GetTick>
 800284a:	1b80      	subs	r0, r0, r6
 800284c:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_RCC_ClockConfig+0x174>)
 800284e:	4298      	cmp	r0, r3
 8002850:	d9f3      	bls.n	800283a <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8002852:	2003      	movs	r0, #3
 8002854:	e039      	b.n	80028ca <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8002856:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	230c      	movs	r3, #12
 800285c:	4013      	ands	r3, r2
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d007      	beq.n	8002872 <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002862:	f7fd fd23 	bl	80002ac <HAL_GetTick>
 8002866:	1b80      	subs	r0, r0, r6
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_RCC_ClockConfig+0x174>)
 800286a:	4298      	cmp	r0, r3
 800286c:	d9f3      	bls.n	8002856 <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 800286e:	2003      	movs	r0, #3
 8002870:	e02b      	b.n	80028ca <HAL_RCC_ClockConfig+0x166>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_RCC_ClockConfig+0x16c>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2301      	movs	r3, #1
 8002878:	4013      	ands	r3, r2
 800287a:	429c      	cmp	r4, r3
 800287c:	d20b      	bcs.n	8002896 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4914      	ldr	r1, [pc, #80]	; (80028d0 <HAL_RCC_ClockConfig+0x16c>)
 8002880:	680b      	ldr	r3, [r1, #0]
 8002882:	2201      	movs	r2, #1
 8002884:	4393      	bics	r3, r2
 8002886:	4323      	orrs	r3, r4
 8002888:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800288a:	680b      	ldr	r3, [r1, #0]
 800288c:	401a      	ands	r2, r3
 800288e:	4294      	cmp	r4, r2
 8002890:	d001      	beq.n	8002896 <HAL_RCC_ClockConfig+0x132>
      return HAL_ERROR;
 8002892:	2001      	movs	r0, #1
 8002894:	e019      	b.n	80028ca <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002896:	682b      	ldr	r3, [r5, #0]
 8002898:	075b      	lsls	r3, r3, #29
 800289a:	d506      	bpl.n	80028aa <HAL_RCC_ClockConfig+0x146>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 800289e:	6853      	ldr	r3, [r2, #4]
 80028a0:	490e      	ldr	r1, [pc, #56]	; (80028dc <HAL_RCC_ClockConfig+0x178>)
 80028a2:	400b      	ands	r3, r1
 80028a4:	68e9      	ldr	r1, [r5, #12]
 80028a6:	430b      	orrs	r3, r1
 80028a8:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028aa:	f7ff ff11 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x170>)
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	0912      	lsrs	r2, r2, #4
 80028b4:	230f      	movs	r3, #15
 80028b6:	4013      	ands	r3, r2
 80028b8:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x17c>)
 80028ba:	5cd3      	ldrb	r3, [r2, r3]
 80028bc:	40d8      	lsrs	r0, r3
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x180>)
 80028c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fd fcc8 	bl	8000258 <HAL_InitTick>
  return HAL_OK;
 80028c8:	2000      	movs	r0, #0
}
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80028cc:	2001      	movs	r0, #1
 80028ce:	e7fc      	b.n	80028ca <HAL_RCC_ClockConfig+0x166>
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40021000 	.word	0x40021000
 80028d8:	00001388 	.word	0x00001388
 80028dc:	fffff8ff 	.word	0xfffff8ff
 80028e0:	080054f8 	.word	0x080054f8
 80028e4:	20000118 	.word	0x20000118

080028e8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80028e8:	4b01      	ldr	r3, [pc, #4]	; (80028f0 <HAL_RCC_GetHCLKFreq+0x8>)
 80028ea:	6818      	ldr	r0, [r3, #0]
}
 80028ec:	4770      	bx	lr
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	20000118 	.word	0x20000118

080028f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80028f6:	f7ff fff7 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 80028fa:	4b04      	ldr	r3, [pc, #16]	; (800290c <HAL_RCC_GetPCLK1Freq+0x18>)
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	0a12      	lsrs	r2, r2, #8
 8002900:	2307      	movs	r3, #7
 8002902:	4013      	ands	r3, r2
 8002904:	4a02      	ldr	r2, [pc, #8]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	40d8      	lsrs	r0, r3
}    
 800290a:	bd10      	pop	{r4, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	08005508 	.word	0x08005508

08002914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800291a:	6803      	ldr	r3, [r0, #0]
 800291c:	03db      	lsls	r3, r3, #15
 800291e:	d535      	bpl.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	d45c      	bmi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4a44      	ldr	r2, [pc, #272]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800292a:	69d1      	ldr	r1, [r2, #28]
 800292c:	2080      	movs	r0, #128	; 0x80
 800292e:	0540      	lsls	r0, r0, #21
 8002930:	4301      	orrs	r1, r0
 8002932:	61d1      	str	r1, [r2, #28]
 8002934:	69d3      	ldr	r3, [r2, #28]
 8002936:	4003      	ands	r3, r0
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800293c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b40      	ldr	r3, [pc, #256]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	05db      	lsls	r3, r3, #23
 8002944:	d54f      	bpl.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002946:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	22c0      	movs	r2, #192	; 0xc0
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002950:	d013      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002952:	6861      	ldr	r1, [r4, #4]
 8002954:	400a      	ands	r2, r1
 8002956:	4293      	cmp	r3, r2
 8002958:	d00f      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800295a:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800295c:	6a18      	ldr	r0, [r3, #32]
 800295e:	4a39      	ldr	r2, [pc, #228]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002960:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002962:	6a1e      	ldr	r6, [r3, #32]
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	0249      	lsls	r1, r1, #9
 8002968:	4331      	orrs	r1, r6
 800296a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800296c:	6a19      	ldr	r1, [r3, #32]
 800296e:	4e36      	ldr	r6, [pc, #216]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002970:	4031      	ands	r1, r6
 8002972:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002974:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002976:	07c3      	lsls	r3, r0, #31
 8002978:	d449      	bmi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0xfa>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800297a:	4a30      	ldr	r2, [pc, #192]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800297c:	6a13      	ldr	r3, [r2, #32]
 800297e:	4931      	ldr	r1, [pc, #196]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002980:	400b      	ands	r3, r1
 8002982:	6861      	ldr	r1, [r4, #4]
 8002984:	430b      	orrs	r3, r1
 8002986:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002988:	2d01      	cmp	r5, #1
 800298a:	d04f      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x118>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	07db      	lsls	r3, r3, #31
 8002990:	d506      	bpl.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002992:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002994:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002996:	2103      	movs	r1, #3
 8002998:	438b      	bics	r3, r1
 800299a:	68a1      	ldr	r1, [r4, #8]
 800299c:	430b      	orrs	r3, r1
 800299e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	069b      	lsls	r3, r3, #26
 80029a4:	d506      	bpl.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029a6:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80029a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029aa:	2110      	movs	r1, #16
 80029ac:	438b      	bics	r3, r1
 80029ae:	68e1      	ldr	r1, [r4, #12]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	039b      	lsls	r3, r3, #14
 80029b8:	d506      	bpl.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029ba:	4a20      	ldr	r2, [pc, #128]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80029bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029be:	2180      	movs	r1, #128	; 0x80
 80029c0:	438b      	bics	r3, r1
 80029c2:	6961      	ldr	r1, [r4, #20]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	055b      	lsls	r3, r3, #21
 80029cc:	d533      	bpl.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029ce:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80029d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029d2:	2140      	movs	r1, #64	; 0x40
 80029d4:	438b      	bics	r3, r1
 80029d6:	6921      	ldr	r1, [r4, #16]
 80029d8:	430b      	orrs	r3, r1
 80029da:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80029dc:	2000      	movs	r0, #0
}
 80029de:	b002      	add	sp, #8
 80029e0:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2500      	movs	r5, #0
 80029e4:	e7ab      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e6:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80029e8:	6811      	ldr	r1, [r2, #0]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	430b      	orrs	r3, r1
 80029f0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80029f2:	f7fd fc5b 	bl	80002ac <HAL_GetTick>
 80029f6:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	05db      	lsls	r3, r3, #23
 80029fe:	d4a2      	bmi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a00:	f7fd fc54 	bl	80002ac <HAL_GetTick>
 8002a04:	1b80      	subs	r0, r0, r6
 8002a06:	2864      	cmp	r0, #100	; 0x64
 8002a08:	d9f6      	bls.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 8002a0a:	2003      	movs	r0, #3
 8002a0c:	e7e7      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xca>
        tickstart = HAL_GetTick();
 8002a0e:	f7fd fc4d 	bl	80002ac <HAL_GetTick>
 8002a12:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a14:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	079b      	lsls	r3, r3, #30
 8002a1a:	d4ae      	bmi.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7fd fc46 	bl	80002ac <HAL_GetTick>
 8002a20:	1b80      	subs	r0, r0, r6
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002a24:	4298      	cmp	r0, r3
 8002a26:	d9f5      	bls.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
 8002a28:	2003      	movs	r0, #3
 8002a2a:	e7d8      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2c:	69d3      	ldr	r3, [r2, #28]
 8002a2e:	4908      	ldr	r1, [pc, #32]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a30:	400b      	ands	r3, r1
 8002a32:	61d3      	str	r3, [r2, #28]
 8002a34:	e7aa      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8002a36:	2000      	movs	r0, #0
 8002a38:	e7d1      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40007000 	.word	0x40007000
 8002a44:	fffffcff 	.word	0xfffffcff
 8002a48:	fffeffff 	.word	0xfffeffff
 8002a4c:	00001388 	.word	0x00001388
 8002a50:	efffffff 	.word	0xefffffff

08002a54 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a54:	6803      	ldr	r3, [r0, #0]
 8002a56:	4906      	ldr	r1, [pc, #24]	; (8002a70 <UART_EndRxTransfer+0x1c>)
 8002a58:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a5a:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	3123      	adds	r1, #35	; 0x23
 8002a64:	31ff      	adds	r1, #255	; 0xff
 8002a66:	438a      	bics	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	7003      	strb	r3, [r0, #0]
}
 8002a6e:	4770      	bx	lr
 8002a70:	fffffedf 	.word	0xfffffedf

08002a74 <HAL_UART_Transmit_DMA>:
{
 8002a74:	0013      	movs	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002a76:	0002      	movs	r2, r0
{
 8002a78:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8002a7a:	3269      	adds	r2, #105	; 0x69
 8002a7c:	7814      	ldrb	r4, [r2, #0]
{
 8002a7e:	0005      	movs	r5, r0
    return HAL_BUSY;
 8002a80:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8002a82:	2c20      	cmp	r4, #32
 8002a84:	d134      	bne.n	8002af0 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 8002a86:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002a88:	2900      	cmp	r1, #0
 8002a8a:	d031      	beq.n	8002af0 <HAL_UART_Transmit_DMA+0x7c>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d02f      	beq.n	8002af0 <HAL_UART_Transmit_DMA+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a90:	2480      	movs	r4, #128	; 0x80
 8002a92:	68ae      	ldr	r6, [r5, #8]
 8002a94:	0164      	lsls	r4, r4, #5
 8002a96:	42a6      	cmp	r6, r4
 8002a98:	d104      	bne.n	8002aa4 <HAL_UART_Transmit_DMA+0x30>
 8002a9a:	692c      	ldr	r4, [r5, #16]
 8002a9c:	2c00      	cmp	r4, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Transmit_DMA+0x30>
      if((((uint32_t)pData)&1U) != 0U)
 8002aa0:	4201      	tst	r1, r0
 8002aa2:	d125      	bne.n	8002af0 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8002aa4:	002e      	movs	r6, r5
 8002aa6:	3668      	adds	r6, #104	; 0x68
 8002aa8:	7834      	ldrb	r4, [r6, #0]
    return HAL_BUSY;
 8002aaa:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002aac:	2c01      	cmp	r4, #1
 8002aae:	d01f      	beq.n	8002af0 <HAL_UART_Transmit_DMA+0x7c>
 8002ab0:	3801      	subs	r0, #1
 8002ab2:	7030      	strb	r0, [r6, #0]
    huart->TxXferSize = Size;
 8002ab4:	0028      	movs	r0, r5
 8002ab6:	3050      	adds	r0, #80	; 0x50
    huart->pTxBuffPtr = pData;
 8002ab8:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aba:	2400      	movs	r4, #0
    huart->TxXferSize = Size;
 8002abc:	8003      	strh	r3, [r0, #0]
    huart->TxXferCount = Size;
 8002abe:	8043      	strh	r3, [r0, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac0:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac2:	66ec      	str	r4, [r5, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac4:	7010      	strb	r0, [r2, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002ac6:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8002ac8:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <HAL_UART_Transmit_DMA+0x80>)
    huart->hdmatx->XferAbortCallback = NULL;
 8002aca:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002acc:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <HAL_UART_Transmit_DMA+0x84>)
 8002ad0:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <HAL_UART_Transmit_DMA+0x88>)
 8002ad4:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8002ad6:	682a      	ldr	r2, [r5, #0]
 8002ad8:	3228      	adds	r2, #40	; 0x28
 8002ada:	f7fe f8b9 	bl	8000c50 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002ade:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 8002ae0:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002ae2:	682b      	ldr	r3, [r5, #0]
 8002ae4:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	1892      	adds	r2, r2, r2
 8002aea:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8002aec:	7034      	strb	r4, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002aee:	609a      	str	r2, [r3, #8]
}
 8002af0:	bd70      	pop	{r4, r5, r6, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	08002c01 	.word	0x08002c01
 8002af8:	08002c33 	.word	0x08002c33
 8002afc:	08002c8d 	.word	0x08002c8d

08002b00 <HAL_UART_Receive_DMA>:
{
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	0013      	movs	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002b04:	0002      	movs	r2, r0
 8002b06:	326a      	adds	r2, #106	; 0x6a
 8002b08:	7814      	ldrb	r4, [r2, #0]
{
 8002b0a:	0005      	movs	r5, r0
    return HAL_BUSY;
 8002b0c:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002b0e:	2c20      	cmp	r4, #32
 8002b10:	d13c      	bne.n	8002b8c <HAL_UART_Receive_DMA+0x8c>
      return HAL_ERROR;
 8002b12:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002b14:	2900      	cmp	r1, #0
 8002b16:	d039      	beq.n	8002b8c <HAL_UART_Receive_DMA+0x8c>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d037      	beq.n	8002b8c <HAL_UART_Receive_DMA+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1c:	2480      	movs	r4, #128	; 0x80
 8002b1e:	68ae      	ldr	r6, [r5, #8]
 8002b20:	0164      	lsls	r4, r4, #5
 8002b22:	42a6      	cmp	r6, r4
 8002b24:	d104      	bne.n	8002b30 <HAL_UART_Receive_DMA+0x30>
 8002b26:	692c      	ldr	r4, [r5, #16]
 8002b28:	2c00      	cmp	r4, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_UART_Receive_DMA+0x30>
      if((((uint32_t)pData)&1U) != 0U)
 8002b2c:	4201      	tst	r1, r0
 8002b2e:	d12d      	bne.n	8002b8c <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8002b30:	002e      	movs	r6, r5
 8002b32:	3668      	adds	r6, #104	; 0x68
 8002b34:	7834      	ldrb	r4, [r6, #0]
    return HAL_BUSY;
 8002b36:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002b38:	2c01      	cmp	r4, #1
 8002b3a:	d027      	beq.n	8002b8c <HAL_UART_Receive_DMA+0x8c>
    huart->RxXferSize = Size;
 8002b3c:	0028      	movs	r0, r5
    __HAL_LOCK(huart);
 8002b3e:	2701      	movs	r7, #1
    huart->RxXferSize = Size;
 8002b40:	3058      	adds	r0, #88	; 0x58
    __HAL_LOCK(huart);
 8002b42:	7037      	strb	r7, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b44:	2400      	movs	r4, #0
    huart->pRxBuffPtr = pData;
 8002b46:	6569      	str	r1, [r5, #84]	; 0x54
    huart->RxXferSize = Size;
 8002b48:	8003      	strh	r3, [r0, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b4a:	2022      	movs	r0, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4c:	66ec      	str	r4, [r5, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b4e:	7010      	strb	r0, [r2, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b50:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8002b52:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <HAL_UART_Receive_DMA+0x90>)
    huart->hdmarx->XferAbortCallback = NULL;
 8002b54:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b56:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b58:	4a0e      	ldr	r2, [pc, #56]	; (8002b94 <HAL_UART_Receive_DMA+0x94>)
 8002b5a:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_UART_Receive_DMA+0x98>)
 8002b5e:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8002b60:	682a      	ldr	r2, [r5, #0]
 8002b62:	3224      	adds	r2, #36	; 0x24
 8002b64:	4694      	mov	ip, r2
 8002b66:	000a      	movs	r2, r1
 8002b68:	4661      	mov	r1, ip
 8002b6a:	f7fe f871 	bl	8000c50 <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b6e:	2280      	movs	r2, #128	; 0x80
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	0052      	lsls	r2, r2, #1
 8002b74:	6819      	ldr	r1, [r3, #0]
    __HAL_UNLOCK(huart);
 8002b76:	7034      	strb	r4, [r6, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7c:	689a      	ldr	r2, [r3, #8]
    return HAL_OK;
 8002b7e:	0020      	movs	r0, r4
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b80:	4317      	orrs	r7, r2
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b82:	2240      	movs	r2, #64	; 0x40
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b84:	609f      	str	r7, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	08002c3d 	.word	0x08002c3d
 8002b94:	08002c83 	.word	0x08002c83
 8002b98:	08002c8d 	.word	0x08002c8d

08002b9c <HAL_UART_DMAStop>:
{
 8002b9c:	b570      	push	{r4, r5, r6, lr}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) &&
 8002b9e:	0005      	movs	r5, r0
 8002ba0:	3569      	adds	r5, #105	; 0x69
 8002ba2:	782b      	ldrb	r3, [r5, #0]
{
 8002ba4:	0004      	movs	r4, r0
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) &&
 8002ba6:	2b21      	cmp	r3, #33	; 0x21
 8002ba8:	d113      	bne.n	8002bd2 <HAL_UART_DMAStop+0x36>
      (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	6803      	ldr	r3, [r0, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) &&
 8002bb0:	420a      	tst	r2, r1
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_UART_DMAStop+0x36>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bb4:	689a      	ldr	r2, [r3, #8]
    if(huart->hdmatx != NULL)
 8002bb6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bb8:	438a      	bics	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
    if(huart->hdmatx != NULL)
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_UART_DMAStop+0x28>
      HAL_DMA_Abort(huart->hdmatx);
 8002bc0:	f7fe f881 	bl	8000cc6 <HAL_DMA_Abort>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002bc4:	21c0      	movs	r1, #192	; 0xc0
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	6813      	ldr	r3, [r2, #0]
 8002bca:	438b      	bics	r3, r1
 8002bcc:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002bce:	2320      	movs	r3, #32
 8002bd0:	702b      	strb	r3, [r5, #0]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) &&
 8002bd2:	0023      	movs	r3, r4
 8002bd4:	336a      	adds	r3, #106	; 0x6a
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b22      	cmp	r3, #34	; 0x22
 8002bda:	d10f      	bne.n	8002bfc <HAL_UART_DMAStop+0x60>
      (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002bdc:	2140      	movs	r1, #64	; 0x40
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) &&
 8002be2:	420a      	tst	r2, r1
 8002be4:	d00a      	beq.n	8002bfc <HAL_UART_DMAStop+0x60>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be6:	689a      	ldr	r2, [r3, #8]
    if(huart->hdmarx != NULL)
 8002be8:	6e60      	ldr	r0, [r4, #100]	; 0x64
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bea:	438a      	bics	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]
    if(huart->hdmarx != NULL)
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_UART_DMAStop+0x5a>
      HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	f7fe f868 	bl	8000cc6 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 8002bf6:	0020      	movs	r0, r4
 8002bf8:	f7ff ff2c 	bl	8002a54 <UART_EndRxTransfer>
}
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}

08002c00 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002c00:	2120      	movs	r1, #32
 8002c02:	6803      	ldr	r3, [r0, #0]
{
 8002c04:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002c06:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002c08:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	d10c      	bne.n	8002c28 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0;
 8002c0e:	0011      	movs	r1, r2
 8002c10:	3152      	adds	r1, #82	; 0x52
 8002c12:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	6813      	ldr	r3, [r2, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	438a      	bics	r2, r1
 8002c1c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c1e:	2240      	movs	r2, #64	; 0x40
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8002c26:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8002c28:	0010      	movs	r0, r2
 8002c2a:	f001 fa7f 	bl	800412c <HAL_UART_TxCpltCallback>
}
 8002c2e:	e7fa      	b.n	8002c26 <UART_DMATransmitCplt+0x26>

08002c30 <HAL_UART_TxHalfCpltCallback>:
 8002c30:	4770      	bx	lr

08002c32 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c32:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 8002c34:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002c36:	f7ff fffb 	bl	8002c30 <HAL_UART_TxHalfCpltCallback>
}
 8002c3a:	bd10      	pop	{r4, pc}

08002c3c <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002c3c:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002c3e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002c40:	2020      	movs	r0, #32
 8002c42:	681b      	ldr	r3, [r3, #0]
{
 8002c44:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002c46:	4003      	ands	r3, r0
 8002c48:	d113      	bne.n	8002c72 <UART_DMAReceiveCplt+0x36>
  {
    huart->RxXferCount = 0U;
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	315a      	adds	r1, #90	; 0x5a
 8002c4e:	800b      	strh	r3, [r1, #0]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	4c0a      	ldr	r4, [pc, #40]	; (8002c7c <UART_DMAReceiveCplt+0x40>)
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	4021      	ands	r1, r4
 8002c58:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	3403      	adds	r4, #3
 8002c5e:	34ff      	adds	r4, #255	; 0xff
 8002c60:	43a1      	bics	r1, r4
 8002c62:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c64:	6899      	ldr	r1, [r3, #8]
 8002c66:	343f      	adds	r4, #63	; 0x3f
 8002c68:	43a1      	bics	r1, r4
 8002c6a:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	336a      	adds	r3, #106	; 0x6a
 8002c70:	7018      	strb	r0, [r3, #0]
  }

  HAL_UART_RxCpltCallback(huart);
 8002c72:	0010      	movs	r0, r2
 8002c74:	f001 fa74 	bl	8004160 <HAL_UART_RxCpltCallback>
}
 8002c78:	bd10      	pop	{r4, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	fffffeff 	.word	0xfffffeff

08002c80 <HAL_UART_RxHalfCpltCallback>:
 8002c80:	4770      	bx	lr

08002c82 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c82:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_RxHalfCpltCallback(huart);
 8002c84:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002c86:	f7ff fffb 	bl	8002c80 <HAL_UART_RxHalfCpltCallback>
}
 8002c8a:	bd10      	pop	{r4, pc}

08002c8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002c8e:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c90:	0021      	movs	r1, r4
 8002c92:	3169      	adds	r1, #105	; 0x69
 8002c94:	780b      	ldrb	r3, [r1, #0]
 8002c96:	2b21      	cmp	r3, #33	; 0x21
 8002c98:	d10d      	bne.n	8002cb6 <UART_DMAError+0x2a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	0612      	lsls	r2, r2, #24
 8002ca0:	d509      	bpl.n	8002cb6 <UART_DMAError+0x2a>
  {
    huart->TxXferCount = 0U;
 8002ca2:	0022      	movs	r2, r4
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	3252      	adds	r2, #82	; 0x52
 8002ca8:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	30c0      	adds	r0, #192	; 0xc0
 8002cae:	4382      	bics	r2, r0
 8002cb0:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	700b      	strb	r3, [r1, #0]
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cb6:	0023      	movs	r3, r4
 8002cb8:	336a      	adds	r3, #106	; 0x6a
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b22      	cmp	r3, #34	; 0x22
 8002cbe:	d10a      	bne.n	8002cd6 <UART_DMAError+0x4a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	065b      	lsls	r3, r3, #25
 8002cc6:	d506      	bpl.n	8002cd6 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
 8002cc8:	0023      	movs	r3, r4
 8002cca:	2200      	movs	r2, #0
 8002ccc:	335a      	adds	r3, #90	; 0x5a
 8002cce:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f7ff febf 	bl	8002a54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002cd6:	2310      	movs	r3, #16
 8002cd8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8002cda:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8002ce0:	f001 fa26 	bl	8004130 <HAL_UART_ErrorCallback>
}
 8002ce4:	bd10      	pop	{r4, pc}

08002ce6 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002ce6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	0002      	movs	r2, r0
{
 8002cec:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002cee:	325a      	adds	r2, #90	; 0x5a
 8002cf0:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002cf2:	3a08      	subs	r2, #8
 8002cf4:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8002cf6:	f001 fa1b 	bl	8004130 <HAL_UART_ErrorCallback>
}
 8002cfa:	bd10      	pop	{r4, pc}

08002cfc <UART_SetConfig>:
{
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002d00:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d02:	69c2      	ldr	r2, [r0, #28]
 8002d04:	6883      	ldr	r3, [r0, #8]
 8002d06:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002d08:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d0a:	4303      	orrs	r3, r0
 8002d0c:	6960      	ldr	r0, [r4, #20]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d0e:	4e3f      	ldr	r6, [pc, #252]	; (8002e0c <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d10:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002d12:	483f      	ldr	r0, [pc, #252]	; (8002e10 <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d14:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002d16:	4001      	ands	r1, r0
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d1c:	686b      	ldr	r3, [r5, #4]
 8002d1e:	493d      	ldr	r1, [pc, #244]	; (8002e14 <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002d20:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d22:	400b      	ands	r3, r1
 8002d24:	68e1      	ldr	r1, [r4, #12]
 8002d26:	430b      	orrs	r3, r1
 8002d28:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002d2a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002d2c:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002d2e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002d30:	4839      	ldr	r0, [pc, #228]	; (8002e18 <UART_SetConfig+0x11c>)
 8002d32:	4001      	ands	r1, r0
 8002d34:	430b      	orrs	r3, r1
 8002d36:	60ab      	str	r3, [r5, #8]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d3c:	42b5      	cmp	r5, r6
 8002d3e:	d110      	bne.n	8002d62 <UART_SetConfig+0x66>
 8002d40:	2003      	movs	r0, #3
 8002d42:	4936      	ldr	r1, [pc, #216]	; (8002e1c <UART_SetConfig+0x120>)
 8002d44:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002d46:	4001      	ands	r1, r0
 8002d48:	4835      	ldr	r0, [pc, #212]	; (8002e20 <UART_SetConfig+0x124>)
 8002d4a:	5c40      	ldrb	r0, [r0, r1]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d013      	beq.n	8002d78 <UART_SetConfig+0x7c>
    switch (clocksource)
 8002d50:	2808      	cmp	r0, #8
 8002d52:	d858      	bhi.n	8002e06 <UART_SetConfig+0x10a>
 8002d54:	f7fd f9ea 	bl	800012c <__gnu_thumb1_case_uqi>
 8002d58:	57425737 	.word	0x57425737
 8002d5c:	5757574b 	.word	0x5757574b
 8002d60:	50          	.byte	0x50
 8002d61:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d62:	4930      	ldr	r1, [pc, #192]	; (8002e24 <UART_SetConfig+0x128>)
 8002d64:	428d      	cmp	r5, r1
 8002d66:	d14c      	bne.n	8002e02 <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d12c      	bne.n	8002dc6 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d6c:	f7ff fdc2 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d70:	6863      	ldr	r3, [r4, #4]
 8002d72:	0040      	lsls	r0, r0, #1
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	e00b      	b.n	8002d90 <UART_SetConfig+0x94>
    switch (clocksource)
 8002d78:	2808      	cmp	r0, #8
 8002d7a:	d821      	bhi.n	8002dc0 <UART_SetConfig+0xc4>
 8002d7c:	f7fd f9cc 	bl	8000118 <__gnu_thumb1_case_sqi>
 8002d80:	200520f6 	.word	0x200520f6
 8002d84:	20202018 	.word	0x20202018
 8002d88:	1b          	.byte	0x1b
 8002d89:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d8a:	6863      	ldr	r3, [r4, #4]
 8002d8c:	0858      	lsrs	r0, r3, #1
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002d90:	18c0      	adds	r0, r0, r3
 8002d92:	6861      	ldr	r1, [r4, #4]
 8002d94:	f7fd f9d4 	bl	8000140 <__udivsi3>
 8002d98:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	0019      	movs	r1, r3
 8002da0:	4391      	bics	r1, r2
 8002da2:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002da4:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8002da6:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002da8:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60cb      	str	r3, [r1, #12]
}
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002db0:	f7ff fc8e 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8002db4:	e7dc      	b.n	8002d70 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002db6:	6863      	ldr	r3, [r4, #4]
 8002db8:	0858      	lsrs	r0, r3, #1
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	025b      	lsls	r3, r3, #9
 8002dbe:	e7e7      	b.n	8002d90 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 8002dc0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e7ea      	b.n	8002d9c <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002dc6:	f7ff fd95 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8002dca:	6861      	ldr	r1, [r4, #4]
 8002dcc:	084b      	lsrs	r3, r1, #1
 8002dce:	1818      	adds	r0, r3, r0
 8002dd0:	f7fd f9b6 	bl	8000140 <__udivsi3>
 8002dd4:	b280      	uxth	r0, r0
 8002dd6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dd8:	2000      	movs	r0, #0
        break;
 8002dda:	e7e8      	b.n	8002dae <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002ddc:	6861      	ldr	r1, [r4, #4]
 8002dde:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <UART_SetConfig+0x130>)
 8002de0:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002de2:	18c0      	adds	r0, r0, r3
 8002de4:	f7fd f9ac 	bl	8000140 <__udivsi3>
 8002de8:	b280      	uxth	r0, r0
 8002dea:	60f0      	str	r0, [r6, #12]
 8002dec:	e7f4      	b.n	8002dd8 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002dee:	f7ff fc6f 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8002df2:	6861      	ldr	r1, [r4, #4]
 8002df4:	084b      	lsrs	r3, r1, #1
 8002df6:	e7f4      	b.n	8002de2 <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	6861      	ldr	r1, [r4, #4]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	0848      	lsrs	r0, r1, #1
 8002e00:	e7ef      	b.n	8002de2 <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d0dc      	beq.n	8002dc0 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8002e06:	2001      	movs	r0, #1
  return ret;
 8002e08:	e7d1      	b.n	8002dae <UART_SetConfig+0xb2>
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	efff69f3 	.word	0xefff69f3
 8002e14:	ffffcfff 	.word	0xffffcfff
 8002e18:	fffff4ff 	.word	0xfffff4ff
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	080052ec 	.word	0x080052ec
 8002e24:	40004400 	.word	0x40004400
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	007a1200 	.word	0x007a1200

08002e30 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e30:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002e32:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e34:	07da      	lsls	r2, r3, #31
 8002e36:	d506      	bpl.n	8002e46 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e38:	6801      	ldr	r1, [r0, #0]
 8002e3a:	4c28      	ldr	r4, [pc, #160]	; (8002edc <UART_AdvFeatureConfig+0xac>)
 8002e3c:	684a      	ldr	r2, [r1, #4]
 8002e3e:	4022      	ands	r2, r4
 8002e40:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002e42:	4322      	orrs	r2, r4
 8002e44:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e46:	079a      	lsls	r2, r3, #30
 8002e48:	d506      	bpl.n	8002e58 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e4a:	6801      	ldr	r1, [r0, #0]
 8002e4c:	4c24      	ldr	r4, [pc, #144]	; (8002ee0 <UART_AdvFeatureConfig+0xb0>)
 8002e4e:	684a      	ldr	r2, [r1, #4]
 8002e50:	4022      	ands	r2, r4
 8002e52:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002e54:	4322      	orrs	r2, r4
 8002e56:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e58:	075a      	lsls	r2, r3, #29
 8002e5a:	d506      	bpl.n	8002e6a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e5c:	6801      	ldr	r1, [r0, #0]
 8002e5e:	4c21      	ldr	r4, [pc, #132]	; (8002ee4 <UART_AdvFeatureConfig+0xb4>)
 8002e60:	684a      	ldr	r2, [r1, #4]
 8002e62:	4022      	ands	r2, r4
 8002e64:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002e66:	4322      	orrs	r2, r4
 8002e68:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e6a:	071a      	lsls	r2, r3, #28
 8002e6c:	d506      	bpl.n	8002e7c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e6e:	6801      	ldr	r1, [r0, #0]
 8002e70:	4c1d      	ldr	r4, [pc, #116]	; (8002ee8 <UART_AdvFeatureConfig+0xb8>)
 8002e72:	684a      	ldr	r2, [r1, #4]
 8002e74:	4022      	ands	r2, r4
 8002e76:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002e78:	4322      	orrs	r2, r4
 8002e7a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e7c:	06da      	lsls	r2, r3, #27
 8002e7e:	d506      	bpl.n	8002e8e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e80:	6801      	ldr	r1, [r0, #0]
 8002e82:	4c1a      	ldr	r4, [pc, #104]	; (8002eec <UART_AdvFeatureConfig+0xbc>)
 8002e84:	688a      	ldr	r2, [r1, #8]
 8002e86:	4022      	ands	r2, r4
 8002e88:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002e8a:	4322      	orrs	r2, r4
 8002e8c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e8e:	069a      	lsls	r2, r3, #26
 8002e90:	d506      	bpl.n	8002ea0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e92:	6801      	ldr	r1, [r0, #0]
 8002e94:	4c16      	ldr	r4, [pc, #88]	; (8002ef0 <UART_AdvFeatureConfig+0xc0>)
 8002e96:	688a      	ldr	r2, [r1, #8]
 8002e98:	4022      	ands	r2, r4
 8002e9a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002e9c:	4322      	orrs	r2, r4
 8002e9e:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ea0:	065a      	lsls	r2, r3, #25
 8002ea2:	d510      	bpl.n	8002ec6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ea4:	6801      	ldr	r1, [r0, #0]
 8002ea6:	4d13      	ldr	r5, [pc, #76]	; (8002ef4 <UART_AdvFeatureConfig+0xc4>)
 8002ea8:	684a      	ldr	r2, [r1, #4]
 8002eaa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002eac:	402a      	ands	r2, r5
 8002eae:	4322      	orrs	r2, r4
 8002eb0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	0352      	lsls	r2, r2, #13
 8002eb6:	4294      	cmp	r4, r2
 8002eb8:	d105      	bne.n	8002ec6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eba:	684a      	ldr	r2, [r1, #4]
 8002ebc:	4c0e      	ldr	r4, [pc, #56]	; (8002ef8 <UART_AdvFeatureConfig+0xc8>)
 8002ebe:	4022      	ands	r2, r4
 8002ec0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ec2:	4322      	orrs	r2, r4
 8002ec4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ec6:	061b      	lsls	r3, r3, #24
 8002ec8:	d506      	bpl.n	8002ed8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eca:	6802      	ldr	r2, [r0, #0]
 8002ecc:	490b      	ldr	r1, [pc, #44]	; (8002efc <UART_AdvFeatureConfig+0xcc>)
 8002ece:	6853      	ldr	r3, [r2, #4]
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	6053      	str	r3, [r2, #4]
}
 8002ed8:	bd30      	pop	{r4, r5, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	fffdffff 	.word	0xfffdffff
 8002ee0:	fffeffff 	.word	0xfffeffff
 8002ee4:	fffbffff 	.word	0xfffbffff
 8002ee8:	ffff7fff 	.word	0xffff7fff
 8002eec:	ffffefff 	.word	0xffffefff
 8002ef0:	ffffdfff 	.word	0xffffdfff
 8002ef4:	ffefffff 	.word	0xffefffff
 8002ef8:	ff9fffff 	.word	0xff9fffff
 8002efc:	fff7ffff 	.word	0xfff7ffff

08002f00 <UART_WaitOnFlagUntilTimeout>:
{
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	0004      	movs	r4, r0
 8002f04:	000e      	movs	r6, r1
 8002f06:	0015      	movs	r5, r2
 8002f08:	001f      	movs	r7, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0a:	6822      	ldr	r2, [r4, #0]
 8002f0c:	69d3      	ldr	r3, [r2, #28]
 8002f0e:	4033      	ands	r3, r6
 8002f10:	1b9b      	subs	r3, r3, r6
 8002f12:	4259      	negs	r1, r3
 8002f14:	414b      	adcs	r3, r1
 8002f16:	42ab      	cmp	r3, r5
 8002f18:	d001      	beq.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	e018      	b.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8002f1e:	9b06      	ldr	r3, [sp, #24]
 8002f20:	3301      	adds	r3, #1
 8002f22:	d0f3      	beq.n	8002f0c <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002f24:	9b06      	ldr	r3, [sp, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d113      	bne.n	8002f52 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	490c      	ldr	r1, [pc, #48]	; (8002f60 <UART_WaitOnFlagUntilTimeout+0x60>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8002f30:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f32:	400a      	ands	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	31a3      	adds	r1, #163	; 0xa3
 8002f3a:	31ff      	adds	r1, #255	; 0xff
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002f40:	0022      	movs	r2, r4
 8002f42:	2320      	movs	r3, #32
 8002f44:	3269      	adds	r2, #105	; 0x69
 8002f46:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8002f48:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	3468      	adds	r4, #104	; 0x68
 8002f4e:	7023      	strb	r3, [r4, #0]
}
 8002f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002f52:	f7fd f9ab 	bl	80002ac <HAL_GetTick>
 8002f56:	9b06      	ldr	r3, [sp, #24]
 8002f58:	1bc0      	subs	r0, r0, r7
 8002f5a:	4283      	cmp	r3, r0
 8002f5c:	d2d5      	bcs.n	8002f0a <UART_WaitOnFlagUntilTimeout+0xa>
 8002f5e:	e7e4      	b.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x2a>
 8002f60:	fffffe5f 	.word	0xfffffe5f

08002f64 <UART_CheckIdleState>:
{
 8002f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f66:	2600      	movs	r6, #0
{
 8002f68:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6a:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002f6c:	f7fd f99e 	bl	80002ac <HAL_GetTick>
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8002f70:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <UART_CheckIdleState+0x68>)
 8002f72:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002f74:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d008      	beq.n	8002f8c <UART_CheckIdleState+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 8002f7a:	0022      	movs	r2, r4
 8002f7c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002f7e:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002f80:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8002f82:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8002f84:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8002f86:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8002f88:	7020      	strb	r0, [r4, #0]
}
 8002f8a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	071b      	lsls	r3, r3, #28
 8002f90:	d40f      	bmi.n	8002fb2 <UART_CheckIdleState+0x4e>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	075b      	lsls	r3, r3, #29
 8002f98:	d5ef      	bpl.n	8002f7a <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f9a:	2180      	movs	r1, #128	; 0x80
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <UART_CheckIdleState+0x6c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	03c9      	lsls	r1, r1, #15
 8002fa4:	002b      	movs	r3, r5
 8002fa6:	0020      	movs	r0, r4
 8002fa8:	f7ff ffaa 	bl	8002f00 <UART_WaitOnFlagUntilTimeout>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d10b      	bne.n	8002fc8 <UART_CheckIdleState+0x64>
 8002fb0:	e7e3      	b.n	8002f7a <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb2:	2180      	movs	r1, #128	; 0x80
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <UART_CheckIdleState+0x6c>)
 8002fb6:	0032      	movs	r2, r6
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	0389      	lsls	r1, r1, #14
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	0020      	movs	r0, r4
 8002fc0:	f7ff ff9e 	bl	8002f00 <UART_WaitOnFlagUntilTimeout>
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d0e4      	beq.n	8002f92 <UART_CheckIdleState+0x2e>
        return HAL_TIMEOUT;
 8002fc8:	2003      	movs	r0, #3
 8002fca:	e7de      	b.n	8002f8a <UART_CheckIdleState+0x26>
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	01ffffff 	.word	0x01ffffff

08002fd4 <HAL_UART_Init>:
{
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8002fd8:	d101      	bne.n	8002fde <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002fda:	2001      	movs	r0, #1
}
 8002fdc:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8002fde:	0005      	movs	r5, r0
 8002fe0:	3569      	adds	r5, #105	; 0x69
 8002fe2:	782b      	ldrb	r3, [r5, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8002fea:	0002      	movs	r2, r0
 8002fec:	3268      	adds	r2, #104	; 0x68
 8002fee:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002ff0:	f001 fdb4 	bl	8004b5c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002ff4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002ffa:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8002ffc:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ffe:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003000:	438b      	bics	r3, r1
 8003002:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003004:	f7ff fe7a 	bl	8002cfc <UART_SetConfig>
 8003008:	2801      	cmp	r0, #1
 800300a:	d0e6      	beq.n	8002fda <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800300c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8003012:	0020      	movs	r0, r4
 8003014:	f7ff ff0c 	bl	8002e30 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	4908      	ldr	r1, [pc, #32]	; (800303c <HAL_UART_Init+0x68>)
 800301c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800301e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003020:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003022:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003024:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	438a      	bics	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800302c:	2201      	movs	r2, #1
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003034:	f7ff ff96 	bl	8002f64 <UART_CheckIdleState>
 8003038:	e7d0      	b.n	8002fdc <HAL_UART_Init+0x8>
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	ffffb7ff 	.word	0xffffb7ff

08003040 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003040:	0003      	movs	r3, r0
{
 8003042:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003044:	3369      	adds	r3, #105	; 0x69
 8003046:	781b      	ldrb	r3, [r3, #0]
{
 8003048:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800304a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800304c:	2b21      	cmp	r3, #33	; 0x21
 800304e:	d10f      	bne.n	8003070 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8003050:	0014      	movs	r4, r2
 8003052:	3452      	adds	r4, #82	; 0x52
 8003054:	8823      	ldrh	r3, [r4, #0]
 8003056:	6811      	ldr	r1, [r2, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800305e:	680a      	ldr	r2, [r1, #0]
 8003060:	307e      	adds	r0, #126	; 0x7e
 8003062:	4382      	bics	r2, r0
 8003064:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003066:	2240      	movs	r2, #64	; 0x40
 8003068:	6808      	ldr	r0, [r1, #0]
 800306a:	4302      	orrs	r2, r0
 800306c:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 800306e:	2000      	movs	r0, #0
  }
}
 8003070:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003072:	2080      	movs	r0, #128	; 0x80
 8003074:	6895      	ldr	r5, [r2, #8]
 8003076:	0140      	lsls	r0, r0, #5
 8003078:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800307a:	4285      	cmp	r5, r0
 800307c:	d10d      	bne.n	800309a <UART_Transmit_IT+0x5a>
 800307e:	6910      	ldr	r0, [r2, #16]
 8003080:	2800      	cmp	r0, #0
 8003082:	d10a      	bne.n	800309a <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003084:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 8003086:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003088:	05c0      	lsls	r0, r0, #23
 800308a:	0dc0      	lsrs	r0, r0, #23
 800308c:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800308e:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 8003090:	8823      	ldrh	r3, [r4, #0]
 8003092:	3b01      	subs	r3, #1
 8003094:	b29b      	uxth	r3, r3
 8003096:	8023      	strh	r3, [r4, #0]
 8003098:	e7e9      	b.n	800306e <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800309a:	1c58      	adds	r0, r3, #1
 800309c:	64d0      	str	r0, [r2, #76]	; 0x4c
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	850b      	strh	r3, [r1, #40]	; 0x28
 80030a2:	e7f5      	b.n	8003090 <UART_Transmit_IT+0x50>

080030a4 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030a4:	2140      	movs	r1, #64	; 0x40
 80030a6:	6802      	ldr	r2, [r0, #0]
{
 80030a8:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030aa:	6813      	ldr	r3, [r2, #0]
 80030ac:	438b      	bics	r3, r1
 80030ae:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030b0:	0003      	movs	r3, r0
 80030b2:	2220      	movs	r2, #32
 80030b4:	3369      	adds	r3, #105	; 0x69
 80030b6:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 80030b8:	f001 f838 	bl	800412c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80030bc:	2000      	movs	r0, #0
 80030be:	bd10      	pop	{r4, pc}

080030c0 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030c0:	0002      	movs	r2, r0
{
 80030c2:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030c4:	326a      	adds	r2, #106	; 0x6a
 80030c6:	7811      	ldrb	r1, [r2, #0]
 80030c8:	6803      	ldr	r3, [r0, #0]
 80030ca:	2922      	cmp	r1, #34	; 0x22
 80030cc:	d12d      	bne.n	800312a <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 80030ce:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d0:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 80030d2:	315c      	adds	r1, #92	; 0x5c
 80030d4:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80030d6:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d8:	0164      	lsls	r4, r4, #5
 80030da:	4029      	ands	r1, r5
 80030dc:	6885      	ldr	r5, [r0, #8]
 80030de:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80030e0:	42a5      	cmp	r5, r4
 80030e2:	d11e      	bne.n	8003122 <UART_Receive_IT+0x62>
 80030e4:	6904      	ldr	r4, [r0, #16]
 80030e6:	2c00      	cmp	r4, #0
 80030e8:	d11b      	bne.n	8003122 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80030ea:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 80030ec:	3302      	adds	r3, #2
 80030ee:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80030f0:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 80030f2:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 80030f4:	315a      	adds	r1, #90	; 0x5a
 80030f6:	880b      	ldrh	r3, [r1, #0]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	800b      	strh	r3, [r1, #0]
 80030fe:	42a3      	cmp	r3, r4
 8003100:	d10d      	bne.n	800311e <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003102:	6803      	ldr	r3, [r0, #0]
 8003104:	4d0c      	ldr	r5, [pc, #48]	; (8003138 <UART_Receive_IT+0x78>)
 8003106:	6819      	ldr	r1, [r3, #0]
 8003108:	4029      	ands	r1, r5
 800310a:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310c:	6899      	ldr	r1, [r3, #8]
 800310e:	3523      	adds	r5, #35	; 0x23
 8003110:	35ff      	adds	r5, #255	; 0xff
 8003112:	43a9      	bics	r1, r5
 8003114:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003116:	2320      	movs	r3, #32
 8003118:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 800311a:	f001 f821 	bl	8004160 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 800311e:	0020      	movs	r0, r4
 8003120:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003122:	1c5c      	adds	r4, r3, #1
 8003124:	6544      	str	r4, [r0, #84]	; 0x54
 8003126:	7019      	strb	r1, [r3, #0]
 8003128:	e7e2      	b.n	80030f0 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800312a:	2208      	movs	r2, #8
 800312c:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 800312e:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003130:	430a      	orrs	r2, r1
 8003132:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8003134:	e7f3      	b.n	800311e <UART_Receive_IT+0x5e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	fffffedf 	.word	0xfffffedf

0800313c <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800313c:	210f      	movs	r1, #15
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800313e:	6802      	ldr	r2, [r0, #0]
{
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003142:	69d3      	ldr	r3, [r2, #28]
{
 8003144:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003146:	4019      	ands	r1, r3
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003148:	6810      	ldr	r0, [r2, #0]
  if (errorflags == RESET)
 800314a:	d108      	bne.n	800315e <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800314c:	2520      	movs	r5, #32
 800314e:	422b      	tst	r3, r5
 8003150:	d005      	beq.n	800315e <HAL_UART_IRQHandler+0x22>
 8003152:	4228      	tst	r0, r5
 8003154:	d003      	beq.n	800315e <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 8003156:	0020      	movs	r0, r4
 8003158:	f7ff ffb2 	bl	80030c0 <UART_Receive_IT>
}
 800315c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 800315e:	6896      	ldr	r6, [r2, #8]
  if(   (errorflags != RESET)
 8003160:	2900      	cmp	r1, #0
 8003162:	d061      	beq.n	8003228 <HAL_UART_IRQHandler+0xec>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003164:	2101      	movs	r1, #1
 8003166:	0035      	movs	r5, r6
 8003168:	400d      	ands	r5, r1
 800316a:	d103      	bne.n	8003174 <HAL_UART_IRQHandler+0x38>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800316c:	2790      	movs	r7, #144	; 0x90
 800316e:	007f      	lsls	r7, r7, #1
 8003170:	4238      	tst	r0, r7
 8003172:	d059      	beq.n	8003228 <HAL_UART_IRQHandler+0xec>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003174:	420b      	tst	r3, r1
 8003176:	d005      	beq.n	8003184 <HAL_UART_IRQHandler+0x48>
 8003178:	05c6      	lsls	r6, r0, #23
 800317a:	d503      	bpl.n	8003184 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800317c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800317e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003180:	4331      	orrs	r1, r6
 8003182:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003184:	2102      	movs	r1, #2
 8003186:	420b      	tst	r3, r1
 8003188:	d006      	beq.n	8003198 <HAL_UART_IRQHandler+0x5c>
 800318a:	2d00      	cmp	r5, #0
 800318c:	d004      	beq.n	8003198 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800318e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003190:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003192:	1849      	adds	r1, r1, r1
 8003194:	4331      	orrs	r1, r6
 8003196:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003198:	2104      	movs	r1, #4
 800319a:	420b      	tst	r3, r1
 800319c:	d006      	beq.n	80031ac <HAL_UART_IRQHandler+0x70>
 800319e:	2d00      	cmp	r5, #0
 80031a0:	d004      	beq.n	80031ac <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80031a2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031a4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80031a6:	3902      	subs	r1, #2
 80031a8:	4331      	orrs	r1, r6
 80031aa:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80031ac:	0719      	lsls	r1, r3, #28
 80031ae:	d508      	bpl.n	80031c2 <HAL_UART_IRQHandler+0x86>
 80031b0:	0681      	lsls	r1, r0, #26
 80031b2:	d401      	bmi.n	80031b8 <HAL_UART_IRQHandler+0x7c>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031b4:	2d00      	cmp	r5, #0
 80031b6:	d004      	beq.n	80031c2 <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80031b8:	2108      	movs	r1, #8
 80031ba:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031bc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80031be:	4311      	orrs	r1, r2
 80031c0:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031c2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80031c4:	2a00      	cmp	r2, #0
 80031c6:	d0c9      	beq.n	800315c <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031c8:	2220      	movs	r2, #32
 80031ca:	4213      	tst	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_UART_IRQHandler+0x9c>
 80031ce:	4210      	tst	r0, r2
 80031d0:	d002      	beq.n	80031d8 <HAL_UART_IRQHandler+0x9c>
        UART_Receive_IT(huart);
 80031d2:	0020      	movs	r0, r4
 80031d4:	f7ff ff74 	bl	80030c0 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80031d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 80031da:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80031dc:	071b      	lsls	r3, r3, #28
 80031de:	d404      	bmi.n	80031ea <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	689d      	ldr	r5, [r3, #8]
 80031e4:	2340      	movs	r3, #64	; 0x40
 80031e6:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80031e8:	d01a      	beq.n	8003220 <HAL_UART_IRQHandler+0xe4>
        UART_EndRxTransfer(huart);
 80031ea:	f7ff fc33 	bl	8002a54 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ee:	2140      	movs	r1, #64	; 0x40
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	420a      	tst	r2, r1
 80031f6:	d00f      	beq.n	8003218 <HAL_UART_IRQHandler+0xdc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031f8:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80031fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031fc:	438a      	bics	r2, r1
 80031fe:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003200:	2800      	cmp	r0, #0
 8003202:	d009      	beq.n	8003218 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_UART_IRQHandler+0x134>)
 8003206:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003208:	f7fd fd72 	bl	8000cf0 <HAL_DMA_Abort_IT>
 800320c:	2800      	cmp	r0, #0
 800320e:	d0a5      	beq.n	800315c <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003210:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003212:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003214:	4798      	blx	r3
 8003216:	e7a1      	b.n	800315c <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8003218:	0020      	movs	r0, r4
 800321a:	f000 ff89 	bl	8004130 <HAL_UART_ErrorCallback>
 800321e:	e79d      	b.n	800315c <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8003220:	f000 ff86 	bl	8004130 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003224:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003226:	e799      	b.n	800315c <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	0349      	lsls	r1, r1, #13
 800322c:	420b      	tst	r3, r1
 800322e:	d00b      	beq.n	8003248 <HAL_UART_IRQHandler+0x10c>
 8003230:	0275      	lsls	r5, r6, #9
 8003232:	d509      	bpl.n	8003248 <HAL_UART_IRQHandler+0x10c>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003234:	6211      	str	r1, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8003236:	0022      	movs	r2, r4
 8003238:	2320      	movs	r3, #32
 800323a:	3269      	adds	r2, #105	; 0x69
 800323c:	7013      	strb	r3, [r2, #0]
    HAL_UARTEx_WakeupCallback(huart);
 800323e:	0020      	movs	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8003240:	7053      	strb	r3, [r2, #1]
    HAL_UARTEx_WakeupCallback(huart);
 8003242:	f000 f817 	bl	8003274 <HAL_UARTEx_WakeupCallback>
    return;
 8003246:	e789      	b.n	800315c <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003248:	2280      	movs	r2, #128	; 0x80
 800324a:	4213      	tst	r3, r2
 800324c:	d005      	beq.n	800325a <HAL_UART_IRQHandler+0x11e>
 800324e:	4210      	tst	r0, r2
 8003250:	d003      	beq.n	800325a <HAL_UART_IRQHandler+0x11e>
    UART_Transmit_IT(huart);
 8003252:	0020      	movs	r0, r4
 8003254:	f7ff fef4 	bl	8003040 <UART_Transmit_IT>
    return;
 8003258:	e780      	b.n	800315c <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800325a:	2240      	movs	r2, #64	; 0x40
 800325c:	4213      	tst	r3, r2
 800325e:	d100      	bne.n	8003262 <HAL_UART_IRQHandler+0x126>
 8003260:	e77c      	b.n	800315c <HAL_UART_IRQHandler+0x20>
 8003262:	4210      	tst	r0, r2
 8003264:	d100      	bne.n	8003268 <HAL_UART_IRQHandler+0x12c>
 8003266:	e779      	b.n	800315c <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8003268:	0020      	movs	r0, r4
 800326a:	f7ff ff1b 	bl	80030a4 <UART_EndTransmit_IT>
    return;
 800326e:	e775      	b.n	800315c <HAL_UART_IRQHandler+0x20>
 8003270:	08002ce7 	.word	0x08002ce7

08003274 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003274:	4770      	bx	lr

08003276 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003276:	2386      	movs	r3, #134	; 0x86
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	58c3      	ldr	r3, [r0, r3]
  
  if(pdev->pClassData != NULL)
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <USBD_CDC_DataIn+0x16>
  {
    
    hcdc->TxState = 0;
 8003280:	2100      	movs	r1, #0
 8003282:	2285      	movs	r2, #133	; 0x85
 8003284:	0092      	lsls	r2, r2, #2
 8003286:	5099      	str	r1, [r3, r2]

    return USBD_OK;
 8003288:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800328a:	4770      	bx	lr
    return USBD_FAIL;
 800328c:	2002      	movs	r0, #2
 800328e:	e7fc      	b.n	800328a <USBD_CDC_DataIn+0x14>

08003290 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8003290:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003292:	2386      	movs	r3, #134	; 0x86
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	58c4      	ldr	r4, [r0, r3]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003298:	3304      	adds	r3, #4
 800329a:	58c3      	ldr	r3, [r0, r3]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00d      	beq.n	80032bc <USBD_CDC_EP0_RxReady+0x2c>
 80032a0:	2280      	movs	r2, #128	; 0x80
 80032a2:	0092      	lsls	r2, r2, #2
 80032a4:	5ca0      	ldrb	r0, [r4, r2]
 80032a6:	28ff      	cmp	r0, #255	; 0xff
 80032a8:	d008      	beq.n	80032bc <USBD_CDC_EP0_RxReady+0x2c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <USBD_CDC_EP0_RxReady+0x30>)
 80032ae:	5ca2      	ldrb	r2, [r4, r2]
 80032b0:	0021      	movs	r1, r4
 80032b2:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 80032b4:	22ff      	movs	r2, #255	; 0xff
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	54e2      	strb	r2, [r4, r3]
      
  }
  return USBD_OK;
}
 80032bc:	2000      	movs	r0, #0
 80032be:	bd10      	pop	{r4, pc}
 80032c0:	00000201 	.word	0x00000201

080032c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80032c4:	2343      	movs	r3, #67	; 0x43
 80032c6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80032c8:	4800      	ldr	r0, [pc, #0]	; (80032cc <USBD_CDC_GetFSCfgDesc+0x8>)
 80032ca:	4770      	bx	lr
 80032cc:	20000038 	.word	0x20000038

080032d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80032d0:	2343      	movs	r3, #67	; 0x43
 80032d2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80032d4:	4800      	ldr	r0, [pc, #0]	; (80032d8 <USBD_CDC_GetHSCfgDesc+0x8>)
 80032d6:	4770      	bx	lr
 80032d8:	2000007c 	.word	0x2000007c

080032dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80032dc:	2343      	movs	r3, #67	; 0x43
 80032de:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80032e0:	4800      	ldr	r0, [pc, #0]	; (80032e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80032e2:	4770      	bx	lr
 80032e4:	200000cc 	.word	0x200000cc

080032e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80032e8:	230a      	movs	r3, #10
 80032ea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80032ec:	4800      	ldr	r0, [pc, #0]	; (80032f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80032ee:	4770      	bx	lr
 80032f0:	200000c0 	.word	0x200000c0

080032f4 <USBD_CDC_DataOut>:
{      
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80032f8:	2686      	movs	r6, #134	; 0x86
 80032fa:	00b6      	lsls	r6, r6, #2
 80032fc:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80032fe:	f001 fef2 	bl	80050e6 <USBD_LL_GetRxDataSize>
 8003302:	2383      	movs	r3, #131	; 0x83
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	50e8      	str	r0, [r5, r3]
  if(pdev->pClassData != NULL)
 8003308:	59a3      	ldr	r3, [r4, r6]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800330e:	2387      	movs	r3, #135	; 0x87
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	58e3      	ldr	r3, [r4, r3]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2283      	movs	r2, #131	; 0x83
 8003318:	0092      	lsls	r2, r2, #2
 800331a:	18a9      	adds	r1, r5, r2
 800331c:	3a08      	subs	r2, #8
 800331e:	58a8      	ldr	r0, [r5, r2]
 8003320:	4798      	blx	r3
    return USBD_OK;
 8003322:	2000      	movs	r0, #0
}
 8003324:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8003326:	2002      	movs	r0, #2
 8003328:	e7fc      	b.n	8003324 <USBD_CDC_DataOut+0x30>
	...

0800332c <USBD_CDC_Setup>:
{
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	0005      	movs	r5, r0
 8003330:	000c      	movs	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003332:	2386      	movs	r3, #134	; 0x86
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	58c6      	ldr	r6, [r0, r3]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003338:	7809      	ldrb	r1, [r1, #0]
 800333a:	3bb9      	subs	r3, #185	; 0xb9
 800333c:	3bff      	subs	r3, #255	; 0xff
 800333e:	400b      	ands	r3, r1
 8003340:	d029      	beq.n	8003396 <USBD_CDC_Setup+0x6a>
 8003342:	2b20      	cmp	r3, #32
 8003344:	d12a      	bne.n	800339c <USBD_CDC_Setup+0x70>
    if (req->wLength)
 8003346:	88e2      	ldrh	r2, [r4, #6]
 8003348:	2a00      	cmp	r2, #0
 800334a:	d01b      	beq.n	8003384 <USBD_CDC_Setup+0x58>
      if (req->bmRequest & 0x80)
 800334c:	b249      	sxtb	r1, r1
 800334e:	2900      	cmp	r1, #0
 8003350:	db0b      	blt.n	800336a <USBD_CDC_Setup+0x3e>
        hcdc->CmdOpCode = req->bRequest;
 8003352:	7862      	ldrb	r2, [r4, #1]
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	54f2      	strb	r2, [r6, r3]
        hcdc->CmdLength = req->wLength;
 800335a:	88e2      	ldrh	r2, [r4, #6]
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <USBD_CDC_Setup+0x80>)
 800335e:	54f2      	strb	r2, [r6, r3]
        USBD_CtlPrepareRx (pdev, 
 8003360:	88e2      	ldrh	r2, [r4, #6]
 8003362:	0031      	movs	r1, r6
 8003364:	f000 fd1e 	bl	8003da4 <USBD_CtlPrepareRx>
 8003368:	e018      	b.n	800339c <USBD_CDC_Setup+0x70>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800336a:	33fd      	adds	r3, #253	; 0xfd
 800336c:	33ff      	adds	r3, #255	; 0xff
 800336e:	58c3      	ldr	r3, [r0, r3]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	7860      	ldrb	r0, [r4, #1]
 8003374:	0031      	movs	r1, r6
 8003376:	4798      	blx	r3
          USBD_CtlSendData (pdev, 
 8003378:	88e2      	ldrh	r2, [r4, #6]
 800337a:	0031      	movs	r1, r6
 800337c:	0028      	movs	r0, r5
 800337e:	f000 fcfb 	bl	8003d78 <USBD_CtlSendData>
 8003382:	e00b      	b.n	800339c <USBD_CDC_Setup+0x70>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003384:	2387      	movs	r3, #135	; 0x87
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	58c3      	ldr	r3, [r0, r3]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	7860      	ldrb	r0, [r4, #1]
 800338e:	2200      	movs	r2, #0
 8003390:	0021      	movs	r1, r4
 8003392:	4798      	blx	r3
 8003394:	e002      	b.n	800339c <USBD_CDC_Setup+0x70>
    switch (req->bRequest)
 8003396:	7863      	ldrb	r3, [r4, #1]
 8003398:	2b0a      	cmp	r3, #10
 800339a:	d001      	beq.n	80033a0 <USBD_CDC_Setup+0x74>
}
 800339c:	2000      	movs	r0, #0
 800339e:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlSendData (pdev,
 80033a0:	2201      	movs	r2, #1
 80033a2:	4903      	ldr	r1, [pc, #12]	; (80033b0 <USBD_CDC_Setup+0x84>)
 80033a4:	f000 fce8 	bl	8003d78 <USBD_CtlSendData>
      break;
 80033a8:	e7f8      	b.n	800339c <USBD_CDC_Setup+0x70>
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	00000201 	.word	0x00000201
 80033b0:	2000017c 	.word	0x2000017c

080033b4 <USBD_CDC_DeInit>:
{
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	0004      	movs	r4, r0
  USBD_LL_CloseEP(pdev,
 80033b8:	2181      	movs	r1, #129	; 0x81
 80033ba:	f001 fe1a 	bl	8004ff2 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80033be:	2101      	movs	r1, #1
 80033c0:	0020      	movs	r0, r4
 80033c2:	f001 fe16 	bl	8004ff2 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80033c6:	2182      	movs	r1, #130	; 0x82
 80033c8:	0020      	movs	r0, r4
 80033ca:	f001 fe12 	bl	8004ff2 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80033ce:	2386      	movs	r3, #134	; 0x86
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	58e3      	ldr	r3, [r4, r3]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00b      	beq.n	80033f0 <USBD_CDC_DeInit+0x3c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80033d8:	2387      	movs	r3, #135	; 0x87
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	58e3      	ldr	r3, [r4, r3]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80033e2:	2586      	movs	r5, #134	; 0x86
 80033e4:	00ad      	lsls	r5, r5, #2
 80033e6:	5960      	ldr	r0, [r4, r5]
 80033e8:	f001 fe88 	bl	80050fc <USBD_static_free>
    pdev->pClassData = NULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	5163      	str	r3, [r4, r5]
}
 80033f0:	2000      	movs	r0, #0
 80033f2:	bd70      	pop	{r4, r5, r6, pc}

080033f4 <USBD_CDC_Init>:
{
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	0004      	movs	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80033f8:	7c03      	ldrb	r3, [r0, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d134      	bne.n	8003468 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev,
 80033fe:	2580      	movs	r5, #128	; 0x80
 8003400:	00ad      	lsls	r5, r5, #2
 8003402:	002b      	movs	r3, r5
 8003404:	2202      	movs	r2, #2
 8003406:	2181      	movs	r1, #129	; 0x81
 8003408:	f001 fde0 	bl	8004fcc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800340c:	002b      	movs	r3, r5
 800340e:	2202      	movs	r2, #2
 8003410:	2101      	movs	r1, #1
 8003412:	0020      	movs	r0, r4
 8003414:	f001 fdda 	bl	8004fcc <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8003418:	2308      	movs	r3, #8
 800341a:	2203      	movs	r2, #3
 800341c:	2182      	movs	r1, #130	; 0x82
 800341e:	0020      	movs	r0, r4
 8003420:	f001 fdd4 	bl	8004fcc <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003424:	2087      	movs	r0, #135	; 0x87
 8003426:	0080      	lsls	r0, r0, #2
 8003428:	f001 fe64 	bl	80050f4 <USBD_static_malloc>
 800342c:	0005      	movs	r5, r0
 800342e:	2386      	movs	r3, #134	; 0x86
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	50e0      	str	r0, [r4, r3]
  if(pdev->pClassData == NULL)
 8003434:	2800      	cmp	r0, #0
 8003436:	d02d      	beq.n	8003494 <USBD_CDC_Init+0xa0>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003438:	3304      	adds	r3, #4
 800343a:	58e3      	ldr	r3, [r4, r3]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4798      	blx	r3
    hcdc->TxState =0;
 8003440:	2300      	movs	r3, #0
 8003442:	2285      	movs	r2, #133	; 0x85
 8003444:	0092      	lsls	r2, r2, #2
 8003446:	50ab      	str	r3, [r5, r2]
    hcdc->RxState =0;
 8003448:	3204      	adds	r2, #4
 800344a:	50ab      	str	r3, [r5, r2]
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800344c:	7c23      	ldrb	r3, [r4, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d016      	beq.n	8003480 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev,
 8003452:	2381      	movs	r3, #129	; 0x81
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	58ea      	ldr	r2, [r5, r3]
 8003458:	3bc5      	subs	r3, #197	; 0xc5
 800345a:	3bff      	subs	r3, #255	; 0xff
 800345c:	2101      	movs	r1, #1
 800345e:	0020      	movs	r0, r4
 8003460:	f001 fe31 	bl	80050c6 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003464:	2000      	movs	r0, #0
}
 8003466:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev,
 8003468:	2340      	movs	r3, #64	; 0x40
 800346a:	2202      	movs	r2, #2
 800346c:	2181      	movs	r1, #129	; 0x81
 800346e:	f001 fdad 	bl	8004fcc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003472:	2340      	movs	r3, #64	; 0x40
 8003474:	2202      	movs	r2, #2
 8003476:	2101      	movs	r1, #1
 8003478:	0020      	movs	r0, r4
 800347a:	f001 fda7 	bl	8004fcc <USBD_LL_OpenEP>
 800347e:	e7cb      	b.n	8003418 <USBD_CDC_Init+0x24>
      USBD_LL_PrepareReceive(pdev,
 8003480:	2381      	movs	r3, #129	; 0x81
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	58ea      	ldr	r2, [r5, r3]
 8003486:	3b04      	subs	r3, #4
 8003488:	2101      	movs	r1, #1
 800348a:	0020      	movs	r0, r4
 800348c:	f001 fe1b 	bl	80050c6 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003490:	2000      	movs	r0, #0
 8003492:	e7e8      	b.n	8003466 <USBD_CDC_Init+0x72>
    ret = 1; 
 8003494:	2001      	movs	r0, #1
 8003496:	e7e6      	b.n	8003466 <USBD_CDC_Init+0x72>

08003498 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8003498:	2900      	cmp	r1, #0
 800349a:	d004      	beq.n	80034a6 <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData= fops;
 800349c:	2387      	movs	r3, #135	; 0x87
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;    
 80034a2:	2000      	movs	r0, #0
  }
  
  return ret;
}
 80034a4:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80034a6:	2002      	movs	r0, #2
 80034a8:	e7fc      	b.n	80034a4 <USBD_CDC_RegisterInterface+0xc>

080034aa <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80034aa:	2386      	movs	r3, #134	; 0x86
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	58c3      	ldr	r3, [r0, r3]
  
  hcdc->TxBuffer = pbuff;
 80034b0:	2082      	movs	r0, #130	; 0x82
 80034b2:	0080      	lsls	r0, r0, #2
 80034b4:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;  
 80034b6:	2184      	movs	r1, #132	; 0x84
 80034b8:	0089      	lsls	r1, r1, #2
 80034ba:	505a      	str	r2, [r3, r1]
  
  return USBD_OK;  
}
 80034bc:	2000      	movs	r0, #0
 80034be:	4770      	bx	lr

080034c0 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80034c0:	2386      	movs	r3, #134	; 0x86
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	58c2      	ldr	r2, [r0, r3]
  
  hcdc->RxBuffer = pbuff;
 80034c6:	3b14      	subs	r3, #20
 80034c8:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;
}
 80034ca:	2000      	movs	r0, #0
 80034cc:	4770      	bx	lr

080034ce <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 80034ce:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80034d0:	2386      	movs	r3, #134	; 0x86
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	58c2      	ldr	r2, [r0, r3]
  
  if(pdev->pClassData != NULL)
 80034d6:	2a00      	cmp	r2, #0
 80034d8:	d014      	beq.n	8003504 <USBD_CDC_TransmitPacket+0x36>
  {
    if(hcdc->TxState == 0)
 80034da:	3b04      	subs	r3, #4
 80034dc:	58d3      	ldr	r3, [r2, r3]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <USBD_CDC_TransmitPacket+0x18>
      
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80034e2:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80034e4:	bd10      	pop	{r4, pc}
      hcdc->TxState = 1;
 80034e6:	2101      	movs	r1, #1
 80034e8:	2385      	movs	r3, #133	; 0x85
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	50d1      	str	r1, [r2, r3]
      USBD_LL_Transmit(pdev,
 80034ee:	3b04      	subs	r3, #4
 80034f0:	5ad3      	ldrh	r3, [r2, r3]
 80034f2:	2182      	movs	r1, #130	; 0x82
 80034f4:	0089      	lsls	r1, r1, #2
 80034f6:	5852      	ldr	r2, [r2, r1]
 80034f8:	3988      	subs	r1, #136	; 0x88
 80034fa:	39ff      	subs	r1, #255	; 0xff
 80034fc:	f001 fdd3 	bl	80050a6 <USBD_LL_Transmit>
      return USBD_OK;
 8003500:	2000      	movs	r0, #0
 8003502:	e7ef      	b.n	80034e4 <USBD_CDC_TransmitPacket+0x16>
    return USBD_FAIL;
 8003504:	2002      	movs	r0, #2
 8003506:	e7ed      	b.n	80034e4 <USBD_CDC_TransmitPacket+0x16>

08003508 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8003508:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800350a:	2386      	movs	r3, #134	; 0x86
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	58c3      	ldr	r3, [r0, r3]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <USBD_CDC_ReceivePacket+0x38>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003514:	7c02      	ldrb	r2, [r0, #16]
 8003516:	2a00      	cmp	r2, #0
 8003518:	d008      	beq.n	800352c <USBD_CDC_ReceivePacket+0x24>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800351a:	2281      	movs	r2, #129	; 0x81
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	589a      	ldr	r2, [r3, r2]
 8003520:	2340      	movs	r3, #64	; 0x40
 8003522:	2101      	movs	r1, #1
 8003524:	f001 fdcf 	bl	80050c6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003528:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800352a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800352c:	2281      	movs	r2, #129	; 0x81
 800352e:	0092      	lsls	r2, r2, #2
 8003530:	589a      	ldr	r2, [r3, r2]
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	2101      	movs	r1, #1
 8003538:	f001 fdc5 	bl	80050c6 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800353c:	2000      	movs	r0, #0
 800353e:	e7f4      	b.n	800352a <USBD_CDC_ReceivePacket+0x22>
    return USBD_FAIL;
 8003540:	2002      	movs	r0, #2
 8003542:	e7f2      	b.n	800352a <USBD_CDC_ReceivePacket+0x22>

08003544 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003544:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003546:	2800      	cmp	r0, #0
 8003548:	d016      	beq.n	8003578 <USBD_Init+0x34>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800354a:	2385      	movs	r3, #133	; 0x85
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	58c3      	ldr	r3, [r0, r3]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <USBD_Init+0x18>
  {
    pdev->pClass = NULL;
 8003554:	2400      	movs	r4, #0
 8003556:	2385      	movs	r3, #133	; 0x85
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	50c4      	str	r4, [r0, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800355c:	2900      	cmp	r1, #0
 800355e:	d002      	beq.n	8003566 <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 8003560:	2384      	movs	r3, #132	; 0x84
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	50c1      	str	r1, [r0, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003566:	2101      	movs	r1, #1
 8003568:	23fe      	movs	r3, #254	; 0xfe
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 800356e:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003570:	f001 fcd4 	bl	8004f1c <USBD_LL_Init>
  
  return USBD_OK; 
 8003574:	2000      	movs	r0, #0
}
 8003576:	bd10      	pop	{r4, pc}
    return USBD_FAIL; 
 8003578:	2002      	movs	r0, #2
 800357a:	e7fc      	b.n	8003576 <USBD_Init+0x32>

0800357c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800357c:	2900      	cmp	r1, #0
 800357e:	d004      	beq.n	800358a <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003580:	2385      	movs	r3, #133	; 0x85
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8003586:	2000      	movs	r0, #0
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
  }
  
  return status;
}
 8003588:	4770      	bx	lr
    status = USBD_FAIL; 
 800358a:	2002      	movs	r0, #2
 800358c:	e7fc      	b.n	8003588 <USBD_RegisterClass+0xc>

0800358e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800358e:	b510      	push	{r4, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003590:	f001 fd0c 	bl	8004fac <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003594:	2000      	movs	r0, #0
 8003596:	bd10      	pop	{r4, pc}

08003598 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003598:	b510      	push	{r4, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800359a:	2385      	movs	r3, #133	; 0x85
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	58c3      	ldr	r3, [r0, r3]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4798      	blx	r3
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d003      	beq.n	80035b4 <USBD_SetClassConfig+0x1c>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80035ac:	2002      	movs	r0, #2
 80035ae:	e000      	b.n	80035b2 <USBD_SetClassConfig+0x1a>
 80035b0:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80035b2:	bd10      	pop	{r4, pc}
      ret = USBD_OK;
 80035b4:	2000      	movs	r0, #0
 80035b6:	e7fc      	b.n	80035b2 <USBD_SetClassConfig+0x1a>

080035b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80035b8:	b510      	push	{r4, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80035ba:	2385      	movs	r3, #133	; 0x85
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	58c3      	ldr	r3, [r0, r3]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4798      	blx	r3
  return USBD_OK;
}
 80035c4:	2000      	movs	r0, #0
 80035c6:	bd10      	pop	{r4, pc}

080035c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	0004      	movs	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80035cc:	2382      	movs	r3, #130	; 0x82
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	18c5      	adds	r5, r0, r3
 80035d2:	0028      	movs	r0, r5
 80035d4:	f000 f92f 	bl	8003836 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80035d8:	2201      	movs	r2, #1
 80035da:	23fa      	movs	r3, #250	; 0xfa
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	50e2      	str	r2, [r4, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <USBD_LL_SetupStage+0x64>)
 80035e2:	5ae2      	ldrh	r2, [r4, r3]
 80035e4:	3b16      	subs	r3, #22
 80035e6:	50e2      	str	r2, [r4, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 80035e8:	3310      	adds	r3, #16
 80035ea:	5ce1      	ldrb	r1, [r4, r3]
 80035ec:	3bea      	subs	r3, #234	; 0xea
 80035ee:	3bff      	subs	r3, #255	; 0xff
 80035f0:	400b      	ands	r3, r1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d00f      	beq.n	8003616 <USBD_LL_SetupStage+0x4e>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <USBD_LL_SetupStage+0x42>
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d010      	beq.n	8003620 <USBD_LL_SetupStage+0x58>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80035fe:	237f      	movs	r3, #127	; 0x7f
 8003600:	4399      	bics	r1, r3
 8003602:	0020      	movs	r0, r4
 8003604:	f001 fd05 	bl	8005012 <USBD_LL_StallEP>
    break;
 8003608:	e003      	b.n	8003612 <USBD_LL_SetupStage+0x4a>
    USBD_StdDevReq (pdev, &pdev->request);
 800360a:	0029      	movs	r1, r5
 800360c:	0020      	movs	r0, r4
 800360e:	f000 fab7 	bl	8003b80 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003612:	2000      	movs	r0, #0
 8003614:	bd70      	pop	{r4, r5, r6, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003616:	0029      	movs	r1, r5
 8003618:	0020      	movs	r0, r4
 800361a:	f000 fad5 	bl	8003bc8 <USBD_StdItfReq>
    break;
 800361e:	e7f8      	b.n	8003612 <USBD_LL_SetupStage+0x4a>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003620:	0029      	movs	r1, r5
 8003622:	0020      	movs	r0, r4
 8003624:	f000 faee 	bl	8003c04 <USBD_StdEPReq>
    break;
 8003628:	e7f3      	b.n	8003612 <USBD_LL_SetupStage+0x4a>
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	0000020e 	.word	0x0000020e

08003630 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003630:	b510      	push	{r4, lr}
 8003632:	0004      	movs	r4, r0
 8003634:	0013      	movs	r3, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003636:	2900      	cmp	r1, #0
 8003638:	d128      	bne.n	800368c <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800363a:	22fa      	movs	r2, #250	; 0xfa
 800363c:	0052      	lsls	r2, r2, #1
 800363e:	5882      	ldr	r2, [r0, r2]
 8003640:	2a03      	cmp	r2, #3
 8003642:	d12e      	bne.n	80036a2 <USBD_LL_DataOutStage+0x72>
    {
      if(pep->rem_length > pep->maxpacket)
 8003644:	1d42      	adds	r2, r0, #5
 8003646:	32ff      	adds	r2, #255	; 0xff
 8003648:	6891      	ldr	r1, [r2, #8]
 800364a:	68d2      	ldr	r2, [r2, #12]
 800364c:	4291      	cmp	r1, r2
 800364e:	d80e      	bhi.n	800366e <USBD_LL_DataOutStage+0x3e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003650:	2385      	movs	r3, #133	; 0x85
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	58c3      	ldr	r3, [r0, r3]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d004      	beq.n	8003666 <USBD_LL_DataOutStage+0x36>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800365c:	22fe      	movs	r2, #254	; 0xfe
 800365e:	0052      	lsls	r2, r2, #1
 8003660:	5c82      	ldrb	r2, [r0, r2]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003662:	2a03      	cmp	r2, #3
 8003664:	d010      	beq.n	8003688 <USBD_LL_DataOutStage+0x58>
        {
          pdev->pClass->EP0_RxReady(pdev); 
        }
        USBD_CtlSendStatus(pdev);
 8003666:	0020      	movs	r0, r4
 8003668:	f000 fbb4 	bl	8003dd4 <USBD_CtlSendStatus>
 800366c:	e019      	b.n	80036a2 <USBD_LL_DataOutStage+0x72>
        pep->rem_length -=  pep->maxpacket;
 800366e:	1a89      	subs	r1, r1, r2
 8003670:	3005      	adds	r0, #5
 8003672:	30ff      	adds	r0, #255	; 0xff
 8003674:	6081      	str	r1, [r0, #8]
                            MIN(pep->rem_length ,pep->maxpacket));
 8003676:	428a      	cmp	r2, r1
 8003678:	d900      	bls.n	800367c <USBD_LL_DataOutStage+0x4c>
 800367a:	000a      	movs	r2, r1
        USBD_CtlContinueRx (pdev, 
 800367c:	b292      	uxth	r2, r2
 800367e:	0019      	movs	r1, r3
 8003680:	0020      	movs	r0, r4
 8003682:	f000 fb9f 	bl	8003dc4 <USBD_CtlContinueRx>
 8003686:	e00c      	b.n	80036a2 <USBD_LL_DataOutStage+0x72>
          pdev->pClass->EP0_RxReady(pdev); 
 8003688:	4798      	blx	r3
 800368a:	e7ec      	b.n	8003666 <USBD_LL_DataOutStage+0x36>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800368c:	2385      	movs	r3, #133	; 0x85
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	58c3      	ldr	r3, [r0, r3]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d004      	beq.n	80036a2 <USBD_LL_DataOutStage+0x72>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003698:	22fe      	movs	r2, #254	; 0xfe
 800369a:	0052      	lsls	r2, r2, #1
 800369c:	5c82      	ldrb	r2, [r0, r2]
  else if((pdev->pClass->DataOut != NULL)&&
 800369e:	2a03      	cmp	r2, #3
 80036a0:	d001      	beq.n	80036a6 <USBD_LL_DataOutStage+0x76>
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80036a2:	2000      	movs	r0, #0
 80036a4:	bd10      	pop	{r4, pc}
    pdev->pClass->DataOut(pdev, epnum); 
 80036a6:	4798      	blx	r3
 80036a8:	e7fb      	b.n	80036a2 <USBD_LL_DataOutStage+0x72>

080036aa <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80036aa:	b570      	push	{r4, r5, r6, lr}
 80036ac:	0004      	movs	r4, r0
 80036ae:	0013      	movs	r3, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80036b0:	2900      	cmp	r1, #0
 80036b2:	d14f      	bne.n	8003754 <USBD_LL_DataInStage+0xaa>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80036b4:	22fa      	movs	r2, #250	; 0xfa
 80036b6:	0052      	lsls	r2, r2, #1
 80036b8:	5882      	ldr	r2, [r0, r2]
 80036ba:	2a02      	cmp	r2, #2
 80036bc:	d006      	beq.n	80036cc <USBD_LL_DataInStage+0x22>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	5ce3      	ldrb	r3, [r4, r3]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d040      	beq.n	800374a <USBD_LL_DataInStage+0xa0>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80036c8:	2000      	movs	r0, #0
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 80036cc:	69c2      	ldr	r2, [r0, #28]
 80036ce:	6a05      	ldr	r5, [r0, #32]
 80036d0:	42aa      	cmp	r2, r5
 80036d2:	d81c      	bhi.n	800370e <USBD_LL_DataInStage+0x64>
        if((pep->total_length % pep->maxpacket == 0) &&
 80036d4:	6986      	ldr	r6, [r0, #24]
 80036d6:	0029      	movs	r1, r5
 80036d8:	0030      	movs	r0, r6
 80036da:	f7fc fdb7 	bl	800024c <__aeabi_uidivmod>
 80036de:	2900      	cmp	r1, #0
 80036e0:	d106      	bne.n	80036f0 <USBD_LL_DataInStage+0x46>
 80036e2:	42b5      	cmp	r5, r6
 80036e4:	d804      	bhi.n	80036f0 <USBD_LL_DataInStage+0x46>
             (pep->total_length < pdev->ep0_data_len ))
 80036e6:	23fc      	movs	r3, #252	; 0xfc
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	58e3      	ldr	r3, [r4, r3]
           (pep->total_length >= pep->maxpacket) &&
 80036ec:	429e      	cmp	r6, r3
 80036ee:	d31b      	bcc.n	8003728 <USBD_LL_DataInStage+0x7e>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80036f0:	2385      	movs	r3, #133	; 0x85
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	58e3      	ldr	r3, [r4, r3]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80036fc:	22fe      	movs	r2, #254	; 0xfe
 80036fe:	0052      	lsls	r2, r2, #1
 8003700:	5ca2      	ldrb	r2, [r4, r2]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003702:	2a03      	cmp	r2, #3
 8003704:	d01e      	beq.n	8003744 <USBD_LL_DataInStage+0x9a>
          USBD_CtlReceiveStatus(pdev);
 8003706:	0020      	movs	r0, r4
 8003708:	f000 fb70 	bl	8003dec <USBD_CtlReceiveStatus>
 800370c:	e7d7      	b.n	80036be <USBD_LL_DataInStage+0x14>
        pep->rem_length -=  pep->maxpacket;
 800370e:	1b52      	subs	r2, r2, r5
 8003710:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8003712:	b292      	uxth	r2, r2
 8003714:	0019      	movs	r1, r3
 8003716:	f000 fb3d 	bl	8003d94 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 800371a:	2300      	movs	r3, #0
 800371c:	2200      	movs	r2, #0
 800371e:	2100      	movs	r1, #0
 8003720:	0020      	movs	r0, r4
 8003722:	f001 fcd0 	bl	80050c6 <USBD_LL_PrepareReceive>
 8003726:	e7ca      	b.n	80036be <USBD_LL_DataInStage+0x14>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	0020      	movs	r0, r4
 800372c:	f000 fb32 	bl	8003d94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003730:	2200      	movs	r2, #0
 8003732:	23fc      	movs	r3, #252	; 0xfc
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	50e2      	str	r2, [r4, r3]
        USBD_LL_PrepareReceive (pdev,
 8003738:	2300      	movs	r3, #0
 800373a:	2100      	movs	r1, #0
 800373c:	0020      	movs	r0, r4
 800373e:	f001 fcc2 	bl	80050c6 <USBD_LL_PrepareReceive>
 8003742:	e7bc      	b.n	80036be <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev); 
 8003744:	0020      	movs	r0, r4
 8003746:	4798      	blx	r3
 8003748:	e7dd      	b.n	8003706 <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0;
 800374a:	2200      	movs	r2, #0
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	54e2      	strb	r2, [r4, r3]
 8003752:	e7b9      	b.n	80036c8 <USBD_LL_DataInStage+0x1e>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003754:	2385      	movs	r3, #133	; 0x85
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	58c3      	ldr	r3, [r0, r3]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0b3      	beq.n	80036c8 <USBD_LL_DataInStage+0x1e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003760:	22fe      	movs	r2, #254	; 0xfe
 8003762:	0052      	lsls	r2, r2, #1
 8003764:	5c82      	ldrb	r2, [r0, r2]
  else if((pdev->pClass->DataIn != NULL)&& 
 8003766:	2a03      	cmp	r2, #3
 8003768:	d1ae      	bne.n	80036c8 <USBD_LL_DataInStage+0x1e>
    pdev->pClass->DataIn(pdev, epnum); 
 800376a:	4798      	blx	r3
 800376c:	e7ac      	b.n	80036c8 <USBD_LL_DataInStage+0x1e>

0800376e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800376e:	b570      	push	{r4, r5, r6, lr}
 8003770:	0004      	movs	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003772:	2340      	movs	r3, #64	; 0x40
 8003774:	2200      	movs	r2, #0
 8003776:	2100      	movs	r1, #0
 8003778:	f001 fc28 	bl	8004fcc <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800377c:	2540      	movs	r5, #64	; 0x40
 800377e:	2388      	movs	r3, #136	; 0x88
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	50e5      	str	r5, [r4, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003784:	3bd0      	subs	r3, #208	; 0xd0
 8003786:	2200      	movs	r2, #0
 8003788:	2180      	movs	r1, #128	; 0x80
 800378a:	0020      	movs	r0, r4
 800378c:	f001 fc1e 	bl	8004fcc <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003790:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003792:	2201      	movs	r2, #1
 8003794:	23fe      	movs	r3, #254	; 0xfe
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	54e2      	strb	r2, [r4, r3]
  
  if (pdev->pClassData) 
 800379a:	331c      	adds	r3, #28
 800379c:	58e3      	ldr	r3, [r4, r3]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d006      	beq.n	80037b0 <USBD_LL_Reset+0x42>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80037a2:	2385      	movs	r3, #133	; 0x85
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	58e3      	ldr	r3, [r4, r3]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	7921      	ldrb	r1, [r4, #4]
 80037ac:	0020      	movs	r0, r4
 80037ae:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80037b0:	2000      	movs	r0, #0
 80037b2:	bd70      	pop	{r4, r5, r6, pc}

080037b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80037b4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80037b6:	2000      	movs	r0, #0
 80037b8:	4770      	bx	lr

080037ba <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80037ba:	23fe      	movs	r3, #254	; 0xfe
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	5cc1      	ldrb	r1, [r0, r3]
 80037c0:	22fe      	movs	r2, #254	; 0xfe
 80037c2:	32ff      	adds	r2, #255	; 0xff
 80037c4:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80037c6:	3afa      	subs	r2, #250	; 0xfa
 80037c8:	3aff      	subs	r2, #255	; 0xff
 80037ca:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 80037cc:	2000      	movs	r0, #0
 80037ce:	4770      	bx	lr

080037d0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80037d0:	23fe      	movs	r3, #254	; 0xfe
 80037d2:	33ff      	adds	r3, #255	; 0xff
 80037d4:	5cc2      	ldrb	r2, [r0, r3]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 80037da:	2000      	movs	r0, #0
 80037dc:	4770      	bx	lr

080037de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80037de:	b510      	push	{r4, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80037e0:	23fe      	movs	r3, #254	; 0xfe
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	5cc3      	ldrb	r3, [r0, r3]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d001      	beq.n	80037ee <USBD_LL_SOF+0x10>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 80037ea:	2000      	movs	r0, #0
 80037ec:	bd10      	pop	{r4, pc}
    if(pdev->pClass->SOF != NULL)
 80037ee:	2385      	movs	r3, #133	; 0x85
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	58c3      	ldr	r3, [r0, r3]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f7      	beq.n	80037ea <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 80037fa:	4798      	blx	r3
 80037fc:	e7f5      	b.n	80037ea <USBD_LL_SOF+0xc>

080037fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80037fe:	0003      	movs	r3, r0
    uint8_t  len = 0;
 8003800:	2000      	movs	r0, #0

    while (*buf != '\0') 
 8003802:	e002      	b.n	800380a <USBD_GetLen+0xc>
    {
        len++;
 8003804:	3001      	adds	r0, #1
 8003806:	b2c0      	uxtb	r0, r0
        buf++;
 8003808:	3301      	adds	r3, #1
    while (*buf != '\0') 
 800380a:	781a      	ldrb	r2, [r3, #0]
 800380c:	2a00      	cmp	r2, #0
 800380e:	d1f9      	bne.n	8003804 <USBD_GetLen+0x6>
    }

    return len;
}
 8003810:	4770      	bx	lr

08003812 <USBD_SetFeature>:
{
 8003812:	b510      	push	{r4, lr}
 8003814:	0004      	movs	r4, r0
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003816:	884b      	ldrh	r3, [r1, #2]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d000      	beq.n	800381e <USBD_SetFeature+0xc>
}
 800381c:	bd10      	pop	{r4, pc}
    pdev->dev_remote_wakeup = 1;  
 800381e:	2201      	movs	r2, #1
 8003820:	2381      	movs	r3, #129	; 0x81
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	50c2      	str	r2, [r0, r3]
    pdev->pClass->Setup (pdev, req);   
 8003826:	3310      	adds	r3, #16
 8003828:	58c3      	ldr	r3, [r0, r3]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800382e:	0020      	movs	r0, r4
 8003830:	f000 fad0 	bl	8003dd4 <USBD_CtlSendStatus>
}
 8003834:	e7f2      	b.n	800381c <USBD_SetFeature+0xa>

08003836 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003836:	780b      	ldrb	r3, [r1, #0]
 8003838:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800383a:	784b      	ldrb	r3, [r1, #1]
 800383c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800383e:	788b      	ldrb	r3, [r1, #2]
 8003840:	78ca      	ldrb	r2, [r1, #3]
 8003842:	0212      	lsls	r2, r2, #8
 8003844:	189b      	adds	r3, r3, r2
 8003846:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003848:	790b      	ldrb	r3, [r1, #4]
 800384a:	794a      	ldrb	r2, [r1, #5]
 800384c:	0212      	lsls	r2, r2, #8
 800384e:	189b      	adds	r3, r3, r2
 8003850:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003852:	798b      	ldrb	r3, [r1, #6]
 8003854:	79ca      	ldrb	r2, [r1, #7]
 8003856:	0212      	lsls	r2, r2, #8
 8003858:	189b      	adds	r3, r3, r2
 800385a:	80c3      	strh	r3, [r0, #6]
}
 800385c:	4770      	bx	lr

0800385e <USBD_CtlError>:
{
 800385e:	b510      	push	{r4, lr}
 8003860:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	f001 fbd5 	bl	8005012 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003868:	2100      	movs	r1, #0
 800386a:	0020      	movs	r0, r4
 800386c:	f001 fbd1 	bl	8005012 <USBD_LL_StallEP>
}
 8003870:	bd10      	pop	{r4, pc}
	...

08003874 <USBD_GetDescriptor>:
{
 8003874:	b530      	push	{r4, r5, lr}
 8003876:	b083      	sub	sp, #12
 8003878:	0004      	movs	r4, r0
 800387a:	000d      	movs	r5, r1
  switch (req->wValue >> 8)
 800387c:	884a      	ldrh	r2, [r1, #2]
 800387e:	0a13      	lsrs	r3, r2, #8
 8003880:	2b07      	cmp	r3, #7
 8003882:	d900      	bls.n	8003886 <USBD_GetDescriptor+0x12>
 8003884:	e08e      	b.n	80039a4 <USBD_GetDescriptor+0x130>
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	494f      	ldr	r1, [pc, #316]	; (80039c8 <USBD_GetDescriptor+0x154>)
 800388a:	58cb      	ldr	r3, [r1, r3]
 800388c:	469f      	mov	pc, r3
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800388e:	2384      	movs	r3, #132	; 0x84
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	58c3      	ldr	r3, [r0, r3]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	7c00      	ldrb	r0, [r0, #16]
 8003898:	466a      	mov	r2, sp
 800389a:	1d91      	adds	r1, r2, #6
 800389c:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800389e:	466b      	mov	r3, sp
 80038a0:	3306      	adds	r3, #6
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <USBD_GetDescriptor+0x3c>
 80038a8:	88ea      	ldrh	r2, [r5, #6]
 80038aa:	2a00      	cmp	r2, #0
 80038ac:	d000      	beq.n	80038b0 <USBD_GetDescriptor+0x3c>
 80038ae:	e07e      	b.n	80039ae <USBD_GetDescriptor+0x13a>
}
 80038b0:	b003      	add	sp, #12
 80038b2:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80038b4:	7c03      	ldrb	r3, [r0, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <USBD_GetDescriptor+0x5a>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80038ba:	2385      	movs	r3, #133	; 0x85
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	58c3      	ldr	r3, [r0, r3]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	466a      	mov	r2, sp
 80038c4:	1d90      	adds	r0, r2, #6
 80038c6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80038c8:	2302      	movs	r3, #2
 80038ca:	7043      	strb	r3, [r0, #1]
 80038cc:	e7e7      	b.n	800389e <USBD_GetDescriptor+0x2a>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80038ce:	2385      	movs	r3, #133	; 0x85
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	58c3      	ldr	r3, [r0, r3]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	466a      	mov	r2, sp
 80038d8:	1d90      	adds	r0, r2, #6
 80038da:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80038dc:	2302      	movs	r3, #2
 80038de:	7043      	strb	r3, [r0, #1]
 80038e0:	e7dd      	b.n	800389e <USBD_GetDescriptor+0x2a>
    switch ((uint8_t)(req->wValue))
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	2a05      	cmp	r2, #5
 80038e6:	d839      	bhi.n	800395c <USBD_GetDescriptor+0xe8>
 80038e8:	0092      	lsls	r2, r2, #2
 80038ea:	4b38      	ldr	r3, [pc, #224]	; (80039cc <USBD_GetDescriptor+0x158>)
 80038ec:	589b      	ldr	r3, [r3, r2]
 80038ee:	469f      	mov	pc, r3
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80038f0:	2384      	movs	r3, #132	; 0x84
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	58c3      	ldr	r3, [r0, r3]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	7c00      	ldrb	r0, [r0, #16]
 80038fa:	466a      	mov	r2, sp
 80038fc:	1d91      	adds	r1, r2, #6
 80038fe:	4798      	blx	r3
      break;
 8003900:	e7cd      	b.n	800389e <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003902:	2384      	movs	r3, #132	; 0x84
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	58c3      	ldr	r3, [r0, r3]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	7c00      	ldrb	r0, [r0, #16]
 800390c:	466a      	mov	r2, sp
 800390e:	1d91      	adds	r1, r2, #6
 8003910:	4798      	blx	r3
      break;
 8003912:	e7c4      	b.n	800389e <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003914:	2384      	movs	r3, #132	; 0x84
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	58c3      	ldr	r3, [r0, r3]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	7c00      	ldrb	r0, [r0, #16]
 800391e:	466a      	mov	r2, sp
 8003920:	1d91      	adds	r1, r2, #6
 8003922:	4798      	blx	r3
      break;
 8003924:	e7bb      	b.n	800389e <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003926:	2384      	movs	r3, #132	; 0x84
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	58c3      	ldr	r3, [r0, r3]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	7c00      	ldrb	r0, [r0, #16]
 8003930:	466a      	mov	r2, sp
 8003932:	1d91      	adds	r1, r2, #6
 8003934:	4798      	blx	r3
      break;
 8003936:	e7b2      	b.n	800389e <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003938:	2384      	movs	r3, #132	; 0x84
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	58c3      	ldr	r3, [r0, r3]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	7c00      	ldrb	r0, [r0, #16]
 8003942:	466a      	mov	r2, sp
 8003944:	1d91      	adds	r1, r2, #6
 8003946:	4798      	blx	r3
      break;
 8003948:	e7a9      	b.n	800389e <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800394a:	2384      	movs	r3, #132	; 0x84
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	58c3      	ldr	r3, [r0, r3]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	7c00      	ldrb	r0, [r0, #16]
 8003954:	466a      	mov	r2, sp
 8003956:	1d91      	adds	r1, r2, #6
 8003958:	4798      	blx	r3
      break;
 800395a:	e7a0      	b.n	800389e <USBD_GetDescriptor+0x2a>
       USBD_CtlError(pdev , req);
 800395c:	0029      	movs	r1, r5
 800395e:	f7ff ff7e 	bl	800385e <USBD_CtlError>
      return;
 8003962:	e7a5      	b.n	80038b0 <USBD_GetDescriptor+0x3c>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003964:	7c03      	ldrb	r3, [r0, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d107      	bne.n	800397a <USBD_GetDescriptor+0x106>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800396a:	2385      	movs	r3, #133	; 0x85
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	58c3      	ldr	r3, [r0, r3]
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	466a      	mov	r2, sp
 8003974:	1d90      	adds	r0, r2, #6
 8003976:	4798      	blx	r3
      break;
 8003978:	e791      	b.n	800389e <USBD_GetDescriptor+0x2a>
      USBD_CtlError(pdev , req);
 800397a:	0029      	movs	r1, r5
 800397c:	f7ff ff6f 	bl	800385e <USBD_CtlError>
      return;
 8003980:	e796      	b.n	80038b0 <USBD_GetDescriptor+0x3c>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003982:	7c03      	ldrb	r3, [r0, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <USBD_GetDescriptor+0x128>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003988:	2385      	movs	r3, #133	; 0x85
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	58c3      	ldr	r3, [r0, r3]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	466a      	mov	r2, sp
 8003992:	1d90      	adds	r0, r2, #6
 8003994:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003996:	2307      	movs	r3, #7
 8003998:	7043      	strb	r3, [r0, #1]
      break; 
 800399a:	e780      	b.n	800389e <USBD_GetDescriptor+0x2a>
      USBD_CtlError(pdev , req);
 800399c:	0029      	movs	r1, r5
 800399e:	f7ff ff5e 	bl	800385e <USBD_CtlError>
      return;
 80039a2:	e785      	b.n	80038b0 <USBD_GetDescriptor+0x3c>
     USBD_CtlError(pdev , req);
 80039a4:	0029      	movs	r1, r5
 80039a6:	0020      	movs	r0, r4
 80039a8:	f7ff ff59 	bl	800385e <USBD_CtlError>
    return;
 80039ac:	e780      	b.n	80038b0 <USBD_GetDescriptor+0x3c>
    len = MIN(len , req->wLength);
 80039ae:	1c19      	adds	r1, r3, #0
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d900      	bls.n	80039b6 <USBD_GetDescriptor+0x142>
 80039b4:	1c11      	adds	r1, r2, #0
 80039b6:	b28a      	uxth	r2, r1
 80039b8:	466b      	mov	r3, sp
 80039ba:	80d9      	strh	r1, [r3, #6]
    USBD_CtlSendData (pdev, 
 80039bc:	0001      	movs	r1, r0
 80039be:	0020      	movs	r0, r4
 80039c0:	f000 f9da 	bl	8003d78 <USBD_CtlSendData>
 80039c4:	e774      	b.n	80038b0 <USBD_GetDescriptor+0x3c>
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	080052f0 	.word	0x080052f0
 80039cc:	08005310 	.word	0x08005310

080039d0 <USBD_SetAddress>:
{
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	0004      	movs	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80039d4:	888b      	ldrh	r3, [r1, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d122      	bne.n	8003a20 <USBD_SetAddress+0x50>
 80039da:	88cb      	ldrh	r3, [r1, #6]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11f      	bne.n	8003a20 <USBD_SetAddress+0x50>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80039e0:	788b      	ldrb	r3, [r1, #2]
 80039e2:	257f      	movs	r5, #127	; 0x7f
 80039e4:	401d      	ands	r5, r3
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80039e6:	23fe      	movs	r3, #254	; 0xfe
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	5cc3      	ldrb	r3, [r0, r3]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d00f      	beq.n	8003a10 <USBD_SetAddress+0x40>
      pdev->dev_address = dev_addr;
 80039f0:	23ff      	movs	r3, #255	; 0xff
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	54c5      	strb	r5, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80039f6:	0029      	movs	r1, r5
 80039f8:	f001 fb45 	bl	8005086 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80039fc:	0020      	movs	r0, r4
 80039fe:	f000 f9e9 	bl	8003dd4 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8003a02:	2d00      	cmp	r5, #0
 8003a04:	d007      	beq.n	8003a16 <USBD_SetAddress+0x46>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003a06:	2202      	movs	r2, #2
 8003a08:	23fe      	movs	r3, #254	; 0xfe
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	54e2      	strb	r2, [r4, r3]
 8003a0e:	e00a      	b.n	8003a26 <USBD_SetAddress+0x56>
      USBD_CtlError(pdev , req);
 8003a10:	f7ff ff25 	bl	800385e <USBD_CtlError>
 8003a14:	e007      	b.n	8003a26 <USBD_SetAddress+0x56>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003a16:	2201      	movs	r2, #1
 8003a18:	23fe      	movs	r3, #254	; 0xfe
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	54e2      	strb	r2, [r4, r3]
 8003a1e:	e002      	b.n	8003a26 <USBD_SetAddress+0x56>
     USBD_CtlError(pdev , req);                        
 8003a20:	0020      	movs	r0, r4
 8003a22:	f7ff ff1c 	bl	800385e <USBD_CtlError>
}
 8003a26:	bd70      	pop	{r4, r5, r6, pc}

08003a28 <USBD_SetConfig>:
{
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	0004      	movs	r4, r0
 8003a2c:	000d      	movs	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 8003a2e:	7889      	ldrb	r1, [r1, #2]
 8003a30:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <USBD_SetConfig+0xac>)
 8003a32:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003a34:	2901      	cmp	r1, #1
 8003a36:	d80a      	bhi.n	8003a4e <USBD_SetConfig+0x26>
    switch (pdev->dev_state) 
 8003a38:	23fe      	movs	r3, #254	; 0xfe
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	5cc3      	ldrb	r3, [r0, r3]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d009      	beq.n	8003a56 <USBD_SetConfig+0x2e>
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d01e      	beq.n	8003a84 <USBD_SetConfig+0x5c>
       USBD_CtlError(pdev , req);                     
 8003a46:	0029      	movs	r1, r5
 8003a48:	f7ff ff09 	bl	800385e <USBD_CtlError>
      break;
 8003a4c:	e002      	b.n	8003a54 <USBD_SetConfig+0x2c>
     USBD_CtlError(pdev , req);                              
 8003a4e:	0029      	movs	r1, r5
 8003a50:	f7ff ff05 	bl	800385e <USBD_CtlError>
}
 8003a54:	bd70      	pop	{r4, r5, r6, pc}
      if (cfgidx) 
 8003a56:	2900      	cmp	r1, #0
 8003a58:	d011      	beq.n	8003a7e <USBD_SetConfig+0x56>
        pdev->dev_config = cfgidx;
 8003a5a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	23fe      	movs	r3, #254	; 0xfe
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	54c2      	strb	r2, [r0, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003a64:	f7ff fd98 	bl	8003598 <USBD_SetClassConfig>
 8003a68:	2802      	cmp	r0, #2
 8003a6a:	d003      	beq.n	8003a74 <USBD_SetConfig+0x4c>
        USBD_CtlSendStatus(pdev);
 8003a6c:	0020      	movs	r0, r4
 8003a6e:	f000 f9b1 	bl	8003dd4 <USBD_CtlSendStatus>
 8003a72:	e7ef      	b.n	8003a54 <USBD_SetConfig+0x2c>
          USBD_CtlError(pdev , req);  
 8003a74:	0029      	movs	r1, r5
 8003a76:	0020      	movs	r0, r4
 8003a78:	f7ff fef1 	bl	800385e <USBD_CtlError>
          return;
 8003a7c:	e7ea      	b.n	8003a54 <USBD_SetConfig+0x2c>
         USBD_CtlSendStatus(pdev);
 8003a7e:	f000 f9a9 	bl	8003dd4 <USBD_CtlSendStatus>
 8003a82:	e7e7      	b.n	8003a54 <USBD_SetConfig+0x2c>
      if (cfgidx == 0) 
 8003a84:	2900      	cmp	r1, #0
 8003a86:	d011      	beq.n	8003aac <USBD_SetConfig+0x84>
      else  if (cfgidx != pdev->dev_config) 
 8003a88:	6843      	ldr	r3, [r0, #4]
 8003a8a:	4299      	cmp	r1, r3
 8003a8c:	d01e      	beq.n	8003acc <USBD_SetConfig+0xa4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003a8e:	b2d9      	uxtb	r1, r3
 8003a90:	f7ff fd92 	bl	80035b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003a94:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <USBD_SetConfig+0xac>)
 8003a96:	7819      	ldrb	r1, [r3, #0]
 8003a98:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003a9a:	0020      	movs	r0, r4
 8003a9c:	f7ff fd7c 	bl	8003598 <USBD_SetClassConfig>
 8003aa0:	2802      	cmp	r0, #2
 8003aa2:	d00e      	beq.n	8003ac2 <USBD_SetConfig+0x9a>
        USBD_CtlSendStatus(pdev);
 8003aa4:	0020      	movs	r0, r4
 8003aa6:	f000 f995 	bl	8003dd4 <USBD_CtlSendStatus>
 8003aaa:	e7d3      	b.n	8003a54 <USBD_SetConfig+0x2c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003aac:	2202      	movs	r2, #2
 8003aae:	23fe      	movs	r3, #254	; 0xfe
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	54c2      	strb	r2, [r0, r3]
        pdev->dev_config = cfgidx;          
 8003ab4:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003ab6:	f7ff fd7f 	bl	80035b8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8003aba:	0020      	movs	r0, r4
 8003abc:	f000 f98a 	bl	8003dd4 <USBD_CtlSendStatus>
 8003ac0:	e7c8      	b.n	8003a54 <USBD_SetConfig+0x2c>
          USBD_CtlError(pdev , req);  
 8003ac2:	0029      	movs	r1, r5
 8003ac4:	0020      	movs	r0, r4
 8003ac6:	f7ff feca 	bl	800385e <USBD_CtlError>
          return;
 8003aca:	e7c3      	b.n	8003a54 <USBD_SetConfig+0x2c>
        USBD_CtlSendStatus(pdev);
 8003acc:	f000 f982 	bl	8003dd4 <USBD_CtlSendStatus>
 8003ad0:	e7c0      	b.n	8003a54 <USBD_SetConfig+0x2c>
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	2000017d 	.word	0x2000017d

08003ad8 <USBD_GetConfig>:
{
 8003ad8:	b510      	push	{r4, lr}
  if (req->wLength != 1) 
 8003ada:	88cb      	ldrh	r3, [r1, #6]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d109      	bne.n	8003af4 <USBD_GetConfig+0x1c>
    switch (pdev->dev_state )  
 8003ae0:	23fe      	movs	r3, #254	; 0xfe
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	5cc3      	ldrb	r3, [r0, r3]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d007      	beq.n	8003afa <USBD_GetConfig+0x22>
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d00d      	beq.n	8003b0a <USBD_GetConfig+0x32>
       USBD_CtlError(pdev , req);
 8003aee:	f7ff feb6 	bl	800385e <USBD_CtlError>
}
 8003af2:	e001      	b.n	8003af8 <USBD_GetConfig+0x20>
     USBD_CtlError(pdev , req);
 8003af4:	f7ff feb3 	bl	800385e <USBD_CtlError>
}
 8003af8:	bd10      	pop	{r4, pc}
      pdev->dev_default_config = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	6083      	str	r3, [r0, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8003afe:	0001      	movs	r1, r0
 8003b00:	3108      	adds	r1, #8
      USBD_CtlSendData (pdev, 
 8003b02:	2201      	movs	r2, #1
 8003b04:	f000 f938 	bl	8003d78 <USBD_CtlSendData>
      break;
 8003b08:	e7f6      	b.n	8003af8 <USBD_GetConfig+0x20>
                        (uint8_t *)&pdev->dev_config,
 8003b0a:	1d01      	adds	r1, r0, #4
      USBD_CtlSendData (pdev, 
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f000 f933 	bl	8003d78 <USBD_CtlSendData>
      break;
 8003b12:	e7f1      	b.n	8003af8 <USBD_GetConfig+0x20>

08003b14 <USBD_GetStatus>:
{
 8003b14:	b510      	push	{r4, lr}
  switch (pdev->dev_state) 
 8003b16:	23fe      	movs	r3, #254	; 0xfe
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	5cc3      	ldrb	r3, [r0, r3]
 8003b1c:	3b02      	subs	r3, #2
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d80e      	bhi.n	8003b42 <USBD_GetStatus+0x2e>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003b24:	2301      	movs	r3, #1
 8003b26:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003b28:	2381      	movs	r3, #129	; 0x81
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	58c3      	ldr	r3, [r0, r3]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <USBD_GetStatus+0x22>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003b32:	2303      	movs	r3, #3
 8003b34:	60c3      	str	r3, [r0, #12]
                      (uint8_t *)& pdev->dev_config_status,
 8003b36:	0001      	movs	r1, r0
 8003b38:	310c      	adds	r1, #12
    USBD_CtlSendData (pdev, 
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f000 f91c 	bl	8003d78 <USBD_CtlSendData>
}
 8003b40:	bd10      	pop	{r4, pc}
    USBD_CtlError(pdev , req);                        
 8003b42:	f7ff fe8c 	bl	800385e <USBD_CtlError>
}
 8003b46:	e7fb      	b.n	8003b40 <USBD_GetStatus+0x2c>

08003b48 <USBD_ClrFeature>:
{
 8003b48:	b510      	push	{r4, lr}
 8003b4a:	0004      	movs	r4, r0
  switch (pdev->dev_state)
 8003b4c:	23fe      	movs	r3, #254	; 0xfe
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	5cc3      	ldrb	r3, [r0, r3]
 8003b52:	3b02      	subs	r3, #2
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d80f      	bhi.n	8003b7a <USBD_ClrFeature+0x32>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003b5a:	884b      	ldrh	r3, [r1, #2]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d000      	beq.n	8003b62 <USBD_ClrFeature+0x1a>
}
 8003b60:	bd10      	pop	{r4, pc}
      pdev->dev_remote_wakeup = 0; 
 8003b62:	2200      	movs	r2, #0
 8003b64:	2381      	movs	r3, #129	; 0x81
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	50c2      	str	r2, [r0, r3]
      pdev->pClass->Setup (pdev, req);   
 8003b6a:	3310      	adds	r3, #16
 8003b6c:	58c3      	ldr	r3, [r0, r3]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003b72:	0020      	movs	r0, r4
 8003b74:	f000 f92e 	bl	8003dd4 <USBD_CtlSendStatus>
 8003b78:	e7f2      	b.n	8003b60 <USBD_ClrFeature+0x18>
     USBD_CtlError(pdev , req);
 8003b7a:	f7ff fe70 	bl	800385e <USBD_CtlError>
}
 8003b7e:	e7ef      	b.n	8003b60 <USBD_ClrFeature+0x18>

08003b80 <USBD_StdDevReq>:
{
 8003b80:	b510      	push	{r4, lr}
  switch (req->bRequest) 
 8003b82:	784b      	ldrb	r3, [r1, #1]
 8003b84:	2b09      	cmp	r3, #9
 8003b86:	d819      	bhi.n	8003bbc <USBD_StdDevReq+0x3c>
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <USBD_StdDevReq+0x44>)
 8003b8c:	58d3      	ldr	r3, [r2, r3]
 8003b8e:	469f      	mov	pc, r3
    USBD_GetDescriptor (pdev, req) ;
 8003b90:	f7ff fe70 	bl	8003874 <USBD_GetDescriptor>
}
 8003b94:	2000      	movs	r0, #0
 8003b96:	bd10      	pop	{r4, pc}
    USBD_SetAddress(pdev, req);
 8003b98:	f7ff ff1a 	bl	80039d0 <USBD_SetAddress>
    break;
 8003b9c:	e7fa      	b.n	8003b94 <USBD_StdDevReq+0x14>
    USBD_SetConfig (pdev , req);
 8003b9e:	f7ff ff43 	bl	8003a28 <USBD_SetConfig>
    break;
 8003ba2:	e7f7      	b.n	8003b94 <USBD_StdDevReq+0x14>
    USBD_GetConfig (pdev , req);
 8003ba4:	f7ff ff98 	bl	8003ad8 <USBD_GetConfig>
    break;
 8003ba8:	e7f4      	b.n	8003b94 <USBD_StdDevReq+0x14>
    USBD_GetStatus (pdev , req);
 8003baa:	f7ff ffb3 	bl	8003b14 <USBD_GetStatus>
    break;
 8003bae:	e7f1      	b.n	8003b94 <USBD_StdDevReq+0x14>
    USBD_SetFeature (pdev , req);    
 8003bb0:	f7ff fe2f 	bl	8003812 <USBD_SetFeature>
    break;
 8003bb4:	e7ee      	b.n	8003b94 <USBD_StdDevReq+0x14>
    USBD_ClrFeature (pdev , req);
 8003bb6:	f7ff ffc7 	bl	8003b48 <USBD_ClrFeature>
    break;
 8003bba:	e7eb      	b.n	8003b94 <USBD_StdDevReq+0x14>
    USBD_CtlError(pdev , req);
 8003bbc:	f7ff fe4f 	bl	800385e <USBD_CtlError>
    break;
 8003bc0:	e7e8      	b.n	8003b94 <USBD_StdDevReq+0x14>
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	08005328 	.word	0x08005328

08003bc8 <USBD_StdItfReq>:
{
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	0004      	movs	r4, r0
 8003bcc:	000d      	movs	r5, r1
  switch (pdev->dev_state) 
 8003bce:	23fe      	movs	r3, #254	; 0xfe
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	5cc3      	ldrb	r3, [r0, r3]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d112      	bne.n	8003bfe <USBD_StdItfReq+0x36>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003bd8:	790b      	ldrb	r3, [r1, #4]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d903      	bls.n	8003be6 <USBD_StdItfReq+0x1e>
       USBD_CtlError(pdev , req);
 8003bde:	f7ff fe3e 	bl	800385e <USBD_CtlError>
}
 8003be2:	2000      	movs	r0, #0
 8003be4:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup (pdev, req); 
 8003be6:	2385      	movs	r3, #133	; 0x85
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	58c3      	ldr	r3, [r0, r3]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003bf0:	88eb      	ldrh	r3, [r5, #6]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f5      	bne.n	8003be2 <USBD_StdItfReq+0x1a>
         USBD_CtlSendStatus(pdev);
 8003bf6:	0020      	movs	r0, r4
 8003bf8:	f000 f8ec 	bl	8003dd4 <USBD_CtlSendStatus>
 8003bfc:	e7f1      	b.n	8003be2 <USBD_StdItfReq+0x1a>
     USBD_CtlError(pdev , req);
 8003bfe:	f7ff fe2e 	bl	800385e <USBD_CtlError>
    break;
 8003c02:	e7ee      	b.n	8003be2 <USBD_StdItfReq+0x1a>

08003c04 <USBD_StdEPReq>:
{
 8003c04:	b570      	push	{r4, r5, r6, lr}
 8003c06:	0005      	movs	r5, r0
 8003c08:	000c      	movs	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003c0a:	888a      	ldrh	r2, [r1, #4]
 8003c0c:	b2d1      	uxtb	r1, r2
  if ((req->bmRequest & 0x60) == 0x20)
 8003c0e:	7820      	ldrb	r0, [r4, #0]
 8003c10:	2360      	movs	r3, #96	; 0x60
 8003c12:	4003      	ands	r3, r0
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d012      	beq.n	8003c3e <USBD_StdEPReq+0x3a>
  switch (req->bRequest) 
 8003c18:	7863      	ldrb	r3, [r4, #1]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d035      	beq.n	8003c8a <USBD_StdEPReq+0x86>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d05b      	beq.n	8003cda <USBD_StdEPReq+0xd6>
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d112      	bne.n	8003c4c <USBD_StdEPReq+0x48>
    switch (pdev->dev_state) 
 8003c26:	33fa      	adds	r3, #250	; 0xfa
 8003c28:	33ff      	adds	r3, #255	; 0xff
 8003c2a:	5ceb      	ldrb	r3, [r5, r3]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d00f      	beq.n	8003c50 <USBD_StdEPReq+0x4c>
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d015      	beq.n	8003c60 <USBD_StdEPReq+0x5c>
      USBD_CtlError(pdev , req);
 8003c34:	0021      	movs	r1, r4
 8003c36:	0028      	movs	r0, r5
 8003c38:	f7ff fe11 	bl	800385e <USBD_CtlError>
      break;    
 8003c3c:	e006      	b.n	8003c4c <USBD_StdEPReq+0x48>
    pdev->pClass->Setup (pdev, req);
 8003c3e:	33f5      	adds	r3, #245	; 0xf5
 8003c40:	33ff      	adds	r3, #255	; 0xff
 8003c42:	58eb      	ldr	r3, [r5, r3]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	0021      	movs	r1, r4
 8003c48:	0028      	movs	r0, r5
 8003c4a:	4798      	blx	r3
}
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003c50:	2900      	cmp	r1, #0
 8003c52:	d0fb      	beq.n	8003c4c <USBD_StdEPReq+0x48>
 8003c54:	2980      	cmp	r1, #128	; 0x80
 8003c56:	d0f9      	beq.n	8003c4c <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 8003c58:	0028      	movs	r0, r5
 8003c5a:	f001 f9da 	bl	8005012 <USBD_LL_StallEP>
 8003c5e:	e7f5      	b.n	8003c4c <USBD_StdEPReq+0x48>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003c60:	8863      	ldrh	r3, [r4, #2]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <USBD_StdEPReq+0x70>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003c66:	2900      	cmp	r1, #0
 8003c68:	d004      	beq.n	8003c74 <USBD_StdEPReq+0x70>
 8003c6a:	2980      	cmp	r1, #128	; 0x80
 8003c6c:	d002      	beq.n	8003c74 <USBD_StdEPReq+0x70>
          USBD_LL_StallEP(pdev , ep_addr);
 8003c6e:	0028      	movs	r0, r5
 8003c70:	f001 f9cf 	bl	8005012 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8003c74:	2385      	movs	r3, #133	; 0x85
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	58eb      	ldr	r3, [r5, r3]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	0021      	movs	r1, r4
 8003c7e:	0028      	movs	r0, r5
 8003c80:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003c82:	0028      	movs	r0, r5
 8003c84:	f000 f8a6 	bl	8003dd4 <USBD_CtlSendStatus>
      break;
 8003c88:	e7e0      	b.n	8003c4c <USBD_StdEPReq+0x48>
    switch (pdev->dev_state) 
 8003c8a:	23fe      	movs	r3, #254	; 0xfe
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	5ceb      	ldrb	r3, [r5, r3]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d006      	beq.n	8003ca2 <USBD_StdEPReq+0x9e>
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d00c      	beq.n	8003cb2 <USBD_StdEPReq+0xae>
      USBD_CtlError(pdev , req);
 8003c98:	0021      	movs	r1, r4
 8003c9a:	0028      	movs	r0, r5
 8003c9c:	f7ff fddf 	bl	800385e <USBD_CtlError>
      break;    
 8003ca0:	e7d4      	b.n	8003c4c <USBD_StdEPReq+0x48>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003ca2:	2900      	cmp	r1, #0
 8003ca4:	d0d2      	beq.n	8003c4c <USBD_StdEPReq+0x48>
 8003ca6:	2980      	cmp	r1, #128	; 0x80
 8003ca8:	d0d0      	beq.n	8003c4c <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 8003caa:	0028      	movs	r0, r5
 8003cac:	f001 f9b1 	bl	8005012 <USBD_LL_StallEP>
 8003cb0:	e7cc      	b.n	8003c4c <USBD_StdEPReq+0x48>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003cb2:	8863      	ldrh	r3, [r4, #2]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1c9      	bne.n	8003c4c <USBD_StdEPReq+0x48>
        if ((ep_addr & 0x7F) != 0x00) 
 8003cb8:	064b      	lsls	r3, r1, #25
 8003cba:	d103      	bne.n	8003cc4 <USBD_StdEPReq+0xc0>
        USBD_CtlSendStatus(pdev);
 8003cbc:	0028      	movs	r0, r5
 8003cbe:	f000 f889 	bl	8003dd4 <USBD_CtlSendStatus>
 8003cc2:	e7c3      	b.n	8003c4c <USBD_StdEPReq+0x48>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003cc4:	0028      	movs	r0, r5
 8003cc6:	f001 f9b4 	bl	8005032 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8003cca:	2385      	movs	r3, #133	; 0x85
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	58eb      	ldr	r3, [r5, r3]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0021      	movs	r1, r4
 8003cd4:	0028      	movs	r0, r5
 8003cd6:	4798      	blx	r3
 8003cd8:	e7f0      	b.n	8003cbc <USBD_StdEPReq+0xb8>
    switch (pdev->dev_state) 
 8003cda:	23fe      	movs	r3, #254	; 0xfe
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	5ceb      	ldrb	r3, [r5, r3]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d006      	beq.n	8003cf2 <USBD_StdEPReq+0xee>
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d00a      	beq.n	8003cfe <USBD_StdEPReq+0xfa>
      USBD_CtlError(pdev , req);
 8003ce8:	0021      	movs	r1, r4
 8003cea:	0028      	movs	r0, r5
 8003cec:	f7ff fdb7 	bl	800385e <USBD_CtlError>
      break;
 8003cf0:	e7ac      	b.n	8003c4c <USBD_StdEPReq+0x48>
      if ((ep_addr & 0x7F) != 0x00) 
 8003cf2:	064b      	lsls	r3, r1, #25
 8003cf4:	d0aa      	beq.n	8003c4c <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 8003cf6:	0028      	movs	r0, r5
 8003cf8:	f001 f98b 	bl	8005012 <USBD_LL_StallEP>
 8003cfc:	e7a6      	b.n	8003c4c <USBD_StdEPReq+0x48>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003cfe:	0613      	lsls	r3, r2, #24
 8003d00:	d412      	bmi.n	8003d28 <USBD_StdEPReq+0x124>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8003d02:	247f      	movs	r4, #127	; 0x7f
 8003d04:	400c      	ands	r4, r1
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003d06:	3410      	adds	r4, #16
 8003d08:	0124      	lsls	r4, r4, #4
 8003d0a:	192c      	adds	r4, r5, r4
 8003d0c:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003d0e:	0028      	movs	r0, r5
 8003d10:	f001 f99f 	bl	8005052 <USBD_LL_IsStallEP>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d00e      	beq.n	8003d36 <USBD_StdEPReq+0x132>
        pep->status = 0x0001;     
 8003d18:	2301      	movs	r3, #1
 8003d1a:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	0021      	movs	r1, r4
 8003d20:	0028      	movs	r0, r5
 8003d22:	f000 f829 	bl	8003d78 <USBD_CtlSendData>
      break;
 8003d26:	e791      	b.n	8003c4c <USBD_StdEPReq+0x48>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003d28:	247f      	movs	r4, #127	; 0x7f
 8003d2a:	400c      	ands	r4, r1
 8003d2c:	3401      	adds	r4, #1
 8003d2e:	0124      	lsls	r4, r4, #4
 8003d30:	192c      	adds	r4, r5, r4
 8003d32:	3404      	adds	r4, #4
 8003d34:	e7eb      	b.n	8003d0e <USBD_StdEPReq+0x10a>
        pep->status = 0x0000;  
 8003d36:	2300      	movs	r3, #0
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	e7ef      	b.n	8003d1c <USBD_StdEPReq+0x118>

08003d3c <USBD_GetString>:
{
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	0004      	movs	r4, r0
 8003d40:	000d      	movs	r5, r1
 8003d42:	0016      	movs	r6, r2
  if (desc != NULL) 
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d016      	beq.n	8003d76 <USBD_GetString+0x3a>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003d48:	f7ff fd59 	bl	80037fe <USBD_GetLen>
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *len;
 8003d54:	702b      	strb	r3, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003d56:	2303      	movs	r3, #3
 8003d58:	706b      	strb	r3, [r5, #1]
 8003d5a:	3b01      	subs	r3, #1
    while (*desc != '\0') 
 8003d5c:	e008      	b.n	8003d70 <USBD_GetString+0x34>
      unicode[idx++] = *desc++;
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	3401      	adds	r4, #1
 8003d64:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 8003d66:	3302      	adds	r3, #2
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	18aa      	adds	r2, r5, r2
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	7011      	strb	r1, [r2, #0]
    while (*desc != '\0') 
 8003d70:	7821      	ldrb	r1, [r4, #0]
 8003d72:	2900      	cmp	r1, #0
 8003d74:	d1f3      	bne.n	8003d5e <USBD_GetString+0x22>
}
 8003d76:	bd70      	pop	{r4, r5, r6, pc}

08003d78 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003d78:	b510      	push	{r4, lr}
 8003d7a:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003d7c:	2402      	movs	r4, #2
 8003d7e:	22fa      	movs	r2, #250	; 0xfa
 8003d80:	0052      	lsls	r2, r2, #1
 8003d82:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
 8003d84:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8003d86:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003d88:	000a      	movs	r2, r1
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	f001 f98b 	bl	80050a6 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003d90:	2000      	movs	r0, #0
 8003d92:	bd10      	pop	{r4, pc}

08003d94 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003d94:	b510      	push	{r4, lr}
 8003d96:	0013      	movs	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003d98:	000a      	movs	r2, r1
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	f001 f983 	bl	80050a6 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003da0:	2000      	movs	r0, #0
 8003da2:	bd10      	pop	{r4, pc}

08003da4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003da4:	b510      	push	{r4, lr}
 8003da6:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003da8:	2403      	movs	r4, #3
 8003daa:	22fa      	movs	r2, #250	; 0xfa
 8003dac:	0052      	lsls	r2, r2, #1
 8003dae:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8003db0:	3aec      	subs	r2, #236	; 0xec
 8003db2:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 8003db4:	3204      	adds	r2, #4
 8003db6:	5083      	str	r3, [r0, r2]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003db8:	000a      	movs	r2, r1
 8003dba:	2100      	movs	r1, #0
 8003dbc:	f001 f983 	bl	80050c6 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	bd10      	pop	{r4, pc}

08003dc4 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	0013      	movs	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8003dc8:	000a      	movs	r2, r1
 8003dca:	2100      	movs	r1, #0
 8003dcc:	f001 f97b 	bl	80050c6 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	bd10      	pop	{r4, pc}

08003dd4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003dd4:	b510      	push	{r4, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	23fa      	movs	r3, #250	; 0xfa
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003dde:	2300      	movs	r3, #0
 8003de0:	2200      	movs	r2, #0
 8003de2:	2100      	movs	r1, #0
 8003de4:	f001 f95f 	bl	80050a6 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003de8:	2000      	movs	r0, #0
 8003dea:	bd10      	pop	{r4, pc}

08003dec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003dec:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003dee:	2205      	movs	r2, #5
 8003df0:	23fa      	movs	r3, #250	; 0xfa
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003df6:	2300      	movs	r3, #0
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	f001 f963 	bl	80050c6 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003e00:	2000      	movs	r0, #0
 8003e02:	bd10      	pop	{r4, pc}

08003e04 <RebootToBootloader>:

#include "stm32f0xx_hal.h"
#include "usb_device.h"

//call this at any time to initiate a reboot into bootloader
void RebootToBootloader(){
 8003e04:	b500      	push	{lr}
 8003e06:	b087      	sub	sp, #28


    FLASH_OBProgramInitTypeDef OBParam;

    HAL_FLASHEx_OBGetConfig(&OBParam);
 8003e08:	4668      	mov	r0, sp
 8003e0a:	f7fd f965 	bl	80010d8 <HAL_FLASHEx_OBGetConfig>

    OBParam.OptionType = OPTIONBYTE_USER;
 8003e0e:	2304      	movs	r3, #4
 8003e10:	9300      	str	r3, [sp, #0]
    /*Reset NBOOT0 and BOOT_SEL,  see: RM 2.5 Boot configuration*/
    OBParam.USERConfig = 0x77; //Sorry for magic number :)
 8003e12:	3373      	adds	r3, #115	; 0x73
 8003e14:	466a      	mov	r2, sp
 8003e16:	7353      	strb	r3, [r2, #13]

    HAL_FLASH_Unlock();
 8003e18:	f7fc fff4 	bl	8000e04 <HAL_FLASH_Unlock>
    HAL_FLASH_OB_Unlock();
 8003e1c:	f7fd f80e 	bl	8000e3c <HAL_FLASH_OB_Unlock>

    HAL_FLASHEx_OBErase();
 8003e20:	f7fd f896 	bl	8000f50 <HAL_FLASHEx_OBErase>

    HAL_FLASHEx_OBProgram(&OBParam);
 8003e24:	4668      	mov	r0, sp
 8003e26:	f7fd f8c1 	bl	8000fac <HAL_FLASHEx_OBProgram>

    HAL_FLASH_OB_Lock();
 8003e2a:	f7fd f81b 	bl	8000e64 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 8003e2e:	f7fc fffb 	bl	8000e28 <HAL_FLASH_Lock>

    HAL_FLASH_OB_Launch();
 8003e32:	f7fd f84d 	bl	8000ed0 <HAL_FLASH_OB_Launch>
}
 8003e36:	b007      	add	sp, #28
 8003e38:	bd00      	pop	{pc}

08003e3a <bootloaderSwitcher>:

//turns off BOOT0 pin
void bootloaderSwitcher(){
 8003e3a:	b500      	push	{lr}
 8003e3c:	b087      	sub	sp, #28
    FLASH_OBProgramInitTypeDef OBParam;

    HAL_FLASHEx_OBGetConfig(&OBParam);
 8003e3e:	4668      	mov	r0, sp
 8003e40:	f7fd f94a 	bl	80010d8 <HAL_FLASHEx_OBGetConfig>

    if(OBParam.USERConfig != 0x7F)
 8003e44:	466b      	mov	r3, sp
 8003e46:	7b5b      	ldrb	r3, [r3, #13]
 8003e48:	2b7f      	cmp	r3, #127	; 0x7f
 8003e4a:	d011      	beq.n	8003e70 <bootloaderSwitcher+0x36>
    {

        OBParam.OptionType = OPTIONBYTE_USER;
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	9300      	str	r3, [sp, #0]
        OBParam.USERConfig = 0x7F;
 8003e50:	337b      	adds	r3, #123	; 0x7b
 8003e52:	466a      	mov	r2, sp
 8003e54:	7353      	strb	r3, [r2, #13]

        HAL_FLASH_Unlock();
 8003e56:	f7fc ffd5 	bl	8000e04 <HAL_FLASH_Unlock>
        HAL_FLASH_OB_Unlock();
 8003e5a:	f7fc ffef 	bl	8000e3c <HAL_FLASH_OB_Unlock>
        HAL_FLASHEx_OBErase();
 8003e5e:	f7fd f877 	bl	8000f50 <HAL_FLASHEx_OBErase>
        HAL_FLASHEx_OBProgram(&OBParam);
 8003e62:	4668      	mov	r0, sp
 8003e64:	f7fd f8a2 	bl	8000fac <HAL_FLASHEx_OBProgram>
        HAL_FLASH_OB_Lock();
 8003e68:	f7fc fffc 	bl	8000e64 <HAL_FLASH_OB_Lock>
        HAL_FLASH_OB_Launch();
 8003e6c:	f7fd f830 	bl	8000ed0 <HAL_FLASH_OB_Launch>
    }
}
 8003e70:	b007      	add	sp, #28
 8003e72:	bd00      	pop	{pc}

08003e74 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI;
 8003e74:	2328      	movs	r3, #40	; 0x28
{
 8003e76:	b510      	push	{r4, lr}
 8003e78:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003e7a:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI;
 8003e7c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003e7e:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e80:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003e82:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003e84:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003e86:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e88:	f7fe fb74 	bl	8002574 <HAL_RCC_OscConfig>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d000      	beq.n	8003e92 <SystemClock_Config+0x1e>
 8003e90:	e7fe      	b.n	8003e90 <SystemClock_Config+0x1c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e92:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e94:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e96:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e98:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8003e9a:	3b04      	subs	r3, #4

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003e9c:	0021      	movs	r1, r4
 8003e9e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8003ea0:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003ea2:	f7fe fc5f 	bl	8002764 <HAL_RCC_ClockConfig>
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	d000      	beq.n	8003eac <SystemClock_Config+0x38>
 8003eaa:	e7fe      	b.n	8003eaa <SystemClock_Config+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003eac:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003eae:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003eb0:	029b      	lsls	r3, r3, #10

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eb2:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003eb4:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eb6:	f7fe fd2d 	bl	8002914 <HAL_RCCEx_PeriphCLKConfig>
 8003eba:	1e04      	subs	r4, r0, #0
 8003ebc:	d000      	beq.n	8003ec0 <SystemClock_Config+0x4c>
 8003ebe:	e7fe      	b.n	8003ebe <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003ec0:	f7fe fd12 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8003ec4:	21fa      	movs	r1, #250	; 0xfa
 8003ec6:	0089      	lsls	r1, r1, #2
 8003ec8:	f7fc f93a 	bl	8000140 <__udivsi3>
 8003ecc:	f7fc fe58 	bl	8000b80 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003ed0:	2004      	movs	r0, #4
 8003ed2:	f7fc fe71 	bl	8000bb8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	0022      	movs	r2, r4
 8003eda:	0021      	movs	r1, r4
 8003edc:	4240      	negs	r0, r0
 8003ede:	f7fc fe09 	bl	8000af4 <HAL_NVIC_SetPriority>
}
 8003ee2:	b018      	add	sp, #96	; 0x60
 8003ee4:	bd10      	pop	{r4, pc}
	...

08003ee8 <main>:
	serialNumber = TYPE_ID | (((*uid) << 8) & 0xFFFFFF00);
 8003ee8:	4b7d      	ldr	r3, [pc, #500]	; (80040e0 <main+0x1f8>)
{
 8003eea:	b5f0      	push	{r4, r5, r6, r7, lr}
	serialNumber = TYPE_ID | (((*uid) << 8) & 0xFFFFFF00);
 8003eec:	681b      	ldr	r3, [r3, #0]
{
 8003eee:	b08b      	sub	sp, #44	; 0x2c
	serialNumber = TYPE_ID | (((*uid) << 8) & 0xFFFFFF00);
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	2316      	movs	r3, #22
 8003ef4:	0212      	lsls	r2, r2, #8
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	4a7a      	ldr	r2, [pc, #488]	; (80040e4 <main+0x1fc>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efa:	4d7b      	ldr	r5, [pc, #492]	; (80040e8 <main+0x200>)
	serialNumber = TYPE_ID | (((*uid) << 8) & 0xFFFFFF00);
 8003efc:	6013      	str	r3, [r2, #0]
  bootloaderSwitcher();
 8003efe:	f7ff ff9c 	bl	8003e3a <bootloaderSwitcher>
  HAL_Init();
 8003f02:	f7fc f9bb 	bl	800027c <HAL_Init>
  SystemClock_Config();
 8003f06:	f7ff ffb5 	bl	8003e74 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0a:	2180      	movs	r1, #128	; 0x80
 8003f0c:	696a      	ldr	r2, [r5, #20]
 8003f0e:	0289      	lsls	r1, r1, #10
 8003f10:	430a      	orrs	r2, r1
 8003f12:	616a      	str	r2, [r5, #20]
 8003f14:	696b      	ldr	r3, [r5, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_MOD_GPIO_Port, CAN_MOD_Pin, GPIO_PIN_RESET);
 8003f16:	4875      	ldr	r0, [pc, #468]	; (80040ec <main+0x204>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f18:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f1a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1c:	9303      	str	r3, [sp, #12]
 8003f1e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f20:	696a      	ldr	r2, [r5, #20]
 8003f22:	02c9      	lsls	r1, r1, #11
 8003f24:	430a      	orrs	r2, r1
 8003f26:	616a      	str	r2, [r5, #20]
 8003f28:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(CAN_MOD_GPIO_Port, CAN_MOD_Pin, GPIO_PIN_RESET);
 8003f2a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2c:	400b      	ands	r3, r1
 8003f2e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(CAN_MOD_GPIO_Port, CAN_MOD_Pin, GPIO_PIN_RESET);
 8003f30:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f32:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(CAN_MOD_GPIO_Port, CAN_MOD_Pin, GPIO_PIN_RESET);
 8003f34:	f7fd f9a6 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_MOD_Pin */
  GPIO_InitStruct.Pin = CAN_MOD_Pin;
 8003f38:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = CAN_MOD_Pin;
 8003f3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CAN_MOD_GPIO_Port, &GPIO_InitStruct);
 8003f3e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f40:	3b0f      	subs	r3, #15
  HAL_GPIO_Init(CAN_MOD_GPIO_Port, &GPIO_InitStruct);
 8003f42:	486a      	ldr	r0, [pc, #424]	; (80040ec <main+0x204>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f44:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f46:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f48:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(CAN_MOD_GPIO_Port, &GPIO_InitStruct);
 8003f4a:	f7fd f8db 	bl	8001104 <HAL_GPIO_Init>
  hcan.Instance = CAN;
 8003f4e:	4c68      	ldr	r4, [pc, #416]	; (80040f0 <main+0x208>)
 8003f50:	4b68      	ldr	r3, [pc, #416]	; (80040f4 <main+0x20c>)
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003f52:	0020      	movs	r0, r4
  hcan.Instance = CAN;
 8003f54:	6023      	str	r3, [r4, #0]
  hcan.Init.Prescaler = 3;
 8003f56:	2303      	movs	r3, #3
 8003f58:	6063      	str	r3, [r4, #4]
  hcan.Init.SJW = CAN_SJW_2TQ;
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	045b      	lsls	r3, r3, #17
 8003f5e:	60e3      	str	r3, [r4, #12]
  hcan.Init.BS1 = CAN_BS1_11TQ;
 8003f60:	23a0      	movs	r3, #160	; 0xa0
 8003f62:	031b      	lsls	r3, r3, #12
 8003f64:	6123      	str	r3, [r4, #16]
  hcan.Init.BS2 = CAN_BS2_4TQ;
 8003f66:	23c0      	movs	r3, #192	; 0xc0
 8003f68:	039b      	lsls	r3, r3, #14
 8003f6a:	6163      	str	r3, [r4, #20]
  hcan.Init.ABOM = ENABLE;
 8003f6c:	2301      	movs	r3, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003f6e:	60a6      	str	r6, [r4, #8]
  hcan.Init.TTCM = DISABLE;
 8003f70:	61a6      	str	r6, [r4, #24]
  hcan.Init.ABOM = ENABLE;
 8003f72:	61e3      	str	r3, [r4, #28]
  hcan.Init.AWUM = DISABLE;
 8003f74:	6226      	str	r6, [r4, #32]
  hcan.Init.NART = DISABLE;
 8003f76:	6266      	str	r6, [r4, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 8003f78:	62a6      	str	r6, [r4, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8003f7a:	62e6      	str	r6, [r4, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003f7c:	f7fc fa24 	bl	80003c8 <HAL_CAN_Init>
 8003f80:	0007      	movs	r7, r0
 8003f82:	42b0      	cmp	r0, r6
 8003f84:	d000      	beq.n	8003f88 <main+0xa0>
 8003f86:	e7fe      	b.n	8003f86 <main+0x9e>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f88:	2201      	movs	r2, #1
 8003f8a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8003f8c:	0001      	movs	r1, r0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	616b      	str	r3, [r5, #20]
 8003f92:	696b      	ldr	r3, [r5, #20]
  huart2.Instance = USART2;
 8003f94:	4e58      	ldr	r6, [pc, #352]	; (80040f8 <main+0x210>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f96:	4013      	ands	r3, r2
 8003f98:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8003f9a:	0002      	movs	r2, r0
 8003f9c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f9e:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8003fa0:	f7fc fda8 	bl	8000af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8003fa4:	200b      	movs	r0, #11
 8003fa6:	f7fc fdd7 	bl	8000b58 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8003faa:	4d54      	ldr	r5, [pc, #336]	; (80040fc <main+0x214>)
  huart2.Init.BaudRate = 2000000;
 8003fac:	4b54      	ldr	r3, [pc, #336]	; (8004100 <main+0x218>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fae:	0028      	movs	r0, r5
  huart2.Init.BaudRate = 2000000;
 8003fb0:	606b      	str	r3, [r5, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fb2:	230c      	movs	r3, #12
 8003fb4:	616b      	str	r3, [r5, #20]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003fb6:	3b04      	subs	r3, #4
 8003fb8:	626b      	str	r3, [r5, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	021b      	lsls	r3, r3, #8
  huart2.Instance = USART2;
 8003fbe:	602e      	str	r6, [r5, #0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003fc0:	60af      	str	r7, [r5, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fc2:	60ef      	str	r7, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003fc4:	612f      	str	r7, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fc6:	61af      	str	r7, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fc8:	61ef      	str	r7, [r5, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fca:	622f      	str	r7, [r5, #32]
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003fcc:	636b      	str	r3, [r5, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fce:	f7ff f801 	bl	8002fd4 <HAL_UART_Init>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d000      	beq.n	8003fd8 <main+0xf0>
 8003fd6:	e7fe      	b.n	8003fd6 <main+0xee>
  MX_USB_DEVICE_Init();
 8003fd8:	f000 fe98 	bl	8004d0c <MX_USB_DEVICE_Init>
  hiwdg.Instance = IWDG;
 8003fdc:	4849      	ldr	r0, [pc, #292]	; (8004104 <main+0x21c>)
 8003fde:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <main+0x220>)
 8003fe0:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003fe2:	2304      	movs	r3, #4
 8003fe4:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8003fe6:	4b49      	ldr	r3, [pc, #292]	; (800410c <main+0x224>)
 8003fe8:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8003fea:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003fec:	f7fd f950 	bl	8001290 <HAL_IWDG_Init>
 8003ff0:	1e07      	subs	r7, r0, #0
 8003ff2:	d000      	beq.n	8003ff6 <main+0x10e>
 8003ff4:	e7fe      	b.n	8003ff4 <main+0x10c>
  hcan.pTxMsg = &CanTxBuffer;
 8003ff6:	4b46      	ldr	r3, [pc, #280]	; (8004110 <main+0x228>)
 8003ff8:	6323      	str	r3, [r4, #48]	; 0x30
  hcan.pRxMsg = &CanRxBuffer;
 8003ffa:	4b46      	ldr	r3, [pc, #280]	; (8004114 <main+0x22c>)
 8003ffc:	6363      	str	r3, [r4, #52]	; 0x34
  canRxFlags.flags.byte = 0;
 8003ffe:	4b46      	ldr	r3, [pc, #280]	; (8004118 <main+0x230>)
 8004000:	7018      	strb	r0, [r3, #0]
  slcanClearAllFilters();
 8004002:	f000 fc71 	bl	80048e8 <slcanClearAllFilters>
  HAL_NVIC_SetPriority(CEC_CAN_IRQn, 2, 2);
 8004006:	2202      	movs	r2, #2
 8004008:	201e      	movs	r0, #30
 800400a:	0011      	movs	r1, r2
 800400c:	f7fc fd72 	bl	8000af4 <HAL_NVIC_SetPriority>
  HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 8004010:	0039      	movs	r1, r7
 8004012:	0020      	movs	r0, r4
 8004014:	f7fc fb1c 	bl	8000650 <HAL_CAN_Receive_IT>
  USART2->CR1 &= ~USART_CR1_UE;
 8004018:	2201      	movs	r2, #1
 800401a:	6833      	ldr	r3, [r6, #0]
  HAL_Delay(1);
 800401c:	2001      	movs	r0, #1
  USART2->CR1 &= ~USART_CR1_UE;
 800401e:	4393      	bics	r3, r2
 8004020:	6033      	str	r3, [r6, #0]
  USART2->CR2 |= USART_CR2_ADDM7;
 8004022:	6873      	ldr	r3, [r6, #4]
 8004024:	320f      	adds	r2, #15
 8004026:	4313      	orrs	r3, r2
 8004028:	6073      	str	r3, [r6, #4]
  USART2->CR2 |= (uint32_t)(0x0D << USART_CR2_ADD_Pos);
 800402a:	23d0      	movs	r3, #208	; 0xd0
 800402c:	6872      	ldr	r2, [r6, #4]
 800402e:	051b      	lsls	r3, r3, #20
 8004030:	4313      	orrs	r3, r2
 8004032:	6073      	str	r3, [r6, #4]
  USART2->CR1 |= USART_CR1_CMIE;
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	6832      	ldr	r2, [r6, #0]
 8004038:	01db      	lsls	r3, r3, #7
 800403a:	4313      	orrs	r3, r2
  USART2->CR1 &= ~USART_CR1_RXNEIE;
 800403c:	2220      	movs	r2, #32
  USART2->CR1 |= USART_CR1_CMIE;
 800403e:	6033      	str	r3, [r6, #0]
  USART2->CR1 &= ~USART_CR1_RXNEIE;
 8004040:	6833      	ldr	r3, [r6, #0]
 8004042:	4393      	bics	r3, r2
 8004044:	6033      	str	r3, [r6, #0]
  HAL_Delay(1);
 8004046:	f7fc f937 	bl	80002b8 <HAL_Delay>
  USART2->CR1 |= USART_CR1_UE;
 800404a:	2201      	movs	r2, #1
 800404c:	6833      	ldr	r3, [r6, #0]
  HAL_UART_Receive_DMA(&huart2, uart_rxBuffer, UART_RX_BUFFER_SIZE);
 800404e:	0028      	movs	r0, r5
  USART2->CR1 |= USART_CR1_UE;
 8004050:	4313      	orrs	r3, r2
 8004052:	6033      	str	r3, [r6, #0]
  HAL_UART_Receive_DMA(&huart2, uart_rxBuffer, UART_RX_BUFFER_SIZE);
 8004054:	4e31      	ldr	r6, [pc, #196]	; (800411c <main+0x234>)
 8004056:	321d      	adds	r2, #29
 8004058:	0031      	movs	r1, r6
 800405a:	f7fe fd51 	bl	8002b00 <HAL_UART_Receive_DMA>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800405e:	003a      	movs	r2, r7
 8004060:	0039      	movs	r1, r7
 8004062:	201c      	movs	r0, #28
 8004064:	f7fc fd46 	bl	8000af4 <HAL_NVIC_SetPriority>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <main+0x238>)
 800406c:	0552      	lsls	r2, r2, #21
 800406e:	601a      	str	r2, [r3, #0]
  initCanOnStart();
 8004070:	f000 f94c 	bl	800430c <initCanOnStart>
		__HAL_UART_FLUSH_DRREGISTER(&huart2); //clear the register
 8004074:	2308      	movs	r3, #8
 8004076:	2510      	movs	r5, #16
 8004078:	9301      	str	r3, [sp, #4]
	slCanCheckCommand(command);
 800407a:	482a      	ldr	r0, [pc, #168]	; (8004124 <main+0x23c>)
 800407c:	f000 f9d0 	bl	8004420 <slCanCheckCommand>
	slcanOutputFlush();
 8004080:	f000 f966 	bl	8004350 <slcanOutputFlush>
	if(rxFullFlag)
 8004084:	4f28      	ldr	r7, [pc, #160]	; (8004128 <main+0x240>)
 8004086:	783b      	ldrb	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <main+0x1cc>
		memset(uart_rxBuffer, 0 , UART_RX_BUFFER_SIZE); //clear the buffer
 800408c:	221e      	movs	r2, #30
 800408e:	2100      	movs	r1, #0
 8004090:	0030      	movs	r0, r6
 8004092:	f001 f906 	bl	80052a2 <memset>
		__HAL_UART_FLUSH_DRREGISTER(&huart2); //clear the register
 8004096:	4819      	ldr	r0, [pc, #100]	; (80040fc <main+0x214>)
 8004098:	9901      	ldr	r1, [sp, #4]
 800409a:	6803      	ldr	r3, [r0, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	430a      	orrs	r2, r1
 80040a0:	619a      	str	r2, [r3, #24]
 80040a2:	699a      	ldr	r2, [r3, #24]
		HAL_UART_Receive_DMA(&huart2, uart_rxBuffer, UART_RX_BUFFER_SIZE); //resume DMA
 80040a4:	0031      	movs	r1, r6
		__HAL_UART_FLUSH_DRREGISTER(&huart2); //clear the register
 80040a6:	432a      	orrs	r2, r5
 80040a8:	619a      	str	r2, [r3, #24]
		HAL_UART_Receive_DMA(&huart2, uart_rxBuffer, UART_RX_BUFFER_SIZE); //resume DMA
 80040aa:	221e      	movs	r2, #30
 80040ac:	f7fe fd28 	bl	8002b00 <HAL_UART_Receive_DMA>
		rxFullFlag = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	703b      	strb	r3, [r7, #0]
	if (canRxFlags.flags.byte != 0)
 80040b4:	4b18      	ldr	r3, [pc, #96]	; (8004118 <main+0x230>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00c      	beq.n	80040d6 <main+0x1ee>
		slcanReciveCanFrame(hcan.pRxMsg);
 80040bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80040be:	f000 fbb9 	bl	8004834 <slcanReciveCanFrame>
		canRxFlags.flags.fifo1 = 0;
 80040c2:	2201      	movs	r2, #1
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <main+0x230>)
		HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 80040c6:	2100      	movs	r1, #0
		canRxFlags.flags.fifo1 = 0;
 80040c8:	781b      	ldrb	r3, [r3, #0]
		HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 80040ca:	0020      	movs	r0, r4
		canRxFlags.flags.fifo1 = 0;
 80040cc:	4393      	bics	r3, r2
 80040ce:	4a12      	ldr	r2, [pc, #72]	; (8004118 <main+0x230>)
 80040d0:	7013      	strb	r3, [r2, #0]
		HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 80040d2:	f7fc fabd 	bl	8000650 <HAL_CAN_Receive_IT>
	HAL_IWDG_Refresh(&hiwdg);
 80040d6:	480b      	ldr	r0, [pc, #44]	; (8004104 <main+0x21c>)
 80040d8:	f7fd f90a 	bl	80012f0 <HAL_IWDG_Refresh>
	slCanCheckCommand(command);
 80040dc:	e7cd      	b.n	800407a <main+0x192>
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	20000110 	.word	0x20000110
 80040e4:	20000594 	.word	0x20000594
 80040e8:	40021000 	.word	0x40021000
 80040ec:	48000400 	.word	0x48000400
 80040f0:	200004e8 	.word	0x200004e8
 80040f4:	40006400 	.word	0x40006400
 80040f8:	40004400 	.word	0x40004400
 80040fc:	200005d4 	.word	0x200005d4
 8004100:	001e8480 	.word	0x001e8480
 8004104:	200004d8 	.word	0x200004d8
 8004108:	40003000 	.word	0x40003000
 800410c:	00000fff 	.word	0x00000fff
 8004110:	200005b8 	.word	0x200005b8
 8004114:	20000570 	.word	0x20000570
 8004118:	200004d4 	.word	0x200004d4
 800411c:	20000598 	.word	0x20000598
 8004120:	e000e100 	.word	0xe000e100
 8004124:	20000180 	.word	0x20000180
 8004128:	2000017e 	.word	0x2000017e

0800412c <HAL_UART_TxCpltCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	uint32_t err = huart->ErrorCode;
 800412c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
	UNUSED(err);
}
 800412e:	4770      	bx	lr

08004130 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004130:	b510      	push	{r4, lr}
	uint32_t err = huart->ErrorCode;
//	HAL_UART_Transmit(&huart2, sl_frame, sl_frame_len, 100);
	HAL_UART_Receive_DMA(huart, uart_rxBuffer, UART_RX_BUFFER_SIZE); //resume DMA
 8004132:	221e      	movs	r2, #30
 8004134:	4902      	ldr	r1, [pc, #8]	; (8004140 <HAL_UART_ErrorCallback+0x10>)
	uint32_t err = huart->ErrorCode;
 8004136:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
	HAL_UART_Receive_DMA(huart, uart_rxBuffer, UART_RX_BUFFER_SIZE); //resume DMA
 8004138:	f7fe fce2 	bl	8002b00 <HAL_UART_Receive_DMA>
	UNUSED(err);
}
 800413c:	bd10      	pop	{r4, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	20000598 	.word	0x20000598

08004144 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004144:	b510      	push	{r4, lr}
	HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 8004146:	2100      	movs	r1, #0
 8004148:	f7fc fa82 	bl	8000650 <HAL_CAN_Receive_IT>
}
 800414c:	bd10      	pop	{r4, pc}
	...

08004150 <HAL_CAN_RxCpltCallback>:

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{
	canRxFlags.flags.fifo1 = 1;
 8004150:	2301      	movs	r3, #1
 8004152:	4a02      	ldr	r2, [pc, #8]	; (800415c <HAL_CAN_RxCpltCallback+0xc>)
 8004154:	7811      	ldrb	r1, [r2, #0]
 8004156:	430b      	orrs	r3, r1
 8004158:	7013      	strb	r3, [r2, #0]
//    HAL_CAN_Receive_IT(hcan,CAN_FIFO0);
}
 800415a:	4770      	bx	lr
 800415c:	200004d4 	.word	0x200004d4

08004160 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
	rxFullFlag = 1;
 8004160:	2201      	movs	r2, #1
{
 8004162:	b510      	push	{r4, lr}
	rxFullFlag = 1;
 8004164:	4b02      	ldr	r3, [pc, #8]	; (8004170 <HAL_UART_RxCpltCallback+0x10>)
	slCanProccesInputUART((const char*)&uart_rxBuffer); //decode buffer content
 8004166:	4803      	ldr	r0, [pc, #12]	; (8004174 <HAL_UART_RxCpltCallback+0x14>)
	rxFullFlag = 1;
 8004168:	701a      	strb	r2, [r3, #0]
	slCanProccesInputUART((const char*)&uart_rxBuffer); //decode buffer content
 800416a:	f000 f91f 	bl	80043ac <slCanProccesInputUART>
//	memset(uart_rxBuffer, 0 , UART_RX_BUFFER_SIZE); //clear the buffer
//	HAL_UART_Receive_DMA(huart, uart_rxBuffer, UART_RX_BUFFER_SIZE); //resume DMA
//	__HAL_UART_FLUSH_DRREGISTER(huart); //clear the register
}
 800416e:	bd10      	pop	{r4, pc}
 8004170:	2000017e 	.word	0x2000017e
 8004174:	20000598 	.word	0x20000598

08004178 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004178:	e7fe      	b.n	8004178 <_Error_Handler>
	...

0800417c <slcanSetOutputChar>:
  * @param  c - data to add
  * @retval None
  */
static void slcanSetOutputChar(uint8_t c)
{
	if (sl_frame_len < sizeof(sl_frame))
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <slcanSetOutputChar+0x20>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b1f      	cmp	r3, #31
 8004184:	d808      	bhi.n	8004198 <slcanSetOutputChar+0x1c>
	{
		sl_frame[sl_frame_len] = c;
 8004186:	4a05      	ldr	r2, [pc, #20]	; (800419c <slcanSetOutputChar+0x20>)
 8004188:	7813      	ldrb	r3, [r2, #0]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4904      	ldr	r1, [pc, #16]	; (80041a0 <slcanSetOutputChar+0x24>)
 800418e:	54c8      	strb	r0, [r1, r3]
		sl_frame_len ++;
 8004190:	7813      	ldrb	r3, [r2, #0]
 8004192:	3301      	adds	r3, #1
 8004194:	b2db      	uxtb	r3, r3
 8004196:	7013      	strb	r3, [r2, #0]
	}
}
 8004198:	4770      	bx	lr
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	20000249 	.word	0x20000249
 80041a0:	20000644 	.word	0x20000644

080041a4 <slCanSendNibble>:
  * @brief  Add given nible value as hexadecimal string to buffer
  * @param  c - data to add
  * @retval None
  */
static void slCanSendNibble(uint8_t ch)
{
 80041a4:	b510      	push	{r4, lr}
	ch = ch > 9 ? ch - 10 + 'A' : ch + '0';
 80041a6:	2809      	cmp	r0, #9
 80041a8:	d804      	bhi.n	80041b4 <slCanSendNibble+0x10>
 80041aa:	3030      	adds	r0, #48	; 0x30
 80041ac:	b2c0      	uxtb	r0, r0
	slcanSetOutputChar(ch);
 80041ae:	f7ff ffe5 	bl	800417c <slcanSetOutputChar>
}
 80041b2:	bd10      	pop	{r4, pc}
	ch = ch > 9 ? ch - 10 + 'A' : ch + '0';
 80041b4:	3037      	adds	r0, #55	; 0x37
 80041b6:	b2c0      	uxtb	r0, r0
 80041b8:	e7f9      	b.n	80041ae <slCanSendNibble+0xa>

080041ba <slcanSetOutputAsHex>:
  * @brief  Add given byte value as hexadecimal string to buffer
  * @param  value - data to add
  * @retval None
  */
static void slcanSetOutputAsHex(uint8_t ch)
{
 80041ba:	b510      	push	{r4, lr}
 80041bc:	0004      	movs	r4, r0
	slCanSendNibble(ch >> 4);
 80041be:	0900      	lsrs	r0, r0, #4
 80041c0:	f7ff fff0 	bl	80041a4 <slCanSendNibble>
	slCanSendNibble(ch & 0x0F);
 80041c4:	200f      	movs	r0, #15
 80041c6:	4020      	ands	r0, r4
 80041c8:	f7ff ffec 	bl	80041a4 <slCanSendNibble>
}
 80041cc:	bd10      	pop	{r4, pc}

080041ce <parseHex>:
  * @param  canmsg - line Input string
  * 		len    - of characters to interpret
  * 		value  - Pointer to variable for the resulting decoded value
  * @retval 0 on error, 1 on success
  */
static uint8_t parseHex(uint8_t* line, uint8_t len, uint32_t* value) {
 80041ce:	b530      	push	{r4, r5, lr}
    *value = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	6013      	str	r3, [r2, #0]
    while (len--) {
 80041d4:	e009      	b.n	80041ea <parseHex+0x1c>
        if (*line == 0) return 0;
        *value <<= 4;
        if ((*line >= '0') && (*line <= '9')) {
           *value += *line - '0';
        } else if ((*line >= 'A') && (*line <= 'F')) {
 80041d6:	001d      	movs	r5, r3
 80041d8:	3d41      	subs	r5, #65	; 0x41
 80041da:	b2ed      	uxtb	r5, r5
 80041dc:	2d05      	cmp	r5, #5
 80041de:	d818      	bhi.n	8004212 <parseHex+0x44>
           *value += *line - 'A' + 10;
 80041e0:	185b      	adds	r3, r3, r1
 80041e2:	3b37      	subs	r3, #55	; 0x37
 80041e4:	6013      	str	r3, [r2, #0]
        } else if ((*line >= 'a') && (*line <= 'f')) {
           *value += *line - 'a' + 10;
        } else return 0;
        line++;
 80041e6:	3001      	adds	r0, #1
    while (len--) {
 80041e8:	0021      	movs	r1, r4
 80041ea:	1e4c      	subs	r4, r1, #1
 80041ec:	b2e4      	uxtb	r4, r4
 80041ee:	2900      	cmp	r1, #0
 80041f0:	d018      	beq.n	8004224 <parseHex+0x56>
        if (*line == 0) return 0;
 80041f2:	7803      	ldrb	r3, [r0, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d016      	beq.n	8004226 <parseHex+0x58>
        *value <<= 4;
 80041f8:	6813      	ldr	r3, [r2, #0]
 80041fa:	0119      	lsls	r1, r3, #4
 80041fc:	6011      	str	r1, [r2, #0]
        if ((*line >= '0') && (*line <= '9')) {
 80041fe:	7803      	ldrb	r3, [r0, #0]
 8004200:	001d      	movs	r5, r3
 8004202:	3d30      	subs	r5, #48	; 0x30
 8004204:	b2ed      	uxtb	r5, r5
 8004206:	2d09      	cmp	r5, #9
 8004208:	d8e5      	bhi.n	80041d6 <parseHex+0x8>
           *value += *line - '0';
 800420a:	185b      	adds	r3, r3, r1
 800420c:	3b30      	subs	r3, #48	; 0x30
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e7e9      	b.n	80041e6 <parseHex+0x18>
        } else if ((*line >= 'a') && (*line <= 'f')) {
 8004212:	001d      	movs	r5, r3
 8004214:	3d61      	subs	r5, #97	; 0x61
 8004216:	b2ed      	uxtb	r5, r5
 8004218:	2d05      	cmp	r5, #5
 800421a:	d806      	bhi.n	800422a <parseHex+0x5c>
           *value += *line - 'a' + 10;
 800421c:	185b      	adds	r3, r3, r1
 800421e:	3b57      	subs	r3, #87	; 0x57
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e7e0      	b.n	80041e6 <parseHex+0x18>
    }
    return 1;
 8004224:	2301      	movs	r3, #1
}
 8004226:	0018      	movs	r0, r3
 8004228:	bd30      	pop	{r4, r5, pc}
        } else return 0;
 800422a:	2300      	movs	r3, #0
 800422c:	e7fb      	b.n	8004226 <parseHex+0x58>
	...

08004230 <transmitStd>:
/**
 * @brief  Interprets given line and transmit can message
 * @param  line Line string which contains the transmit command
 * @retval HAL status
 */
static uint8_t transmitStd(uint8_t* line) {
 8004230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004232:	b083      	sub	sp, #12
 8004234:	0005      	movs	r5, r0
    uint32_t temp;
    uint8_t idlen;
    HAL_StatusTypeDef tr;

    if ((line[0] == 'r') || (line[0] == 'R'))
 8004236:	7803      	ldrb	r3, [r0, #0]
 8004238:	2b72      	cmp	r3, #114	; 0x72
 800423a:	d042      	beq.n	80042c2 <transmitStd+0x92>
 800423c:	2b52      	cmp	r3, #82	; 0x52
 800423e:	d040      	beq.n	80042c2 <transmitStd+0x92>
    {
    	hcan.pTxMsg->RTR = CAN_RTR_REMOTE;
    } else
    {
    	hcan.pTxMsg->RTR = CAN_RTR_DATA;
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <transmitStd+0xd8>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	2200      	movs	r2, #0
 8004246:	60da      	str	r2, [r3, #12]
    }

    // upper case -> extended identifier
    if (line[0] < 'Z') {
 8004248:	782b      	ldrb	r3, [r5, #0]
 800424a:	2b59      	cmp	r3, #89	; 0x59
 800424c:	d83e      	bhi.n	80042cc <transmitStd+0x9c>
    	idlen = 8;
        if (!parseHex(&line[1], idlen, &temp)) return 0;
 800424e:	1c68      	adds	r0, r5, #1
 8004250:	aa01      	add	r2, sp, #4
 8004252:	2108      	movs	r1, #8
 8004254:	f7ff ffbb 	bl	80041ce <parseHex>
 8004258:	2800      	cmp	r0, #0
 800425a:	d053      	beq.n	8004304 <transmitStd+0xd4>
        hcan.pTxMsg->IDE = CAN_ID_EXT;
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <transmitStd+0xd8>)
 800425e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004260:	2104      	movs	r1, #4
 8004262:	6091      	str	r1, [r2, #8]
        hcan.pTxMsg->ExtId = temp;
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	9a01      	ldr	r2, [sp, #4]
 8004268:	605a      	str	r2, [r3, #4]
    	idlen = 8;
 800426a:	2008      	movs	r0, #8
		hcan.pTxMsg->IDE = CAN_ID_STD;
		hcan.pTxMsg->StdId = temp;
    }


    if (!parseHex(&line[1 + idlen], 1, &temp)) return 0;
 800426c:	0007      	movs	r7, r0
 800426e:	3001      	adds	r0, #1
 8004270:	1828      	adds	r0, r5, r0
 8004272:	aa01      	add	r2, sp, #4
 8004274:	2101      	movs	r1, #1
 8004276:	f7ff ffaa 	bl	80041ce <parseHex>
 800427a:	2800      	cmp	r0, #0
 800427c:	d042      	beq.n	8004304 <transmitStd+0xd4>
    hcan.pTxMsg->DLC = temp;
 800427e:	4b22      	ldr	r3, [pc, #136]	; (8004308 <transmitStd+0xd8>)
 8004280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004282:	9901      	ldr	r1, [sp, #4]
 8004284:	6111      	str	r1, [r2, #16]

    if (hcan.pTxMsg->RTR == CAN_RTR_DATA) {
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	2a00      	cmp	r2, #0
 800428c:	d12e      	bne.n	80042ec <transmitStd+0xbc>
    	uint8_t i;
        uint8_t length = hcan.pTxMsg->DLC;
 800428e:	7c1e      	ldrb	r6, [r3, #16]
        if (length > 8) length = 8;
 8004290:	2e08      	cmp	r6, #8
 8004292:	d900      	bls.n	8004296 <transmitStd+0x66>
 8004294:	2608      	movs	r6, #8
        for (i = 0; i < length; i++) {
 8004296:	2400      	movs	r4, #0
 8004298:	42b4      	cmp	r4, r6
 800429a:	d227      	bcs.n	80042ec <transmitStd+0xbc>
            if (!parseHex(&line[idlen + 2 + i*2], 2, &temp)) return 0;
 800429c:	1cbb      	adds	r3, r7, #2
 800429e:	0062      	lsls	r2, r4, #1
 80042a0:	1898      	adds	r0, r3, r2
 80042a2:	1828      	adds	r0, r5, r0
 80042a4:	aa01      	add	r2, sp, #4
 80042a6:	2102      	movs	r1, #2
 80042a8:	f7ff ff91 	bl	80041ce <parseHex>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d029      	beq.n	8004304 <transmitStd+0xd4>
            hcan.pTxMsg->Data[i] = temp;
 80042b0:	4b15      	ldr	r3, [pc, #84]	; (8004308 <transmitStd+0xd8>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	191b      	adds	r3, r3, r4
 80042b6:	466a      	mov	r2, sp
 80042b8:	7912      	ldrb	r2, [r2, #4]
 80042ba:	751a      	strb	r2, [r3, #20]
        for (i = 0; i < length; i++) {
 80042bc:	3401      	adds	r4, #1
 80042be:	b2e4      	uxtb	r4, r4
 80042c0:	e7ea      	b.n	8004298 <transmitStd+0x68>
    	hcan.pTxMsg->RTR = CAN_RTR_REMOTE;
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <transmitStd+0xd8>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	2202      	movs	r2, #2
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	e7bd      	b.n	8004248 <transmitStd+0x18>
    	if (!parseHex(&line[1], idlen, &temp)) return 0;
 80042cc:	1c68      	adds	r0, r5, #1
 80042ce:	aa01      	add	r2, sp, #4
 80042d0:	2103      	movs	r1, #3
 80042d2:	f7ff ff7c 	bl	80041ce <parseHex>
 80042d6:	2800      	cmp	r0, #0
 80042d8:	d014      	beq.n	8004304 <transmitStd+0xd4>
		hcan.pTxMsg->IDE = CAN_ID_STD;
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <transmitStd+0xd8>)
 80042dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042de:	2100      	movs	r1, #0
 80042e0:	6091      	str	r1, [r2, #8]
		hcan.pTxMsg->StdId = temp;
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	9a01      	ldr	r2, [sp, #4]
 80042e6:	601a      	str	r2, [r3, #0]
    	idlen = 3;
 80042e8:	2003      	movs	r0, #3
 80042ea:	e7bf      	b.n	800426c <transmitStd+0x3c>
        }
    }

    HAL_NVIC_DisableIRQ(CEC_CAN_IRQn);
 80042ec:	201e      	movs	r0, #30
 80042ee:	f7fc fc3d 	bl	8000b6c <HAL_NVIC_DisableIRQ>
    tr = HAL_CAN_Transmit(&hcan, 0);
 80042f2:	2100      	movs	r1, #0
 80042f4:	4804      	ldr	r0, [pc, #16]	; (8004308 <transmitStd+0xd8>)
 80042f6:	f7fc f915 	bl	8000524 <HAL_CAN_Transmit>
 80042fa:	0004      	movs	r4, r0
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80042fc:	201e      	movs	r0, #30
 80042fe:	f7fc fc2b 	bl	8000b58 <HAL_NVIC_EnableIRQ>
    return tr;
 8004302:	0020      	movs	r0, r4
}
 8004304:	b003      	add	sp, #12
 8004306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004308:	200004e8 	.word	0x200004e8

0800430c <initCanOnStart>:
{
 800430c:	b510      	push	{r4, lr}
	slcanSetCANBaudRate(CAN_BR_1M);
 800430e:	2008      	movs	r0, #8
 8004310:	f000 fb96 	bl	8004a40 <slcanSetCANBaudRate>
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8004314:	2200      	movs	r2, #0
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <initCanOnStart+0x28>)
 8004318:	609a      	str	r2, [r3, #8]
	if(CANInit() == HAL_OK)
 800431a:	f000 fad5 	bl	80048c8 <CANInit>
 800431e:	2800      	cmp	r0, #0
 8004320:	d000      	beq.n	8004324 <initCanOnStart+0x18>
}
 8004322:	bd10      	pop	{r4, pc}
		HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8004324:	301e      	adds	r0, #30
 8004326:	f7fc fc17 	bl	8000b58 <HAL_NVIC_EnableIRQ>
		state = STATE_OPEN;
 800432a:	2202      	movs	r2, #2
 800432c:	4b02      	ldr	r3, [pc, #8]	; (8004338 <initCanOnStart+0x2c>)
 800432e:	701a      	strb	r2, [r3, #0]
}
 8004330:	e7f7      	b.n	8004322 <initCanOnStart+0x16>
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	200004e8 	.word	0x200004e8
 8004338:	2000024a 	.word	0x2000024a

0800433c <slcanClose>:
{
 800433c:	b510      	push	{r4, lr}
	HAL_NVIC_DisableIRQ(CEC_CAN_IRQn);
 800433e:	201e      	movs	r0, #30
 8004340:	f7fc fc14 	bl	8000b6c <HAL_NVIC_DisableIRQ>
	state = STATE_CONFIG;
 8004344:	2200      	movs	r2, #0
 8004346:	4b01      	ldr	r3, [pc, #4]	; (800434c <slcanClose+0x10>)
 8004348:	701a      	strb	r2, [r3, #0]
}
 800434a:	bd10      	pop	{r4, pc}
 800434c:	2000024a 	.word	0x2000024a

08004350 <slcanOutputFlush>:
{
 8004350:	b510      	push	{r4, lr}
	if (sl_frame_len > 0)
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <slcanOutputFlush+0x4c>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00e      	beq.n	8004378 <slcanOutputFlush+0x28>
		if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED) // use auxiliary uart only if usb not connected
 800435a:	23fe      	movs	r3, #254	; 0xfe
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4a10      	ldr	r2, [pc, #64]	; (80043a0 <slcanOutputFlush+0x50>)
 8004360:	5cd3      	ldrb	r3, [r2, r3]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d009      	beq.n	800437a <slcanOutputFlush+0x2a>
			HAL_UART_Transmit_DMA(&huart2,sl_frame,sl_frame_len);
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <slcanOutputFlush+0x4c>)
 8004368:	781a      	ldrb	r2, [r3, #0]
 800436a:	490e      	ldr	r1, [pc, #56]	; (80043a4 <slcanOutputFlush+0x54>)
 800436c:	480e      	ldr	r0, [pc, #56]	; (80043a8 <slcanOutputFlush+0x58>)
 800436e:	f7fe fb81 	bl	8002a74 <HAL_UART_Transmit_DMA>
		sl_frame_len = 0;
 8004372:	2200      	movs	r2, #0
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <slcanOutputFlush+0x4c>)
 8004376:	701a      	strb	r2, [r3, #0]
}
 8004378:	bd10      	pop	{r4, pc}
			while (((USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData)->TxState){;} //should change by hardware
 800437a:	2386      	movs	r3, #134	; 0x86
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4a08      	ldr	r2, [pc, #32]	; (80043a0 <slcanOutputFlush+0x50>)
 8004380:	58d2      	ldr	r2, [r2, r3]
 8004382:	3b04      	subs	r3, #4
 8004384:	58d3      	ldr	r3, [r2, r3]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f7      	bne.n	800437a <slcanOutputFlush+0x2a>
			while (CDC_Transmit_FS(sl_frame, sl_frame_len) != USBD_OK);
 800438a:	4b04      	ldr	r3, [pc, #16]	; (800439c <slcanOutputFlush+0x4c>)
 800438c:	7819      	ldrb	r1, [r3, #0]
 800438e:	4805      	ldr	r0, [pc, #20]	; (80043a4 <slcanOutputFlush+0x54>)
 8004390:	f000 fd1e 	bl	8004dd0 <CDC_Transmit_FS>
 8004394:	2800      	cmp	r0, #0
 8004396:	d1f8      	bne.n	800438a <slcanOutputFlush+0x3a>
 8004398:	e7eb      	b.n	8004372 <slcanOutputFlush+0x22>
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	20000249 	.word	0x20000249
 80043a0:	20000664 	.word	0x20000664
 80043a4:	20000644 	.word	0x20000644
 80043a8:	200005d4 	.word	0x200005d4

080043ac <slCanProccesInputUART>:
{
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	0005      	movs	r5, r0
	memset(command, 0, sizeof(command));
 80043b0:	4c07      	ldr	r4, [pc, #28]	; (80043d0 <slCanProccesInputUART+0x24>)
 80043b2:	2264      	movs	r2, #100	; 0x64
 80043b4:	2100      	movs	r1, #0
 80043b6:	0020      	movs	r0, r4
 80043b8:	f000 ff73 	bl	80052a2 <memset>
	memcpy(command,string,strlen(string));
 80043bc:	0028      	movs	r0, r5
 80043be:	f7fb fea3 	bl	8000108 <strlen>
 80043c2:	0002      	movs	r2, r0
 80043c4:	0029      	movs	r1, r5
 80043c6:	0020      	movs	r0, r4
 80043c8:	f000 ff62 	bl	8005290 <memcpy>
}
 80043cc:	2000      	movs	r0, #0
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	20000180 	.word	0x20000180

080043d4 <slCanProccesInput>:
{
 80043d4:	b570      	push	{r4, r5, r6, lr}
    if (ch == SLCAN_CR) {
 80043d6:	280d      	cmp	r0, #13
 80043d8:	d00c      	beq.n	80043f4 <slCanProccesInput+0x20>
    } else if (ch != SLCAN_LR) {
 80043da:	280a      	cmp	r0, #10
 80043dc:	d015      	beq.n	800440a <slCanProccesInput+0x36>
        line[linepos] = ch;
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <slCanProccesInput+0x40>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	4a0d      	ldr	r2, [pc, #52]	; (8004418 <slCanProccesInput+0x44>)
 80043e4:	54d0      	strb	r0, [r2, r3]
        if (linepos < LINE_MAXLEN - 1) linepos++;
 80043e6:	2b62      	cmp	r3, #98	; 0x62
 80043e8:	d811      	bhi.n	800440e <slCanProccesInput+0x3a>
 80043ea:	3301      	adds	r3, #1
 80043ec:	4a09      	ldr	r2, [pc, #36]	; (8004414 <slCanProccesInput+0x40>)
 80043ee:	7013      	strb	r3, [r2, #0]
    return 0;
 80043f0:	2000      	movs	r0, #0
}
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
        line[linepos] = 0;
 80043f4:	4c07      	ldr	r4, [pc, #28]	; (8004414 <slCanProccesInput+0x40>)
 80043f6:	7822      	ldrb	r2, [r4, #0]
 80043f8:	4907      	ldr	r1, [pc, #28]	; (8004418 <slCanProccesInput+0x44>)
 80043fa:	2500      	movs	r5, #0
 80043fc:	548d      	strb	r5, [r1, r2]
        memcpy(command,line,linepos);
 80043fe:	4807      	ldr	r0, [pc, #28]	; (800441c <slCanProccesInput+0x48>)
 8004400:	f000 ff46 	bl	8005290 <memcpy>
        linepos = 0;
 8004404:	7025      	strb	r5, [r4, #0]
        return 1;
 8004406:	2001      	movs	r0, #1
 8004408:	e7f3      	b.n	80043f2 <slCanProccesInput+0x1e>
    return 0;
 800440a:	2000      	movs	r0, #0
 800440c:	e7f1      	b.n	80043f2 <slCanProccesInput+0x1e>
 800440e:	2000      	movs	r0, #0
 8004410:	e7ef      	b.n	80043f2 <slCanProccesInput+0x1e>
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	20000248 	.word	0x20000248
 8004418:	200001e4 	.word	0x200001e4
 800441c:	20000180 	.word	0x20000180

08004420 <slCanCheckCommand>:
 * @brief  Parse given command line
 * @param  line Line string to parse
 * @retval None
 */
uint8_t slCanCheckCommand(uint8_t *line)
{
 8004420:	b530      	push	{r4, r5, lr}
 8004422:	b095      	sub	sp, #84	; 0x54
 8004424:	0004      	movs	r4, r0
	uint8_t result = SLCAN_BELL;
	if (line[0] == 0)
 8004426:	7800      	ldrb	r0, [r0, #0]
 8004428:	2800      	cmp	r0, #0
 800442a:	d017      	beq.n	800445c <slCanCheckCommand+0x3c>
	{
		return 0;
	}
    switch (line[0]) {
 800442c:	3843      	subs	r0, #67	; 0x43
 800442e:	b2c3      	uxtb	r3, r0
 8004430:	2b33      	cmp	r3, #51	; 0x33
 8004432:	d900      	bls.n	8004436 <slCanCheckCommand+0x16>
 8004434:	e1ec      	b.n	8004810 <slCanCheckCommand+0x3f0>
 8004436:	0098      	lsls	r0, r3, #2
 8004438:	4bab      	ldr	r3, [pc, #684]	; (80046e8 <slCanCheckCommand+0x2c8>)
 800443a:	581b      	ldr	r3, [r3, r0]
 800443c:	469f      	mov	pc, r3
    	case 'a':
    	{
    		if (terminator == SLCAN_CR)
 800443e:	4bab      	ldr	r3, [pc, #684]	; (80046ec <slCanCheckCommand+0x2cc>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b0d      	cmp	r3, #13
 8004444:	d00c      	beq.n	8004460 <slCanCheckCommand+0x40>
    			terminator = SLCAN_LR;
    		else
    			terminator = SLCAN_CR;
 8004446:	220d      	movs	r2, #13
 8004448:	4ba8      	ldr	r3, [pc, #672]	; (80046ec <slCanCheckCommand+0x2cc>)
 800444a:	701a      	strb	r2, [r3, #0]
    		result = terminator;
 800444c:	4ba7      	ldr	r3, [pc, #668]	; (80046ec <slCanCheckCommand+0x2cc>)
 800444e:	781d      	ldrb	r5, [r3, #0]
        	 }
        	 break;

    }

   line[0] = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	7023      	strb	r3, [r4, #0]
   slcanSetOutputChar(result);
 8004454:	0028      	movs	r0, r5
 8004456:	f7ff fe91 	bl	800417c <slcanSetOutputChar>
   return 1;
 800445a:	2001      	movs	r0, #1
}
 800445c:	b015      	add	sp, #84	; 0x54
 800445e:	bd30      	pop	{r4, r5, pc}
    			terminator = SLCAN_LR;
 8004460:	220a      	movs	r2, #10
 8004462:	4ba2      	ldr	r3, [pc, #648]	; (80046ec <slCanCheckCommand+0x2cc>)
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	e7f1      	b.n	800444c <slCanCheckCommand+0x2c>
            if (state == STATE_CONFIG)
 8004468:	4ba1      	ldr	r3, [pc, #644]	; (80046f0 <slCanCheckCommand+0x2d0>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d000      	beq.n	8004472 <slCanCheckCommand+0x52>
 8004470:	e1d0      	b.n	8004814 <slCanCheckCommand+0x3f4>
                switch (line[1]) {
 8004472:	7863      	ldrb	r3, [r4, #1]
 8004474:	3b30      	subs	r3, #48	; 0x30
 8004476:	b2da      	uxtb	r2, r3
 8004478:	2a09      	cmp	r2, #9
 800447a:	d900      	bls.n	800447e <slCanCheckCommand+0x5e>
 800447c:	e1cc      	b.n	8004818 <slCanCheckCommand+0x3f8>
 800447e:	0093      	lsls	r3, r2, #2
 8004480:	4a9c      	ldr	r2, [pc, #624]	; (80046f4 <slCanCheckCommand+0x2d4>)
 8004482:	58d3      	ldr	r3, [r2, r3]
 8004484:	469f      	mov	pc, r3
                    case '0': slcanSetCANBaudRate(CAN_BR_10K);  result = terminator; break;
 8004486:	2000      	movs	r0, #0
 8004488:	f000 fada 	bl	8004a40 <slcanSetCANBaudRate>
 800448c:	4b97      	ldr	r3, [pc, #604]	; (80046ec <slCanCheckCommand+0x2cc>)
 800448e:	781d      	ldrb	r5, [r3, #0]
 8004490:	e7de      	b.n	8004450 <slCanCheckCommand+0x30>
                    case '1': slcanSetCANBaudRate(CAN_BR_20K);  result = terminator; break;
 8004492:	2001      	movs	r0, #1
 8004494:	f000 fad4 	bl	8004a40 <slcanSetCANBaudRate>
 8004498:	4b94      	ldr	r3, [pc, #592]	; (80046ec <slCanCheckCommand+0x2cc>)
 800449a:	781d      	ldrb	r5, [r3, #0]
 800449c:	e7d8      	b.n	8004450 <slCanCheckCommand+0x30>
                    case '2': slcanSetCANBaudRate(CAN_BR_50K);  result = terminator; break;
 800449e:	2002      	movs	r0, #2
 80044a0:	f000 face 	bl	8004a40 <slcanSetCANBaudRate>
 80044a4:	4b91      	ldr	r3, [pc, #580]	; (80046ec <slCanCheckCommand+0x2cc>)
 80044a6:	781d      	ldrb	r5, [r3, #0]
 80044a8:	e7d2      	b.n	8004450 <slCanCheckCommand+0x30>
                    case '3': slcanSetCANBaudRate(CAN_BR_100K); result = terminator; break;
 80044aa:	2003      	movs	r0, #3
 80044ac:	f000 fac8 	bl	8004a40 <slcanSetCANBaudRate>
 80044b0:	4b8e      	ldr	r3, [pc, #568]	; (80046ec <slCanCheckCommand+0x2cc>)
 80044b2:	781d      	ldrb	r5, [r3, #0]
 80044b4:	e7cc      	b.n	8004450 <slCanCheckCommand+0x30>
                    case '4': slcanSetCANBaudRate(CAN_BR_125K); result = terminator; break;
 80044b6:	2004      	movs	r0, #4
 80044b8:	f000 fac2 	bl	8004a40 <slcanSetCANBaudRate>
 80044bc:	4b8b      	ldr	r3, [pc, #556]	; (80046ec <slCanCheckCommand+0x2cc>)
 80044be:	781d      	ldrb	r5, [r3, #0]
 80044c0:	e7c6      	b.n	8004450 <slCanCheckCommand+0x30>
                    case '5': slcanSetCANBaudRate(CAN_BR_250K); result = terminator; break;
 80044c2:	2005      	movs	r0, #5
 80044c4:	f000 fabc 	bl	8004a40 <slcanSetCANBaudRate>
 80044c8:	4b88      	ldr	r3, [pc, #544]	; (80046ec <slCanCheckCommand+0x2cc>)
 80044ca:	781d      	ldrb	r5, [r3, #0]
 80044cc:	e7c0      	b.n	8004450 <slCanCheckCommand+0x30>
                    case '6': slcanSetCANBaudRate(CAN_BR_500K); result = terminator; break;
 80044ce:	2006      	movs	r0, #6
 80044d0:	f000 fab6 	bl	8004a40 <slcanSetCANBaudRate>
 80044d4:	4b85      	ldr	r3, [pc, #532]	; (80046ec <slCanCheckCommand+0x2cc>)
 80044d6:	781d      	ldrb	r5, [r3, #0]
 80044d8:	e7ba      	b.n	8004450 <slCanCheckCommand+0x30>
                    case '7': slcanSetCANBaudRate(CAN_BR_800K); result = terminator; break;
 80044da:	2007      	movs	r0, #7
 80044dc:	f000 fab0 	bl	8004a40 <slcanSetCANBaudRate>
 80044e0:	4b82      	ldr	r3, [pc, #520]	; (80046ec <slCanCheckCommand+0x2cc>)
 80044e2:	781d      	ldrb	r5, [r3, #0]
 80044e4:	e7b4      	b.n	8004450 <slCanCheckCommand+0x30>
                    case '8': slcanSetCANBaudRate(CAN_BR_1M);   result = terminator; break;
 80044e6:	2008      	movs	r0, #8
 80044e8:	f000 faaa 	bl	8004a40 <slcanSetCANBaudRate>
 80044ec:	4b7f      	ldr	r3, [pc, #508]	; (80046ec <slCanCheckCommand+0x2cc>)
 80044ee:	781d      	ldrb	r5, [r3, #0]
 80044f0:	e7ae      	b.n	8004450 <slCanCheckCommand+0x30>
                    case '9': slcanSetCANBaudRate(CAN_BR_83K);  result = terminator; break;
 80044f2:	2024      	movs	r0, #36	; 0x24
 80044f4:	f000 faa4 	bl	8004a40 <slcanSetCANBaudRate>
 80044f8:	4b7c      	ldr	r3, [pc, #496]	; (80046ec <slCanCheckCommand+0x2cc>)
 80044fa:	781d      	ldrb	r5, [r3, #0]
 80044fc:	e7a8      	b.n	8004450 <slCanCheckCommand+0x30>
			result = terminator;
 80044fe:	4b7b      	ldr	r3, [pc, #492]	; (80046ec <slCanCheckCommand+0x2cc>)
 8004500:	781d      	ldrb	r5, [r3, #0]
			break;
 8004502:	e7a5      	b.n	8004450 <slCanCheckCommand+0x30>
            if (state == STATE_CONFIG)
 8004504:	4b7a      	ldr	r3, [pc, #488]	; (80046f0 <slCanCheckCommand+0x2d0>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <slCanCheckCommand+0xf0>
	uint8_t result = SLCAN_BELL;
 800450c:	2507      	movs	r5, #7
 800450e:	e79f      	b.n	8004450 <slCanCheckCommand+0x30>
                if (parseHex(&line[1], 2, &sjw) && parseHex(&line[3], 2, &bs1) &&
 8004510:	1c60      	adds	r0, r4, #1
 8004512:	aa07      	add	r2, sp, #28
 8004514:	2102      	movs	r1, #2
 8004516:	f7ff fe5a 	bl	80041ce <parseHex>
 800451a:	2800      	cmp	r0, #0
 800451c:	d101      	bne.n	8004522 <slCanCheckCommand+0x102>
	uint8_t result = SLCAN_BELL;
 800451e:	2507      	movs	r5, #7
 8004520:	e796      	b.n	8004450 <slCanCheckCommand+0x30>
                if (parseHex(&line[1], 2, &sjw) && parseHex(&line[3], 2, &bs1) &&
 8004522:	1ce0      	adds	r0, r4, #3
 8004524:	aa08      	add	r2, sp, #32
 8004526:	2102      	movs	r1, #2
 8004528:	f7ff fe51 	bl	80041ce <parseHex>
 800452c:	2800      	cmp	r0, #0
 800452e:	d101      	bne.n	8004534 <slCanCheckCommand+0x114>
	uint8_t result = SLCAN_BELL;
 8004530:	2507      	movs	r5, #7
 8004532:	e78d      	b.n	8004450 <slCanCheckCommand+0x30>
                		parseHex(&line[5], 2, &bs2) && parseHex(&line[7], 4, &pre) ) {
 8004534:	1d60      	adds	r0, r4, #5
 8004536:	aa09      	add	r2, sp, #36	; 0x24
 8004538:	2102      	movs	r1, #2
 800453a:	f7ff fe48 	bl	80041ce <parseHex>
                if (parseHex(&line[1], 2, &sjw) && parseHex(&line[3], 2, &bs1) &&
 800453e:	2800      	cmp	r0, #0
 8004540:	d101      	bne.n	8004546 <slCanCheckCommand+0x126>
	uint8_t result = SLCAN_BELL;
 8004542:	2507      	movs	r5, #7
 8004544:	e784      	b.n	8004450 <slCanCheckCommand+0x30>
                		parseHex(&line[5], 2, &bs2) && parseHex(&line[7], 4, &pre) ) {
 8004546:	1de0      	adds	r0, r4, #7
 8004548:	aa0a      	add	r2, sp, #40	; 0x28
 800454a:	2104      	movs	r1, #4
 800454c:	f7ff fe3f 	bl	80041ce <parseHex>
 8004550:	2800      	cmp	r0, #0
 8004552:	d101      	bne.n	8004558 <slCanCheckCommand+0x138>
	uint8_t result = SLCAN_BELL;
 8004554:	2507      	movs	r5, #7
 8004556:	e77b      	b.n	8004450 <slCanCheckCommand+0x30>
                	hcan.Init.SJW = sjw;
 8004558:	4b67      	ldr	r3, [pc, #412]	; (80046f8 <slCanCheckCommand+0x2d8>)
 800455a:	9a07      	ldr	r2, [sp, #28]
 800455c:	60da      	str	r2, [r3, #12]
                	hcan.Init.BS1 = bs1;
 800455e:	9a08      	ldr	r2, [sp, #32]
 8004560:	611a      	str	r2, [r3, #16]
                	hcan.Init.BS2 = bs2;
 8004562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004564:	615a      	str	r2, [r3, #20]
                	hcan.Init.Prescaler = pre;
 8004566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004568:	605a      	str	r2, [r3, #4]
                	CANInit();
 800456a:	f000 f9ad 	bl	80048c8 <CANInit>
                    result = terminator;
 800456e:	4b5f      	ldr	r3, [pc, #380]	; (80046ec <slCanCheckCommand+0x2cc>)
 8004570:	781d      	ldrb	r5, [r3, #0]
 8004572:	e76d      	b.n	8004450 <slCanCheckCommand+0x30>
                slcanSetOutputChar('V');
 8004574:	2056      	movs	r0, #86	; 0x56
 8004576:	f7ff fe01 	bl	800417c <slcanSetOutputChar>
                slcanSetOutputAsHex(VERSION_HARDWARE_MAJOR);
 800457a:	2001      	movs	r0, #1
 800457c:	f7ff fe1d 	bl	80041ba <slcanSetOutputAsHex>
                slcanSetOutputAsHex(VERSION_HARDWARE_MINOR);
 8004580:	2001      	movs	r0, #1
 8004582:	f7ff fe1a 	bl	80041ba <slcanSetOutputAsHex>
                result = terminator;
 8004586:	4b59      	ldr	r3, [pc, #356]	; (80046ec <slCanCheckCommand+0x2cc>)
 8004588:	781d      	ldrb	r5, [r3, #0]
            break;
 800458a:	e761      	b.n	8004450 <slCanCheckCommand+0x30>
                slcanSetOutputChar('v');
 800458c:	2076      	movs	r0, #118	; 0x76
 800458e:	f7ff fdf5 	bl	800417c <slcanSetOutputChar>
                slcanSetOutputAsHex(VERSION_FIRMWARE_MAJOR);
 8004592:	2004      	movs	r0, #4
 8004594:	f7ff fe11 	bl	80041ba <slcanSetOutputAsHex>
                slcanSetOutputAsHex(VERSION_FIRMWARE_MINOR);
 8004598:	2001      	movs	r0, #1
 800459a:	f7ff fe0e 	bl	80041ba <slcanSetOutputAsHex>
                slcanSetOutputChar('h');
 800459e:	2068      	movs	r0, #104	; 0x68
 80045a0:	f7ff fdec 	bl	800417c <slcanSetOutputChar>
                result = terminator;
 80045a4:	4b51      	ldr	r3, [pc, #324]	; (80046ec <slCanCheckCommand+0x2cc>)
 80045a6:	781d      	ldrb	r5, [r3, #0]
            break;
 80045a8:	e752      	b.n	8004450 <slCanCheckCommand+0x30>
                slcanSetOutputChar('N');
 80045aa:	204e      	movs	r0, #78	; 0x4e
 80045ac:	f7ff fde6 	bl	800417c <slcanSetOutputChar>
                slcanSetOutputAsHex((uint8_t)(serialNumber));
 80045b0:	4d52      	ldr	r5, [pc, #328]	; (80046fc <slCanCheckCommand+0x2dc>)
 80045b2:	6828      	ldr	r0, [r5, #0]
 80045b4:	b2c0      	uxtb	r0, r0
 80045b6:	f7ff fe00 	bl	80041ba <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>8));
 80045ba:	6828      	ldr	r0, [r5, #0]
 80045bc:	1200      	asrs	r0, r0, #8
 80045be:	b2c0      	uxtb	r0, r0
 80045c0:	f7ff fdfb 	bl	80041ba <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>16));
 80045c4:	6828      	ldr	r0, [r5, #0]
 80045c6:	1400      	asrs	r0, r0, #16
 80045c8:	b2c0      	uxtb	r0, r0
 80045ca:	f7ff fdf6 	bl	80041ba <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>24));
 80045ce:	6828      	ldr	r0, [r5, #0]
 80045d0:	0e00      	lsrs	r0, r0, #24
 80045d2:	f7ff fdf2 	bl	80041ba <slcanSetOutputAsHex>
                result = terminator;
 80045d6:	4b45      	ldr	r3, [pc, #276]	; (80046ec <slCanCheckCommand+0x2cc>)
 80045d8:	781d      	ldrb	r5, [r3, #0]
            break;
 80045da:	e739      	b.n	8004450 <slCanCheckCommand+0x30>
            	hcan.Init.Mode = CAN_MODE_NORMAL;
 80045dc:	2200      	movs	r2, #0
 80045de:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <slCanCheckCommand+0x2d8>)
 80045e0:	609a      	str	r2, [r3, #8]
            	if(CANInit() == HAL_OK)
 80045e2:	f000 f971 	bl	80048c8 <CANInit>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d001      	beq.n	80045ee <slCanCheckCommand+0x1ce>
	uint8_t result = SLCAN_BELL;
 80045ea:	2507      	movs	r5, #7
 80045ec:	e730      	b.n	8004450 <slCanCheckCommand+0x30>
					HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80045ee:	301e      	adds	r0, #30
 80045f0:	f7fc fab2 	bl	8000b58 <HAL_NVIC_EnableIRQ>
					state = STATE_OPEN;
 80045f4:	2202      	movs	r2, #2
 80045f6:	4b3e      	ldr	r3, [pc, #248]	; (80046f0 <slCanCheckCommand+0x2d0>)
 80045f8:	701a      	strb	r2, [r3, #0]
					result = terminator;
 80045fa:	4b3c      	ldr	r3, [pc, #240]	; (80046ec <slCanCheckCommand+0x2cc>)
 80045fc:	781d      	ldrb	r5, [r3, #0]
 80045fe:	e727      	b.n	8004450 <slCanCheckCommand+0x30>
            	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8004600:	2280      	movs	r2, #128	; 0x80
 8004602:	05d2      	lsls	r2, r2, #23
 8004604:	4b3c      	ldr	r3, [pc, #240]	; (80046f8 <slCanCheckCommand+0x2d8>)
 8004606:	609a      	str	r2, [r3, #8]
            	HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8004608:	201e      	movs	r0, #30
 800460a:	f7fc faa5 	bl	8000b58 <HAL_NVIC_EnableIRQ>
            	CANInit();
 800460e:	f000 f95b 	bl	80048c8 <CANInit>
                state = STATE_OPEN;
 8004612:	2202      	movs	r2, #2
 8004614:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <slCanCheckCommand+0x2d0>)
 8004616:	701a      	strb	r2, [r3, #0]
                result = terminator;
 8004618:	4b34      	ldr	r3, [pc, #208]	; (80046ec <slCanCheckCommand+0x2cc>)
 800461a:	781d      	ldrb	r5, [r3, #0]
            break;
 800461c:	e718      	b.n	8004450 <slCanCheckCommand+0x30>
            if (state == STATE_CONFIG)
 800461e:	4b34      	ldr	r3, [pc, #208]	; (80046f0 <slCanCheckCommand+0x2d0>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <slCanCheckCommand+0x20a>
	uint8_t result = SLCAN_BELL;
 8004626:	2507      	movs	r5, #7
 8004628:	e712      	b.n	8004450 <slCanCheckCommand+0x30>
            	hcan.Init.Mode = CAN_MODE_SILENT;
 800462a:	2280      	movs	r2, #128	; 0x80
 800462c:	0612      	lsls	r2, r2, #24
 800462e:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <slCanCheckCommand+0x2d8>)
 8004630:	609a      	str	r2, [r3, #8]
            	HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8004632:	201e      	movs	r0, #30
 8004634:	f7fc fa90 	bl	8000b58 <HAL_NVIC_EnableIRQ>
            	CANInit();
 8004638:	f000 f946 	bl	80048c8 <CANInit>
                state = STATE_LISTEN;
 800463c:	2201      	movs	r2, #1
 800463e:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <slCanCheckCommand+0x2d0>)
 8004640:	701a      	strb	r2, [r3, #0]
                result = terminator;
 8004642:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <slCanCheckCommand+0x2cc>)
 8004644:	781d      	ldrb	r5, [r3, #0]
 8004646:	e703      	b.n	8004450 <slCanCheckCommand+0x30>
            	HAL_NVIC_DisableIRQ(CEC_CAN_IRQn);
 8004648:	201e      	movs	r0, #30
 800464a:	f7fc fa8f 	bl	8000b6c <HAL_NVIC_DisableIRQ>
                state = STATE_CONFIG;
 800464e:	2200      	movs	r2, #0
 8004650:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <slCanCheckCommand+0x2d0>)
 8004652:	701a      	strb	r2, [r3, #0]
                result = terminator;
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <slCanCheckCommand+0x2cc>)
 8004656:	781d      	ldrb	r5, [r3, #0]
            break;
 8004658:	e6fa      	b.n	8004450 <slCanCheckCommand+0x30>
            if (state == STATE_OPEN)
 800465a:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <slCanCheckCommand+0x2d0>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d001      	beq.n	8004666 <slCanCheckCommand+0x246>
	uint8_t result = SLCAN_BELL;
 8004662:	2507      	movs	r5, #7
 8004664:	e6f4      	b.n	8004450 <slCanCheckCommand+0x30>
                if (transmitStd(line) == HAL_OK) {
 8004666:	0020      	movs	r0, r4
 8004668:	f7ff fde2 	bl	8004230 <transmitStd>
 800466c:	2800      	cmp	r0, #0
 800466e:	d000      	beq.n	8004672 <slCanCheckCommand+0x252>
 8004670:	e0d4      	b.n	800481c <slCanCheckCommand+0x3fc>
                    if (line[0] < 'Z') slcanSetOutputChar('Z');
 8004672:	7823      	ldrb	r3, [r4, #0]
 8004674:	2b59      	cmp	r3, #89	; 0x59
 8004676:	d805      	bhi.n	8004684 <slCanCheckCommand+0x264>
 8004678:	305a      	adds	r0, #90	; 0x5a
 800467a:	f7ff fd7f 	bl	800417c <slcanSetOutputChar>
                    result = terminator;
 800467e:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <slCanCheckCommand+0x2cc>)
 8004680:	781d      	ldrb	r5, [r3, #0]
 8004682:	e6e5      	b.n	8004450 <slCanCheckCommand+0x30>
                    else slcanSetOutputChar('z');
 8004684:	207a      	movs	r0, #122	; 0x7a
 8004686:	f7ff fd79 	bl	800417c <slcanSetOutputChar>
 800468a:	e7f8      	b.n	800467e <slCanCheckCommand+0x25e>
                unsigned char status = HAL_CAN_GetError(&hcan);
 800468c:	481a      	ldr	r0, [pc, #104]	; (80046f8 <slCanCheckCommand+0x2d8>)
 800468e:	f7fc fa2f 	bl	8000af0 <HAL_CAN_GetError>
 8004692:	b2c5      	uxtb	r5, r0
                slcanSetOutputChar('F');
 8004694:	2046      	movs	r0, #70	; 0x46
 8004696:	f7ff fd71 	bl	800417c <slcanSetOutputChar>
                slcanSetOutputAsHex(status);
 800469a:	0028      	movs	r0, r5
 800469c:	f7ff fd8d 	bl	80041ba <slcanSetOutputAsHex>
                result = terminator;
 80046a0:	4b12      	ldr	r3, [pc, #72]	; (80046ec <slCanCheckCommand+0x2cc>)
 80046a2:	781d      	ldrb	r5, [r3, #0]
            break;
 80046a4:	e6d4      	b.n	8004450 <slCanCheckCommand+0x30>
                if (parseHex(&line[1], 1, &stamping)) {
 80046a6:	1c60      	adds	r0, r4, #1
 80046a8:	aa0a      	add	r2, sp, #40	; 0x28
 80046aa:	2101      	movs	r1, #1
 80046ac:	f7ff fd8f 	bl	80041ce <parseHex>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d002      	beq.n	80046ba <slCanCheckCommand+0x29a>
                    result = terminator;
 80046b4:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <slCanCheckCommand+0x2cc>)
 80046b6:	781d      	ldrb	r5, [r3, #0]
 80046b8:	e6ca      	b.n	8004450 <slCanCheckCommand+0x30>
	uint8_t result = SLCAN_BELL;
 80046ba:	2507      	movs	r5, #7
            break;
 80046bc:	e6c8      	b.n	8004450 <slCanCheckCommand+0x30>
            if (line[1] == 'd') // disable all filtering
 80046be:	7863      	ldrb	r3, [r4, #1]
 80046c0:	2b64      	cmp	r3, #100	; 0x64
 80046c2:	d008      	beq.n	80046d6 <slCanCheckCommand+0x2b6>
            	if (!parseHex(&line[1], 2, &n)) break;
 80046c4:	1c60      	adds	r0, r4, #1
 80046c6:	aa03      	add	r2, sp, #12
 80046c8:	2102      	movs	r1, #2
 80046ca:	f7ff fd80 	bl	80041ce <parseHex>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d116      	bne.n	8004700 <slCanCheckCommand+0x2e0>
	uint8_t result = SLCAN_BELL;
 80046d2:	2507      	movs	r5, #7
 80046d4:	e6bc      	b.n	8004450 <slCanCheckCommand+0x30>
            	slcanClearAllFilters();
 80046d6:	f000 f907 	bl	80048e8 <slcanClearAllFilters>
            	result = terminator;
 80046da:	4b04      	ldr	r3, [pc, #16]	; (80046ec <slCanCheckCommand+0x2cc>)
 80046dc:	781d      	ldrb	r5, [r3, #0]
            	slcanSetOutputChar('M');
 80046de:	204d      	movs	r0, #77	; 0x4d
 80046e0:	f7ff fd4c 	bl	800417c <slcanSetOutputChar>
 80046e4:	e6b4      	b.n	8004450 <slCanCheckCommand+0x30>
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	08005350 	.word	0x08005350
 80046ec:	20000114 	.word	0x20000114
 80046f0:	2000024a 	.word	0x2000024a
 80046f4:	08005420 	.word	0x08005420
 80046f8:	200004e8 	.word	0x200004e8
 80046fc:	20000594 	.word	0x20000594
            	if (!parseHex(&line[3], 2, &b)) break;
 8004700:	1ce0      	adds	r0, r4, #3
 8004702:	aa04      	add	r2, sp, #16
 8004704:	2102      	movs	r1, #2
 8004706:	f7ff fd62 	bl	80041ce <parseHex>
 800470a:	2800      	cmp	r0, #0
 800470c:	d0e1      	beq.n	80046d2 <slCanCheckCommand+0x2b2>
            	if (!parseHex(&line[5], 1, &fflags.reg)) break;
 800470e:	1d60      	adds	r0, r4, #5
 8004710:	aa05      	add	r2, sp, #20
 8004712:	2101      	movs	r1, #1
 8004714:	f7ff fd5b 	bl	80041ce <parseHex>
 8004718:	2800      	cmp	r0, #0
 800471a:	d0da      	beq.n	80046d2 <slCanCheckCommand+0x2b2>
            	if (!parseHex(&line[6], 8, &id)) break;
 800471c:	1da0      	adds	r0, r4, #6
 800471e:	aa08      	add	r2, sp, #32
 8004720:	2108      	movs	r1, #8
 8004722:	f7ff fd54 	bl	80041ce <parseHex>
 8004726:	2800      	cmp	r0, #0
 8004728:	d0d3      	beq.n	80046d2 <slCanCheckCommand+0x2b2>
            	if (!parseHex(&line[14], 1, &idflags.reg)) break;
 800472a:	aa06      	add	r2, sp, #24
 800472c:	2101      	movs	r1, #1
 800472e:	0020      	movs	r0, r4
 8004730:	300e      	adds	r0, #14
 8004732:	f7ff fd4c 	bl	80041ce <parseHex>
 8004736:	2800      	cmp	r0, #0
 8004738:	d0cb      	beq.n	80046d2 <slCanCheckCommand+0x2b2>
            	if (!parseHex(&line[15], 8, &mask)) break;
 800473a:	aa09      	add	r2, sp, #36	; 0x24
 800473c:	2108      	movs	r1, #8
 800473e:	0020      	movs	r0, r4
 8004740:	300f      	adds	r0, #15
 8004742:	f7ff fd44 	bl	80041ce <parseHex>
 8004746:	2800      	cmp	r0, #0
 8004748:	d0c3      	beq.n	80046d2 <slCanCheckCommand+0x2b2>
            	if (!parseHex(&line[23], 1, &maskflags.reg)) break;
 800474a:	aa07      	add	r2, sp, #28
 800474c:	2101      	movs	r1, #1
 800474e:	0020      	movs	r0, r4
 8004750:	3017      	adds	r0, #23
 8004752:	f7ff fd3c 	bl	80041ce <parseHex>
 8004756:	2800      	cmp	r0, #0
 8004758:	d0bb      	beq.n	80046d2 <slCanCheckCommand+0x2b2>
            	if (fflags.bScale == CAN_FILTERSCALE_32BIT)
 800475a:	ab05      	add	r3, sp, #20
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	075b      	lsls	r3, r3, #29
 8004760:	d531      	bpl.n	80047c6 <slCanCheckCommand+0x3a6>
					freg = slcanFillIdRegister32(idflags, id);
 8004762:	9908      	ldr	r1, [sp, #32]
 8004764:	9806      	ldr	r0, [sp, #24]
 8004766:	f000 f8d9 	bl	800491c <slcanFillIdRegister32>
 800476a:	9001      	str	r0, [sp, #4]
					mreg = slcanFillIdRegister32(maskflags, mask);
 800476c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800476e:	9807      	ldr	r0, [sp, #28]
 8004770:	f000 f8d4 	bl	800491c <slcanFillIdRegister32>
 8004774:	9002      	str	r0, [sp, #8]
            	sFilterConfig.FilterNumber = n;
 8004776:	9b03      	ldr	r3, [sp, #12]
 8004778:	930f      	str	r3, [sp, #60]	; 0x3c
            	sFilterConfig.BankNumber = b;
 800477a:	9b04      	ldr	r3, [sp, #16]
 800477c:	9313      	str	r3, [sp, #76]	; 0x4c
            	sFilterConfig.FilterActivation = fflags.bFilterActivation; // ENABLE == 1
 800477e:	ab05      	add	r3, sp, #20
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	07da      	lsls	r2, r3, #31
 8004784:	0fd2      	lsrs	r2, r2, #31
 8004786:	9212      	str	r2, [sp, #72]	; 0x48
				sFilterConfig.FilterMode = fflags.bMode; // CAN_FILTERMODE_IDLIST == 1
 8004788:	079a      	lsls	r2, r3, #30
 800478a:	0fd2      	lsrs	r2, r2, #31
 800478c:	9210      	str	r2, [sp, #64]	; 0x40
				sFilterConfig.FilterScale = fflags.bScale;  // CAN_FILTERSCALE_32BIT == 1
 800478e:	075a      	lsls	r2, r3, #29
 8004790:	0fd2      	lsrs	r2, r2, #31
 8004792:	9211      	str	r2, [sp, #68]	; 0x44
				sFilterConfig.FilterFIFOAssignment = fflags.bFIFO;
 8004794:	071b      	lsls	r3, r3, #28
 8004796:	0fdb      	lsrs	r3, r3, #31
 8004798:	930e      	str	r3, [sp, #56]	; 0x38
				sFilterConfig.FilterIdHigh = freg.h.reg;
 800479a:	ab01      	add	r3, sp, #4
 800479c:	881a      	ldrh	r2, [r3, #0]
 800479e:	920a      	str	r2, [sp, #40]	; 0x28
				sFilterConfig.FilterIdLow = freg.l.reg;
 80047a0:	885b      	ldrh	r3, [r3, #2]
 80047a2:	930b      	str	r3, [sp, #44]	; 0x2c
				sFilterConfig.FilterMaskIdHigh = mreg.h.reg;
 80047a4:	ab02      	add	r3, sp, #8
 80047a6:	881a      	ldrh	r2, [r3, #0]
 80047a8:	920c      	str	r2, [sp, #48]	; 0x30
				sFilterConfig.FilterMaskIdLow = mreg.l.reg;
 80047aa:	885b      	ldrh	r3, [r3, #2]
 80047ac:	930d      	str	r3, [sp, #52]	; 0x34
				slcanSetOutputChar('M');
 80047ae:	204d      	movs	r0, #77	; 0x4d
 80047b0:	f7ff fce4 	bl	800417c <slcanSetOutputChar>
				if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) == HAL_OK)
 80047b4:	a90a      	add	r1, sp, #40	; 0x28
 80047b6:	481a      	ldr	r0, [pc, #104]	; (8004820 <slCanCheckCommand+0x400>)
 80047b8:	f7fb fd90 	bl	80002dc <HAL_CAN_ConfigFilter>
 80047bc:	2800      	cmp	r0, #0
 80047be:	d10d      	bne.n	80047dc <slCanCheckCommand+0x3bc>
					result = terminator;
 80047c0:	4b18      	ldr	r3, [pc, #96]	; (8004824 <slCanCheckCommand+0x404>)
 80047c2:	781d      	ldrb	r5, [r3, #0]
 80047c4:	e644      	b.n	8004450 <slCanCheckCommand+0x30>
            		freg = slcanFillIdRegister16(idflags, id);
 80047c6:	9908      	ldr	r1, [sp, #32]
 80047c8:	9806      	ldr	r0, [sp, #24]
 80047ca:	f000 f8e1 	bl	8004990 <slcanFillIdRegister16>
 80047ce:	9001      	str	r0, [sp, #4]
            		mreg = slcanFillIdRegister16(maskflags, mask);
 80047d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047d2:	9807      	ldr	r0, [sp, #28]
 80047d4:	f000 f8dc 	bl	8004990 <slcanFillIdRegister16>
 80047d8:	9002      	str	r0, [sp, #8]
 80047da:	e7cc      	b.n	8004776 <slCanCheckCommand+0x356>
	uint8_t result = SLCAN_BELL;
 80047dc:	2507      	movs	r5, #7
 80047de:	e637      	b.n	8004450 <slCanCheckCommand+0x30>
        	 if ((line[1] == 'o') && (line[2] == 'o') && (line[3] == 't')){
 80047e0:	7863      	ldrb	r3, [r4, #1]
 80047e2:	2b6f      	cmp	r3, #111	; 0x6f
 80047e4:	d001      	beq.n	80047ea <slCanCheckCommand+0x3ca>
	uint8_t result = SLCAN_BELL;
 80047e6:	2507      	movs	r5, #7
 80047e8:	e632      	b.n	8004450 <slCanCheckCommand+0x30>
        	 if ((line[1] == 'o') && (line[2] == 'o') && (line[3] == 't')){
 80047ea:	78a3      	ldrb	r3, [r4, #2]
 80047ec:	2b6f      	cmp	r3, #111	; 0x6f
 80047ee:	d001      	beq.n	80047f4 <slCanCheckCommand+0x3d4>
	uint8_t result = SLCAN_BELL;
 80047f0:	2507      	movs	r5, #7
 80047f2:	e62d      	b.n	8004450 <slCanCheckCommand+0x30>
        	 if ((line[1] == 'o') && (line[2] == 'o') && (line[3] == 't')){
 80047f4:	78e3      	ldrb	r3, [r4, #3]
 80047f6:	2b74      	cmp	r3, #116	; 0x74
 80047f8:	d001      	beq.n	80047fe <slCanCheckCommand+0x3de>
	uint8_t result = SLCAN_BELL;
 80047fa:	2507      	movs	r5, #7
 80047fc:	e628      	b.n	8004450 <slCanCheckCommand+0x30>
        		 line[0] = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	7023      	strb	r3, [r4, #0]
        		 line[1] = 0;
 8004802:	7063      	strb	r3, [r4, #1]
        		 line[2] = 0;
 8004804:	70a3      	strb	r3, [r4, #2]
        		 line[3] = 0;
 8004806:	70e3      	strb	r3, [r4, #3]
        		 RebootToBootloader();
 8004808:	f7ff fafc 	bl	8003e04 <RebootToBootloader>
	uint8_t result = SLCAN_BELL;
 800480c:	2507      	movs	r5, #7
 800480e:	e61f      	b.n	8004450 <slCanCheckCommand+0x30>
 8004810:	2507      	movs	r5, #7
 8004812:	e61d      	b.n	8004450 <slCanCheckCommand+0x30>
 8004814:	2507      	movs	r5, #7
 8004816:	e61b      	b.n	8004450 <slCanCheckCommand+0x30>
 8004818:	2507      	movs	r5, #7
 800481a:	e619      	b.n	8004450 <slCanCheckCommand+0x30>
 800481c:	2507      	movs	r5, #7
 800481e:	e617      	b.n	8004450 <slCanCheckCommand+0x30>
 8004820:	200004e8 	.word	0x200004e8
 8004824:	20000114 	.word	0x20000114

08004828 <slcan_getState>:
 * @param  none
 * @retval slcan state
 */
uint8_t slcan_getState()
{
	return state;
 8004828:	4b01      	ldr	r3, [pc, #4]	; (8004830 <slcan_getState+0x8>)
 800482a:	7818      	ldrb	r0, [r3, #0]
}
 800482c:	4770      	bx	lr
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	2000024a 	.word	0x2000024a

08004834 <slcanReciveCanFrame>:
 * @param  canmsg Pointer to can message
 * 			step Current step
 * @retval Next character to print out
 */
uint8_t slcanReciveCanFrame(CanRxMsgTypeDef *pRxMsg)
{
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	0005      	movs	r5, r0
	uint8_t i;

	// type
	if (pRxMsg->IDE == CAN_ID_EXT) {
 8004838:	6883      	ldr	r3, [r0, #8]
 800483a:	2b04      	cmp	r3, #4
 800483c:	d018      	beq.n	8004870 <slcanReciveCanFrame+0x3c>
		{
			slcanSetOutputAsHex(((uint8_t*)&pRxMsg->ExtId)[i - 1]);
		}
	} else
	{
		if (pRxMsg->RTR == CAN_RTR_REMOTE)
 800483e:	68c3      	ldr	r3, [r0, #12]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d02a      	beq.n	800489a <slcanReciveCanFrame+0x66>
		{
			slcanSetOutputChar('r');
		}
		else
		{
			slcanSetOutputChar('t');
 8004844:	2074      	movs	r0, #116	; 0x74
 8004846:	f7ff fc99 	bl	800417c <slcanSetOutputChar>
		}
		//id
		slCanSendNibble(((uint8_t*)&pRxMsg->StdId)[1] & 0x0F);
 800484a:	786b      	ldrb	r3, [r5, #1]
 800484c:	200f      	movs	r0, #15
 800484e:	4018      	ands	r0, r3
 8004850:	f7ff fca8 	bl	80041a4 <slCanSendNibble>
		slcanSetOutputAsHex(((uint8_t*)&pRxMsg->StdId)[0]);
 8004854:	7828      	ldrb	r0, [r5, #0]
 8004856:	f7ff fcb0 	bl	80041ba <slcanSetOutputAsHex>
	}
	// length
	slCanSendNibble(pRxMsg->DLC);
 800485a:	7c28      	ldrb	r0, [r5, #16]
 800485c:	f7ff fca2 	bl	80041a4 <slCanSendNibble>

	//data
	if ((pRxMsg->DLC > 0) && (pRxMsg->RTR != CAN_RTR_REMOTE))
 8004860:	692b      	ldr	r3, [r5, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d026      	beq.n	80048b4 <slcanReciveCanFrame+0x80>
 8004866:	68eb      	ldr	r3, [r5, #12]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d023      	beq.n	80048b4 <slcanReciveCanFrame+0x80>
 800486c:	2400      	movs	r4, #0
 800486e:	e01e      	b.n	80048ae <slcanReciveCanFrame+0x7a>
		if (pRxMsg->RTR == CAN_RTR_REMOTE)
 8004870:	68c3      	ldr	r3, [r0, #12]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d004      	beq.n	8004880 <slcanReciveCanFrame+0x4c>
			slcanSetOutputChar('T');
 8004876:	2054      	movs	r0, #84	; 0x54
 8004878:	f7ff fc80 	bl	800417c <slcanSetOutputChar>
{
 800487c:	2404      	movs	r4, #4
 800487e:	e009      	b.n	8004894 <slcanReciveCanFrame+0x60>
			slcanSetOutputChar('R');
 8004880:	2052      	movs	r0, #82	; 0x52
 8004882:	f7ff fc7b 	bl	800417c <slcanSetOutputChar>
 8004886:	e7f9      	b.n	800487c <slcanReciveCanFrame+0x48>
			slcanSetOutputAsHex(((uint8_t*)&pRxMsg->ExtId)[i - 1]);
 8004888:	1d2a      	adds	r2, r5, #4
 800488a:	3c01      	subs	r4, #1
 800488c:	5d10      	ldrb	r0, [r2, r4]
 800488e:	f7ff fc94 	bl	80041ba <slcanSetOutputAsHex>
		for (i = 4; i != 0; i--)
 8004892:	b2e4      	uxtb	r4, r4
 8004894:	2c00      	cmp	r4, #0
 8004896:	d1f7      	bne.n	8004888 <slcanReciveCanFrame+0x54>
 8004898:	e7df      	b.n	800485a <slcanReciveCanFrame+0x26>
			slcanSetOutputChar('r');
 800489a:	2072      	movs	r0, #114	; 0x72
 800489c:	f7ff fc6e 	bl	800417c <slcanSetOutputChar>
 80048a0:	e7d3      	b.n	800484a <slcanReciveCanFrame+0x16>
	{
		for (i = 0;  i != pRxMsg->DLC; i ++)
		{
			slcanSetOutputAsHex(pRxMsg->Data[i]);
 80048a2:	192b      	adds	r3, r5, r4
 80048a4:	7d18      	ldrb	r0, [r3, #20]
 80048a6:	f7ff fc88 	bl	80041ba <slcanSetOutputAsHex>
		for (i = 0;  i != pRxMsg->DLC; i ++)
 80048aa:	3401      	adds	r4, #1
 80048ac:	b2e4      	uxtb	r4, r4
 80048ae:	692b      	ldr	r3, [r5, #16]
 80048b0:	429c      	cmp	r4, r3
 80048b2:	d1f6      	bne.n	80048a2 <slcanReciveCanFrame+0x6e>
		}
	}
	slcanSetOutputChar(terminator);
 80048b4:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <slcanReciveCanFrame+0x90>)
 80048b6:	7818      	ldrb	r0, [r3, #0]
 80048b8:	f7ff fc60 	bl	800417c <slcanSetOutputChar>
	slcanOutputFlush();
 80048bc:	f7ff fd48 	bl	8004350 <slcanOutputFlush>
	return 0;
}
 80048c0:	2000      	movs	r0, #0
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	20000114 	.word	0x20000114

080048c8 <CANInit>:
#include "slcan_additional.h"

extern CAN_HandleTypeDef hcan;
extern IWDG_HandleTypeDef hiwdg;
HAL_StatusTypeDef CANInit(void)
{
 80048c8:	b510      	push	{r4, lr}
    while (HAL_CAN_Init(&hcan) == HAL_TIMEOUT)
 80048ca:	e002      	b.n	80048d2 <CANInit+0xa>
    {
    	HAL_IWDG_Refresh(&hiwdg);
 80048cc:	4804      	ldr	r0, [pc, #16]	; (80048e0 <CANInit+0x18>)
 80048ce:	f7fc fd0f 	bl	80012f0 <HAL_IWDG_Refresh>
    while (HAL_CAN_Init(&hcan) == HAL_TIMEOUT)
 80048d2:	4804      	ldr	r0, [pc, #16]	; (80048e4 <CANInit+0x1c>)
 80048d4:	f7fb fd78 	bl	80003c8 <HAL_CAN_Init>
 80048d8:	2803      	cmp	r0, #3
 80048da:	d0f7      	beq.n	80048cc <CANInit+0x4>
    }
    return HAL_OK;
}
 80048dc:	2000      	movs	r0, #0
 80048de:	bd10      	pop	{r4, pc}
 80048e0:	200004d8 	.word	0x200004d8
 80048e4:	200004e8 	.word	0x200004e8

080048e8 <slcanClearAllFilters>:

HAL_StatusTypeDef slcanClearAllFilters(void)
{
 80048e8:	b500      	push	{lr}
 80048ea:	b08b      	sub	sp, #44	; 0x2c
	CAN_FilterConfTypeDef sFilterConfig;
	sFilterConfig.FilterNumber = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	9305      	str	r3, [sp, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80048f0:	9306      	str	r3, [sp, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80048f2:	2201      	movs	r2, #1
 80048f4:	9207      	str	r2, [sp, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80048f6:	9300      	str	r3, [sp, #0]
	sFilterConfig.FilterIdLow = 0;
 80048f8:	9301      	str	r3, [sp, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80048fa:	9302      	str	r3, [sp, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 80048fc:	9303      	str	r3, [sp, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 80048fe:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8004900:	9208      	str	r2, [sp, #32]
	sFilterConfig.BankNumber = 0;
 8004902:	9309      	str	r3, [sp, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8004904:	4669      	mov	r1, sp
 8004906:	4804      	ldr	r0, [pc, #16]	; (8004918 <slcanClearAllFilters+0x30>)
 8004908:	f7fb fce8 	bl	80002dc <HAL_CAN_ConfigFilter>
 800490c:	2800      	cmp	r0, #0
 800490e:	d101      	bne.n	8004914 <slcanClearAllFilters+0x2c>
		return HAL_ERROR;
	else
		return HAL_OK;
}
 8004910:	b00b      	add	sp, #44	; 0x2c
 8004912:	bd00      	pop	{pc}
		return HAL_ERROR;
 8004914:	2001      	movs	r0, #1
 8004916:	e7fb      	b.n	8004910 <slcanClearAllFilters+0x28>
 8004918:	200004e8 	.word	0x200004e8

0800491c <slcanFillIdRegister32>:

tCANfilter slcanFillIdRegister32(tCANFilterFlagsId fl, uint32_t id)
{
 800491c:	b510      	push	{r4, lr}
 800491e:	b082      	sub	sp, #8
	tCANfilter f;
	f.h.reg = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	466a      	mov	r2, sp
 8004924:	8013      	strh	r3, [r2, #0]
	f.l.reg = 0;
 8004926:	8053      	strh	r3, [r2, #2]

	f.l.f32.RTR = fl.bRTR1;
 8004928:	07c3      	lsls	r3, r0, #31
 800492a:	0fdb      	lsrs	r3, r3, #31
 800492c:	2201      	movs	r2, #1
 800492e:	4013      	ands	r3, r2
	f.l.f32.IDE = fl.bExtedned1;
 8004930:	0784      	lsls	r4, r0, #30
 8004932:	0fe4      	lsrs	r4, r4, #31
 8004934:	4022      	ands	r2, r4
 8004936:	0092      	lsls	r2, r2, #2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4313      	orrs	r3, r2
 800493c:	466a      	mov	r2, sp
 800493e:	7093      	strb	r3, [r2, #2]
	if (fl.bExtedned1)
 8004940:	0783      	lsls	r3, r0, #30
 8004942:	d411      	bmi.n	8004968 <slcanFillIdRegister32+0x4c>
	{
		f.l.f32.EXID4_0 = id;
		f.l.f32.EXID12_5 = id >> 5;
		f.h.f32.EXID17_13 = id >> 13;
	} else {
		f.h.f32.STID2_0 = id;
 8004944:	014a      	lsls	r2, r1, #5
 8004946:	466b      	mov	r3, sp
 8004948:	7818      	ldrb	r0, [r3, #0]
 800494a:	231f      	movs	r3, #31
 800494c:	4003      	ands	r3, r0
 800494e:	4313      	orrs	r3, r2
 8004950:	466a      	mov	r2, sp
 8004952:	7013      	strb	r3, [r2, #0]
		f.h.f32.STID10_3 = id >> 3;
 8004954:	08c9      	lsrs	r1, r1, #3
 8004956:	7051      	strb	r1, [r2, #1]
	}
	return f;
 8004958:	9b00      	ldr	r3, [sp, #0]
 800495a:	0c1a      	lsrs	r2, r3, #16
 800495c:	0412      	lsls	r2, r2, #16
 800495e:	0418      	lsls	r0, r3, #16
 8004960:	0c00      	lsrs	r0, r0, #16
 8004962:	4310      	orrs	r0, r2
}
 8004964:	b002      	add	sp, #8
 8004966:	bd10      	pop	{r4, pc}
		f.l.f32.EXID4_0 = id;
 8004968:	00ca      	lsls	r2, r1, #3
 800496a:	466b      	mov	r3, sp
 800496c:	7898      	ldrb	r0, [r3, #2]
 800496e:	2307      	movs	r3, #7
 8004970:	4003      	ands	r3, r0
 8004972:	4313      	orrs	r3, r2
 8004974:	466a      	mov	r2, sp
 8004976:	7093      	strb	r3, [r2, #2]
		f.l.f32.EXID12_5 = id >> 5;
 8004978:	094b      	lsrs	r3, r1, #5
 800497a:	70d3      	strb	r3, [r2, #3]
		f.h.f32.EXID17_13 = id >> 13;
 800497c:	0b49      	lsrs	r1, r1, #13
 800497e:	231f      	movs	r3, #31
 8004980:	400b      	ands	r3, r1
 8004982:	7811      	ldrb	r1, [r2, #0]
 8004984:	221f      	movs	r2, #31
 8004986:	4391      	bics	r1, r2
 8004988:	4319      	orrs	r1, r3
 800498a:	466b      	mov	r3, sp
 800498c:	7019      	strb	r1, [r3, #0]
 800498e:	e7e3      	b.n	8004958 <slcanFillIdRegister32+0x3c>

08004990 <slcanFillIdRegister16>:

tCANfilter slcanFillIdRegister16(tCANFilterFlagsId fl, uint32_t id)
{
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	b082      	sub	sp, #8
	tCANfilter f;
	f.h.reg = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	466a      	mov	r2, sp
 8004998:	8013      	strh	r3, [r2, #0]
	f.l.reg = 0;
 800499a:	8053      	strh	r3, [r2, #2]

	f.l.f16.RTR = fl.bRTR1;
 800499c:	07c3      	lsls	r3, r0, #31
 800499e:	0fdb      	lsrs	r3, r3, #31
 80049a0:	2201      	movs	r2, #1
 80049a2:	4013      	ands	r3, r2
	f.l.f16.IDE = fl.bExtedned1;
 80049a4:	0784      	lsls	r4, r0, #30
 80049a6:	0fe4      	lsrs	r4, r4, #31
 80049a8:	4022      	ands	r2, r4
 80049aa:	0112      	lsls	r2, r2, #4
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4313      	orrs	r3, r2
 80049b0:	466a      	mov	r2, sp
 80049b2:	7093      	strb	r3, [r2, #2]
	if (fl.bExtedned1)
 80049b4:	b2c5      	uxtb	r5, r0
 80049b6:	07ab      	lsls	r3, r5, #30
 80049b8:	d511      	bpl.n	80049de <slcanFillIdRegister16+0x4e>
	{
		f.l.f16.STID2_0 = id;
 80049ba:	014c      	lsls	r4, r1, #5
 80049bc:	7892      	ldrb	r2, [r2, #2]
 80049be:	231f      	movs	r3, #31
 80049c0:	4013      	ands	r3, r2
 80049c2:	0022      	movs	r2, r4
 80049c4:	431a      	orrs	r2, r3
		f.l.f16.STID10_3 = id >> 3;
 80049c6:	08cb      	lsrs	r3, r1, #3
 80049c8:	466c      	mov	r4, sp
 80049ca:	70e3      	strb	r3, [r4, #3]
		f.l.f16.EXID17_15 = id >> 8;
 80049cc:	0a0c      	lsrs	r4, r1, #8
 80049ce:	2307      	movs	r3, #7
 80049d0:	401c      	ands	r4, r3
 80049d2:	b2d3      	uxtb	r3, r2
 80049d4:	2207      	movs	r2, #7
 80049d6:	4393      	bics	r3, r2
 80049d8:	4323      	orrs	r3, r4
 80049da:	466a      	mov	r2, sp
 80049dc:	7093      	strb	r3, [r2, #2]
	}

	f.l.f16.RTR = fl.bRTR2;
 80049de:	0744      	lsls	r4, r0, #29
 80049e0:	0fe4      	lsrs	r4, r4, #31
 80049e2:	2601      	movs	r6, #1
 80049e4:	4034      	ands	r4, r6
 80049e6:	00e4      	lsls	r4, r4, #3
 80049e8:	466b      	mov	r3, sp
 80049ea:	789b      	ldrb	r3, [r3, #2]
 80049ec:	2208      	movs	r2, #8
 80049ee:	4393      	bics	r3, r2
	f.l.f16.IDE = fl.bExtedned2;
 80049f0:	0702      	lsls	r2, r0, #28
 80049f2:	0fd2      	lsrs	r2, r2, #31
 80049f4:	4032      	ands	r2, r6
 80049f6:	0112      	lsls	r2, r2, #4
 80049f8:	4323      	orrs	r3, r4
 80049fa:	0018      	movs	r0, r3
 80049fc:	2310      	movs	r3, #16
 80049fe:	4398      	bics	r0, r3
 8004a00:	4310      	orrs	r0, r2
 8004a02:	466b      	mov	r3, sp
 8004a04:	7098      	strb	r0, [r3, #2]
	if (fl.bExtedned2)
 8004a06:	072b      	lsls	r3, r5, #28
 8004a08:	d512      	bpl.n	8004a30 <slcanFillIdRegister16+0xa0>
	{
		f.h.f16.STID2_0 = id >> 16;
 8004a0a:	0c0a      	lsrs	r2, r1, #16
 8004a0c:	2007      	movs	r0, #7
 8004a0e:	4002      	ands	r2, r0
 8004a10:	0152      	lsls	r2, r2, #5
 8004a12:	466b      	mov	r3, sp
 8004a14:	781c      	ldrb	r4, [r3, #0]
 8004a16:	231f      	movs	r3, #31
 8004a18:	4023      	ands	r3, r4
		f.h.f16.STID10_3 = id >> (3 + 16);
 8004a1a:	0ccc      	lsrs	r4, r1, #19
 8004a1c:	466d      	mov	r5, sp
 8004a1e:	706c      	strb	r4, [r5, #1]
		f.h.f16.EXID17_15 = id >> (8 + 16);
 8004a20:	0e09      	lsrs	r1, r1, #24
 8004a22:	4008      	ands	r0, r1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	0019      	movs	r1, r3
 8004a28:	2307      	movs	r3, #7
 8004a2a:	4399      	bics	r1, r3
 8004a2c:	4301      	orrs	r1, r0
 8004a2e:	7029      	strb	r1, [r5, #0]
	}

	return f;
 8004a30:	9b00      	ldr	r3, [sp, #0]
 8004a32:	0c1a      	lsrs	r2, r3, #16
 8004a34:	0412      	lsls	r2, r2, #16
 8004a36:	0418      	lsls	r0, r3, #16
 8004a38:	0c00      	lsrs	r0, r0, #16
 8004a3a:	4310      	orrs	r0, r2
}
 8004a3c:	b002      	add	sp, #8
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}

08004a40 <slcanSetCANBaudRate>:

void slcanSetCANBaudRate(uint8_t br)
{ //todo it is for 75% sampling point
 8004a40:	b510      	push	{r4, lr}

	hcan.Init.SJW = CAN_SJW_2TQ;
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <slcanSetCANBaudRate+0x70>)
 8004a44:	2280      	movs	r2, #128	; 0x80
 8004a46:	0452      	lsls	r2, r2, #17
 8004a48:	60da      	str	r2, [r3, #12]
	hcan.Init.BS1 = CAN_BS1_11TQ;
 8004a4a:	22a0      	movs	r2, #160	; 0xa0
 8004a4c:	0312      	lsls	r2, r2, #12
 8004a4e:	611a      	str	r2, [r3, #16]
	hcan.Init.BS2 = CAN_BS2_4TQ;
 8004a50:	22c0      	movs	r2, #192	; 0xc0
 8004a52:	0392      	lsls	r2, r2, #14
 8004a54:	615a      	str	r2, [r3, #20]

	switch (br)
 8004a56:	2824      	cmp	r0, #36	; 0x24
 8004a58:	d806      	bhi.n	8004a68 <slcanSetCANBaudRate+0x28>
 8004a5a:	0080      	lsls	r0, r0, #2
 8004a5c:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <slcanSetCANBaudRate+0x74>)
 8004a5e:	581b      	ldr	r3, [r3, r0]
 8004a60:	469f      	mov	pc, r3
	{
		case CAN_BR_1M:
			hcan.Init.Prescaler = 3;
 8004a62:	2203      	movs	r2, #3
 8004a64:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <slcanSetCANBaudRate+0x70>)
 8004a66:	605a      	str	r2, [r3, #4]

		default:
			break;
	}

	CANInit();
 8004a68:	f7ff ff2e 	bl	80048c8 <CANInit>
}
 8004a6c:	bd10      	pop	{r4, pc}
			hcan.Init.Prescaler = 6;
 8004a6e:	2206      	movs	r2, #6
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <slcanSetCANBaudRate+0x70>)
 8004a72:	605a      	str	r2, [r3, #4]
		break;
 8004a74:	e7f8      	b.n	8004a68 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 12;
 8004a76:	220c      	movs	r2, #12
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <slcanSetCANBaudRate+0x70>)
 8004a7a:	605a      	str	r2, [r3, #4]
		break;
 8004a7c:	e7f4      	b.n	8004a68 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 24;
 8004a7e:	2218      	movs	r2, #24
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <slcanSetCANBaudRate+0x70>)
 8004a82:	605a      	str	r2, [r3, #4]
		break;
 8004a84:	e7f0      	b.n	8004a68 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 30;
 8004a86:	221e      	movs	r2, #30
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <slcanSetCANBaudRate+0x70>)
 8004a8a:	605a      	str	r2, [r3, #4]
		break;
 8004a8c:	e7ec      	b.n	8004a68 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 60;
 8004a8e:	223c      	movs	r2, #60	; 0x3c
 8004a90:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <slcanSetCANBaudRate+0x70>)
 8004a92:	605a      	str	r2, [r3, #4]
		break;
 8004a94:	e7e8      	b.n	8004a68 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 150;
 8004a96:	2296      	movs	r2, #150	; 0x96
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <slcanSetCANBaudRate+0x70>)
 8004a9a:	605a      	str	r2, [r3, #4]
		break;
 8004a9c:	e7e4      	b.n	8004a68 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 300;
 8004a9e:	2296      	movs	r2, #150	; 0x96
 8004aa0:	0052      	lsls	r2, r2, #1
 8004aa2:	4b03      	ldr	r3, [pc, #12]	; (8004ab0 <slcanSetCANBaudRate+0x70>)
 8004aa4:	605a      	str	r2, [r3, #4]
		break;
 8004aa6:	e7df      	b.n	8004a68 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 36;
 8004aa8:	2224      	movs	r2, #36	; 0x24
 8004aaa:	4b01      	ldr	r3, [pc, #4]	; (8004ab0 <slcanSetCANBaudRate+0x70>)
 8004aac:	605a      	str	r2, [r3, #4]
		break;
 8004aae:	e7db      	b.n	8004a68 <slcanSetCANBaudRate+0x28>
 8004ab0:	200004e8 	.word	0x200004e8
 8004ab4:	08005448 	.word	0x08005448

08004ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ab8:	b500      	push	{lr}
 8004aba:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004abc:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <HAL_MspInit+0x50>)
 8004abe:	6999      	ldr	r1, [r3, #24]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	4311      	orrs	r1, r2
 8004ac4:	6199      	str	r1, [r3, #24]
 8004ac6:	6999      	ldr	r1, [r3, #24]
 8004ac8:	400a      	ands	r2, r1
 8004aca:	9200      	str	r2, [sp, #0]
 8004acc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	2180      	movs	r1, #128	; 0x80
 8004ad2:	0549      	lsls	r1, r1, #21
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	61da      	str	r2, [r3, #28]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	400b      	ands	r3, r1
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	2005      	movs	r0, #5
 8004ae6:	4240      	negs	r0, r0
 8004ae8:	f7fc f804 	bl	8000af4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004aec:	2200      	movs	r2, #0
 8004aee:	2100      	movs	r1, #0
 8004af0:	2002      	movs	r0, #2
 8004af2:	4240      	negs	r0, r0
 8004af4:	f7fb fffe 	bl	8000af4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004af8:	2200      	movs	r2, #0
 8004afa:	2100      	movs	r1, #0
 8004afc:	2001      	movs	r0, #1
 8004afe:	4240      	negs	r0, r0
 8004b00:	f7fb fff8 	bl	8000af4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b04:	b003      	add	sp, #12
 8004b06:	bd00      	pop	{pc}
 8004b08:	40021000 	.word	0x40021000

08004b0c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004b0c:	b500      	push	{lr}
 8004b0e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN)
 8004b10:	6802      	ldr	r2, [r0, #0]
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <HAL_CAN_MspInit+0x44>)
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_CAN_MspInit+0x10>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8004b18:	b007      	add	sp, #28
 8004b1a:	bd00      	pop	{pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004b1c:	4a0d      	ldr	r2, [pc, #52]	; (8004b54 <HAL_CAN_MspInit+0x48>)
 8004b1e:	69d1      	ldr	r1, [r2, #28]
 8004b20:	2080      	movs	r0, #128	; 0x80
 8004b22:	0480      	lsls	r0, r0, #18
 8004b24:	4301      	orrs	r1, r0
 8004b26:	61d1      	str	r1, [r2, #28]
 8004b28:	69d3      	ldr	r3, [r2, #28]
 8004b2a:	4003      	ands	r3, r0
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b30:	23c0      	movs	r3, #192	; 0xc0
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b36:	2302      	movs	r3, #2
 8004b38:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b3e:	3303      	adds	r3, #3
 8004b40:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8004b42:	3301      	adds	r3, #1
 8004b44:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b46:	a901      	add	r1, sp, #4
 8004b48:	4803      	ldr	r0, [pc, #12]	; (8004b58 <HAL_CAN_MspInit+0x4c>)
 8004b4a:	f7fc fadb 	bl	8001104 <HAL_GPIO_Init>
}
 8004b4e:	e7e3      	b.n	8004b18 <HAL_CAN_MspInit+0xc>
 8004b50:	40006400 	.word	0x40006400
 8004b54:	40021000 	.word	0x40021000
 8004b58:	48000400 	.word	0x48000400

08004b5c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b5c:	b530      	push	{r4, r5, lr}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8004b62:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <HAL_UART_MspInit+0xa8>)
 8004b64:	6802      	ldr	r2, [r0, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d001      	beq.n	8004b6e <HAL_UART_MspInit+0x12>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004b6a:	b007      	add	sp, #28
 8004b6c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b6e:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <HAL_UART_MspInit+0xac>)
 8004b70:	69d1      	ldr	r1, [r2, #28]
 8004b72:	2080      	movs	r0, #128	; 0x80
 8004b74:	0280      	lsls	r0, r0, #10
 8004b76:	4301      	orrs	r1, r0
 8004b78:	61d1      	str	r1, [r2, #28]
 8004b7a:	69d3      	ldr	r3, [r2, #28]
 8004b7c:	4003      	ands	r3, r0
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b82:	230c      	movs	r3, #12
 8004b84:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b86:	3b0a      	subs	r3, #10
 8004b88:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8a:	2500      	movs	r5, #0
 8004b8c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b8e:	3301      	adds	r3, #1
 8004b90:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004b92:	3b02      	subs	r3, #2
 8004b94:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b96:	a901      	add	r1, sp, #4
 8004b98:	2090      	movs	r0, #144	; 0x90
 8004b9a:	05c0      	lsls	r0, r0, #23
 8004b9c:	f7fc fab2 	bl	8001104 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8004ba0:	481a      	ldr	r0, [pc, #104]	; (8004c0c <HAL_UART_MspInit+0xb0>)
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <HAL_UART_MspInit+0xb4>)
 8004ba4:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ba6:	2310      	movs	r3, #16
 8004ba8:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004baa:	6085      	str	r5, [r0, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bac:	3370      	adds	r3, #112	; 0x70
 8004bae:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bb0:	6105      	str	r5, [r0, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bb2:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004bb4:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bb6:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004bb8:	f7fc f814 	bl	8000be4 <HAL_DMA_Init>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d116      	bne.n	8004bee <HAL_UART_MspInit+0x92>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004bc0:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_UART_MspInit+0xb0>)
 8004bc2:	6623      	str	r3, [r4, #96]	; 0x60
 8004bc4:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8004bc6:	4813      	ldr	r0, [pc, #76]	; (8004c14 <HAL_UART_MspInit+0xb8>)
 8004bc8:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <HAL_UART_MspInit+0xbc>)
 8004bca:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bd0:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bd2:	2280      	movs	r2, #128	; 0x80
 8004bd4:	60c2      	str	r2, [r0, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bd6:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bd8:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004bda:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004bdc:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004bde:	f7fc f801 	bl	8000be4 <HAL_DMA_Init>
 8004be2:	2800      	cmp	r0, #0
 8004be4:	d108      	bne.n	8004bf8 <HAL_UART_MspInit+0x9c>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_UART_MspInit+0xb8>)
 8004be8:	6663      	str	r3, [r4, #100]	; 0x64
 8004bea:	625c      	str	r4, [r3, #36]	; 0x24
}
 8004bec:	e7bd      	b.n	8004b6a <HAL_UART_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8004bee:	21ae      	movs	r1, #174	; 0xae
 8004bf0:	480a      	ldr	r0, [pc, #40]	; (8004c1c <HAL_UART_MspInit+0xc0>)
 8004bf2:	f7ff fac1 	bl	8004178 <_Error_Handler>
 8004bf6:	e7e3      	b.n	8004bc0 <HAL_UART_MspInit+0x64>
      _Error_Handler(__FILE__, __LINE__);
 8004bf8:	21be      	movs	r1, #190	; 0xbe
 8004bfa:	4808      	ldr	r0, [pc, #32]	; (8004c1c <HAL_UART_MspInit+0xc0>)
 8004bfc:	f7ff fabc 	bl	8004178 <_Error_Handler>
 8004c00:	e7f1      	b.n	8004be6 <HAL_UART_MspInit+0x8a>
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	40004400 	.word	0x40004400
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	2000052c 	.word	0x2000052c
 8004c10:	40020044 	.word	0x40020044
 8004c14:	20000490 	.word	0x20000490
 8004c18:	40020058 	.word	0x40020058
 8004c1c:	080054dc 	.word	0x080054dc

08004c20 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c20:	4770      	bx	lr

08004c22 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004c22:	e7fe      	b.n	8004c22 <HardFault_Handler>

08004c24 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004c24:	4770      	bx	lr

08004c26 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c26:	4770      	bx	lr

08004c28 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004c28:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c2a:	f7fb fb37 	bl	800029c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004c2e:	f7fb ffd4 	bl	8000bda <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c32:	bd10      	pop	{r4, pc}

08004c34 <DMA1_Channel4_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 and 5 interrupts.
*/
void DMA1_Channel4_5_IRQHandler(void)
{
 8004c34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004c36:	4803      	ldr	r0, [pc, #12]	; (8004c44 <DMA1_Channel4_5_IRQHandler+0x10>)
 8004c38:	f7fc f87d 	bl	8000d36 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004c3c:	4802      	ldr	r0, [pc, #8]	; (8004c48 <DMA1_Channel4_5_IRQHandler+0x14>)
 8004c3e:	f7fc f87a 	bl	8000d36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8004c42:	bd10      	pop	{r4, pc}
 8004c44:	2000052c 	.word	0x2000052c
 8004c48:	20000490 	.word	0x20000490

08004c4c <USB_IRQHandler>:

/**
* @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
*/
void USB_IRQHandler(void)
{
 8004c4c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004c4e:	4802      	ldr	r0, [pc, #8]	; (8004c58 <USB_IRQHandler+0xc>)
 8004c50:	f7fd fbe2 	bl	8002418 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	20000988 	.word	0x20000988

08004c5c <CEC_CAN_IRQHandler>:

/* USER CODE BEGIN 1 */
extern CAN_HandleTypeDef hcan;
void CEC_CAN_IRQHandler(void)
{
 8004c5c:	b510      	push	{r4, lr}
	HAL_CAN_IRQHandler(&hcan);
 8004c5e:	4802      	ldr	r0, [pc, #8]	; (8004c68 <CEC_CAN_IRQHandler+0xc>)
 8004c60:	f7fb fd6a 	bl	8000738 <HAL_CAN_IRQHandler>
}
 8004c64:	bd10      	pop	{r4, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	200004e8 	.word	0x200004e8

08004c6c <USART2_IRQHandler>:

extern UART_HandleTypeDef huart2;
void USART2_IRQHandler(void)
{
 8004c6c:	b510      	push	{r4, lr}
	UART_HandleTypeDef * huart = &huart2;
	HAL_IWDG_Refresh(&hiwdg);
 8004c6e:	480c      	ldr	r0, [pc, #48]	; (8004ca0 <USART2_IRQHandler+0x34>)
 8004c70:	f7fc fb3e 	bl	80012f0 <HAL_IWDG_Refresh>
	if((USART2->ISR & USART_ISR_CMF) == USART_ISR_CMF) //character match interrupt
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <USART2_IRQHandler+0x38>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	039b      	lsls	r3, r3, #14
 8004c7a:	d403      	bmi.n	8004c84 <USART2_IRQHandler+0x18>
	{
		USART2->ICR |= USART_ICR_CMCF;
		HAL_UART_DMAStop(&huart2);
		HAL_UART_RxCpltCallback(&huart2);
	}
	HAL_UART_IRQHandler(&huart2);
 8004c7c:	480a      	ldr	r0, [pc, #40]	; (8004ca8 <USART2_IRQHandler+0x3c>)
 8004c7e:	f7fe fa5d 	bl	800313c <HAL_UART_IRQHandler>
}
 8004c82:	bd10      	pop	{r4, pc}
		USART2->ICR |= USART_ICR_CMCF;
 8004c84:	4a07      	ldr	r2, [pc, #28]	; (8004ca4 <USART2_IRQHandler+0x38>)
 8004c86:	6a11      	ldr	r1, [r2, #32]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	029b      	lsls	r3, r3, #10
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	6213      	str	r3, [r2, #32]
		HAL_UART_DMAStop(&huart2);
 8004c90:	4c05      	ldr	r4, [pc, #20]	; (8004ca8 <USART2_IRQHandler+0x3c>)
 8004c92:	0020      	movs	r0, r4
 8004c94:	f7fd ff82 	bl	8002b9c <HAL_UART_DMAStop>
		HAL_UART_RxCpltCallback(&huart2);
 8004c98:	0020      	movs	r0, r4
 8004c9a:	f7ff fa61 	bl	8004160 <HAL_UART_RxCpltCallback>
 8004c9e:	e7ed      	b.n	8004c7c <USART2_IRQHandler+0x10>
 8004ca0:	200004d8 	.word	0x200004d8
 8004ca4:	40004400 	.word	0x40004400
 8004ca8:	200005d4 	.word	0x200005d4

08004cac <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004cac:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <SystemInit+0x48>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	480f      	ldr	r0, [pc, #60]	; (8004cf8 <SystemInit+0x4c>)
 8004cba:	4002      	ands	r2, r0
 8004cbc:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	480e      	ldr	r0, [pc, #56]	; (8004cfc <SystemInit+0x50>)
 8004cc2:	4002      	ands	r2, r0
 8004cc4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	480d      	ldr	r0, [pc, #52]	; (8004d00 <SystemInit+0x54>)
 8004cca:	4002      	ands	r2, r0
 8004ccc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	480c      	ldr	r0, [pc, #48]	; (8004d04 <SystemInit+0x58>)
 8004cd2:	4002      	ands	r2, r0
 8004cd4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd8:	200f      	movs	r0, #15
 8004cda:	4382      	bics	r2, r0
 8004cdc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 8004cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce0:	4809      	ldr	r0, [pc, #36]	; (8004d08 <SystemInit+0x5c>)
 8004ce2:	4002      	ands	r2, r0
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce8:	438a      	bics	r2, r1
 8004cea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004cec:	2200      	movs	r2, #0
 8004cee:	609a      	str	r2, [r3, #8]

}
 8004cf0:	4770      	bx	lr
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	08ffb80c 	.word	0x08ffb80c
 8004cfc:	fef6ffff 	.word	0xfef6ffff
 8004d00:	fffbffff 	.word	0xfffbffff
 8004d04:	ffc0ffff 	.word	0xffc0ffff
 8004d08:	fffffe2c 	.word	0xfffffe2c

08004d0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004d0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8004d0e:	4c09      	ldr	r4, [pc, #36]	; (8004d34 <MX_USB_DEVICE_Init+0x28>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	4909      	ldr	r1, [pc, #36]	; (8004d38 <MX_USB_DEVICE_Init+0x2c>)
 8004d14:	0020      	movs	r0, r4
 8004d16:	f7fe fc15 	bl	8003544 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8004d1a:	4908      	ldr	r1, [pc, #32]	; (8004d3c <MX_USB_DEVICE_Init+0x30>)
 8004d1c:	0020      	movs	r0, r4
 8004d1e:	f7fe fc2d 	bl	800357c <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8004d22:	4907      	ldr	r1, [pc, #28]	; (8004d40 <MX_USB_DEVICE_Init+0x34>)
 8004d24:	0020      	movs	r0, r4
 8004d26:	f7fe fbb7 	bl	8003498 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8004d2a:	0020      	movs	r0, r4
 8004d2c:	f7fe fc2f 	bl	800358e <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004d30:	bd10      	pop	{r4, pc}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	20000664 	.word	0x20000664
 8004d38:	2000012c 	.word	0x2000012c
 8004d3c:	20000000 	.word	0x20000000
 8004d40:	2000011c 	.word	0x2000011c

08004d44 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004d44:	2000      	movs	r0, #0
 8004d46:	4770      	bx	lr

08004d48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	0005      	movs	r5, r0
 8004d4c:	000e      	movs	r6, r1
  /* USER CODE BEGIN 6 */
 uint32_t i;
 for (i =0; i != *Len; i++)
 8004d4e:	2400      	movs	r4, #0
 8004d50:	e003      	b.n	8004d5a <CDC_Receive_FS+0x12>
		 {
			 slCanCheckCommand(command);
		 }
	 } else  /* for open state proceed is done in interrupt */
	 {
		 slCanProccesInput(Buf[i]);
 8004d52:	5d28      	ldrb	r0, [r5, r4]
 8004d54:	f7ff fb3e 	bl	80043d4 <slCanProccesInput>
 for (i =0; i != *Len; i++)
 8004d58:	3401      	adds	r4, #1
 8004d5a:	6833      	ldr	r3, [r6, #0]
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	d00c      	beq.n	8004d7a <CDC_Receive_FS+0x32>
	 if (slcan_getState() == STATE_CONFIG)  /* for config state proceed multiple commands in interrupt*/
 8004d60:	f7ff fd62 	bl	8004828 <slcan_getState>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d1f4      	bne.n	8004d52 <CDC_Receive_FS+0xa>
		 if (slCanProccesInput(Buf[i]))
 8004d68:	5d28      	ldrb	r0, [r5, r4]
 8004d6a:	f7ff fb33 	bl	80043d4 <slCanProccesInput>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d0f2      	beq.n	8004d58 <CDC_Receive_FS+0x10>
			 slCanCheckCommand(command);
 8004d72:	4807      	ldr	r0, [pc, #28]	; (8004d90 <CDC_Receive_FS+0x48>)
 8004d74:	f7ff fb54 	bl	8004420 <slCanCheckCommand>
 8004d78:	e7ee      	b.n	8004d58 <CDC_Receive_FS+0x10>
	 }
 }

 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004d7a:	4c06      	ldr	r4, [pc, #24]	; (8004d94 <CDC_Receive_FS+0x4c>)
 8004d7c:	0029      	movs	r1, r5
 8004d7e:	0020      	movs	r0, r4
 8004d80:	f7fe fb9e 	bl	80034c0 <USBD_CDC_SetRxBuffer>
 USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004d84:	0020      	movs	r0, r4
 8004d86:	f7fe fbbf 	bl	8003508 <USBD_CDC_ReceivePacket>

 return (USBD_OK);
  /* USER CODE END 6 */
}
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	bd70      	pop	{r4, r5, r6, pc}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	20000180 	.word	0x20000180
 8004d94:	20000664 	.word	0x20000664

08004d98 <CDC_Control_FS>:
{
 8004d98:	b510      	push	{r4, lr}
  switch (cmd)
 8004d9a:	2822      	cmp	r0, #34	; 0x22
 8004d9c:	d101      	bne.n	8004da2 <CDC_Control_FS+0xa>
	  slcanClose();
 8004d9e:	f7ff facd 	bl	800433c <slcanClose>
}
 8004da2:	2000      	movs	r0, #0
 8004da4:	bd10      	pop	{r4, pc}
	...

08004da8 <CDC_Init_FS>:
{
 8004da8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004daa:	4c06      	ldr	r4, [pc, #24]	; (8004dc4 <CDC_Init_FS+0x1c>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	4906      	ldr	r1, [pc, #24]	; (8004dc8 <CDC_Init_FS+0x20>)
 8004db0:	0020      	movs	r0, r4
 8004db2:	f7fe fb7a 	bl	80034aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004db6:	4905      	ldr	r1, [pc, #20]	; (8004dcc <CDC_Init_FS+0x24>)
 8004db8:	0020      	movs	r0, r4
 8004dba:	f7fe fb81 	bl	80034c0 <USBD_CDC_SetRxBuffer>
}
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	20000664 	.word	0x20000664
 8004dc8:	20000908 	.word	0x20000908
 8004dcc:	20000888 	.word	0x20000888

08004dd0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	000c      	movs	r4, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004dd4:	2386      	movs	r3, #134	; 0x86
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4a0b      	ldr	r2, [pc, #44]	; (8004e08 <CDC_Transmit_FS+0x38>)
 8004dda:	58d2      	ldr	r2, [r2, r3]
  if (hcdc->TxState != 0){
 8004ddc:	3b04      	subs	r3, #4
 8004dde:	58d3      	ldr	r3, [r2, r3]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <CDC_Transmit_FS+0x18>
    return USBD_BUSY;
 8004de4:	2001      	movs	r0, #1
  memcpy(UserTxBufferFS, Buf, Len);
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
  memcpy(UserTxBufferFS, Buf, Len);
 8004de8:	4e08      	ldr	r6, [pc, #32]	; (8004e0c <CDC_Transmit_FS+0x3c>)
 8004dea:	000a      	movs	r2, r1
 8004dec:	0001      	movs	r1, r0
 8004dee:	0030      	movs	r0, r6
 8004df0:	f000 fa4e 	bl	8005290 <memcpy>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, Len);
 8004df4:	4d04      	ldr	r5, [pc, #16]	; (8004e08 <CDC_Transmit_FS+0x38>)
 8004df6:	0022      	movs	r2, r4
 8004df8:	0031      	movs	r1, r6
 8004dfa:	0028      	movs	r0, r5
 8004dfc:	f7fe fb55 	bl	80034aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004e00:	0028      	movs	r0, r5
 8004e02:	f7fe fb64 	bl	80034ce <USBD_CDC_TransmitPacket>
  return result;
 8004e06:	e7ee      	b.n	8004de6 <CDC_Transmit_FS+0x16>
 8004e08:	20000664 	.word	0x20000664
 8004e0c:	20000908 	.word	0x20000908

08004e10 <SystemClockConfig_Resume>:
  *         enable HSI, PLL and select PLL as system clock source.
  * @param  None
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8004e10:	b510      	push	{r4, lr}
  SystemClock_Config();
 8004e12:	f7ff f82f 	bl	8003e74 <SystemClock_Config>
}
 8004e16:	bd10      	pop	{r4, pc}

08004e18 <HAL_PCD_MspInit>:
{
 8004e18:	b500      	push	{lr}
 8004e1a:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 8004e1c:	6802      	ldr	r2, [r0, #0]
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <HAL_PCD_MspInit+0x38>)
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_PCD_MspInit+0x10>
}
 8004e24:	b003      	add	sp, #12
 8004e26:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 8004e28:	4a0a      	ldr	r2, [pc, #40]	; (8004e54 <HAL_PCD_MspInit+0x3c>)
 8004e2a:	69d1      	ldr	r1, [r2, #28]
 8004e2c:	2080      	movs	r0, #128	; 0x80
 8004e2e:	0400      	lsls	r0, r0, #16
 8004e30:	4301      	orrs	r1, r0
 8004e32:	61d1      	str	r1, [r2, #28]
 8004e34:	69d3      	ldr	r3, [r2, #28]
 8004e36:	4003      	ands	r3, r0
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2100      	movs	r1, #0
 8004e40:	201f      	movs	r0, #31
 8004e42:	f7fb fe57 	bl	8000af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8004e46:	201f      	movs	r0, #31
 8004e48:	f7fb fe86 	bl	8000b58 <HAL_NVIC_EnableIRQ>
}
 8004e4c:	e7ea      	b.n	8004e24 <HAL_PCD_MspInit+0xc>
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	40005c00 	.word	0x40005c00
 8004e54:	40021000 	.word	0x40021000

08004e58 <HAL_PCD_SetupStageCallback>:
{
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	0001      	movs	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004e5c:	2387      	movs	r3, #135	; 0x87
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	58c0      	ldr	r0, [r0, r3]
 8004e62:	31ed      	adds	r1, #237	; 0xed
 8004e64:	31ff      	adds	r1, #255	; 0xff
 8004e66:	f7fe fbaf 	bl	80035c8 <USBD_LL_SetupStage>
}
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <HAL_PCD_DataOutStageCallback>:
{
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	0003      	movs	r3, r0
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004e70:	2287      	movs	r2, #135	; 0x87
 8004e72:	0092      	lsls	r2, r2, #2
 8004e74:	5880      	ldr	r0, [r0, r2]
 8004e76:	00ca      	lsls	r2, r1, #3
 8004e78:	1a52      	subs	r2, r2, r1
 8004e7a:	0094      	lsls	r4, r2, #2
 8004e7c:	191b      	adds	r3, r3, r4
 8004e7e:	3319      	adds	r3, #25
 8004e80:	33ff      	adds	r3, #255	; 0xff
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	f7fe fbd4 	bl	8003630 <USBD_LL_DataOutStage>
}
 8004e88:	bd10      	pop	{r4, pc}

08004e8a <HAL_PCD_DataInStageCallback>:
{
 8004e8a:	b510      	push	{r4, lr}
 8004e8c:	0003      	movs	r3, r0
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004e8e:	2287      	movs	r2, #135	; 0x87
 8004e90:	0092      	lsls	r2, r2, #2
 8004e92:	5880      	ldr	r0, [r0, r2]
 8004e94:	00ca      	lsls	r2, r1, #3
 8004e96:	1a52      	subs	r2, r2, r1
 8004e98:	0094      	lsls	r4, r2, #2
 8004e9a:	191b      	adds	r3, r3, r4
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9e:	f7fe fc04 	bl	80036aa <USBD_LL_DataInStage>
}
 8004ea2:	bd10      	pop	{r4, pc}

08004ea4 <HAL_PCD_SOFCallback>:
{
 8004ea4:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004ea6:	2387      	movs	r3, #135	; 0x87
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	58c0      	ldr	r0, [r0, r3]
 8004eac:	f7fe fc97 	bl	80037de <USBD_LL_SOF>
}
 8004eb0:	bd10      	pop	{r4, pc}

08004eb2 <HAL_PCD_ResetCallback>:
{
 8004eb2:	b570      	push	{r4, r5, r6, lr}
 8004eb4:	0005      	movs	r5, r0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004eb6:	2487      	movs	r4, #135	; 0x87
 8004eb8:	00a4      	lsls	r4, r4, #2
 8004eba:	2101      	movs	r1, #1
 8004ebc:	5900      	ldr	r0, [r0, r4]
 8004ebe:	f7fe fc79 	bl	80037b4 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004ec2:	5928      	ldr	r0, [r5, r4]
 8004ec4:	f7fe fc53 	bl	800376e <USBD_LL_Reset>
}
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ecc <HAL_PCD_SuspendCallback>:
{
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004ed0:	2387      	movs	r3, #135	; 0x87
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	58c0      	ldr	r0, [r0, r3]
 8004ed6:	f7fe fc70 	bl	80037ba <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8004eda:	69a3      	ldr	r3, [r4, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d004      	beq.n	8004eea <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004ee0:	4a02      	ldr	r2, [pc, #8]	; (8004eec <HAL_PCD_SuspendCallback+0x20>)
 8004ee2:	6913      	ldr	r3, [r2, #16]
 8004ee4:	2106      	movs	r1, #6
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	6113      	str	r3, [r2, #16]
}
 8004eea:	bd10      	pop	{r4, pc}
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <HAL_PCD_ResumeCallback>:
{
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8004ef4:	6983      	ldr	r3, [r0, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d105      	bne.n	8004f06 <HAL_PCD_ResumeCallback+0x16>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004efa:	2387      	movs	r3, #135	; 0x87
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	58e0      	ldr	r0, [r4, r3]
 8004f00:	f7fe fc66 	bl	80037d0 <USBD_LL_Resume>
}
 8004f04:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));   
 8004f06:	4a04      	ldr	r2, [pc, #16]	; (8004f18 <HAL_PCD_ResumeCallback+0x28>)
 8004f08:	6913      	ldr	r3, [r2, #16]
 8004f0a:	2106      	movs	r1, #6
 8004f0c:	438b      	bics	r3, r1
 8004f0e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume(); 
 8004f10:	f7ff ff7e 	bl	8004e10 <SystemClockConfig_Resume>
 8004f14:	e7f1      	b.n	8004efa <HAL_PCD_ResumeCallback+0xa>
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <USBD_LL_Init>:
{
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004f20:	481f      	ldr	r0, [pc, #124]	; (8004fa0 <USBD_LL_Init+0x84>)
 8004f22:	2387      	movs	r3, #135	; 0x87
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 8004f28:	3304      	adds	r3, #4
 8004f2a:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 8004f2c:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <USBD_LL_Init+0x88>)
 8004f2e:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004f30:	2308      	movs	r3, #8
 8004f32:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004f34:	2202      	movs	r2, #2
 8004f36:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004f3c:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004f3e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004f40:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004f42:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004f44:	f7fc f9dc 	bl	8001300 <HAL_PCD_Init>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d123      	bne.n	8004f94 <USBD_LL_Init+0x78>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004f4c:	2588      	movs	r5, #136	; 0x88
 8004f4e:	00ad      	lsls	r5, r5, #2
 8004f50:	2318      	movs	r3, #24
 8004f52:	2200      	movs	r2, #0
 8004f54:	2100      	movs	r1, #0
 8004f56:	5960      	ldr	r0, [r4, r5]
 8004f58:	f7fd faee 	bl	8002538 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004f5c:	2358      	movs	r3, #88	; 0x58
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2180      	movs	r1, #128	; 0x80
 8004f62:	5960      	ldr	r0, [r4, r5]
 8004f64:	f7fd fae8 	bl	8002538 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004f68:	23c0      	movs	r3, #192	; 0xc0
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2181      	movs	r1, #129	; 0x81
 8004f6e:	5960      	ldr	r0, [r4, r5]
 8004f70:	f7fd fae2 	bl	8002538 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004f74:	2388      	movs	r3, #136	; 0x88
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	5960      	ldr	r0, [r4, r5]
 8004f7e:	f7fd fadb 	bl	8002538 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004f82:	5960      	ldr	r0, [r4, r5]
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2182      	movs	r1, #130	; 0x82
 8004f8c:	f7fd fad4 	bl	8002538 <HAL_PCDEx_PMAConfig>
}
 8004f90:	2000      	movs	r0, #0
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004f94:	219a      	movs	r1, #154	; 0x9a
 8004f96:	0049      	lsls	r1, r1, #1
 8004f98:	4803      	ldr	r0, [pc, #12]	; (8004fa8 <USBD_LL_Init+0x8c>)
 8004f9a:	f7ff f8ed 	bl	8004178 <_Error_Handler>
 8004f9e:	e7d5      	b.n	8004f4c <USBD_LL_Init+0x30>
 8004fa0:	20000988 	.word	0x20000988
 8004fa4:	40005c00 	.word	0x40005c00
 8004fa8:	08005510 	.word	0x08005510

08004fac <USBD_LL_Start>:
{
 8004fac:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004fae:	2388      	movs	r3, #136	; 0x88
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	58c0      	ldr	r0, [r0, r3]
 8004fb4:	f7fc fa04 	bl	80013c0 <HAL_PCD_Start>
  switch (hal_status) {
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d003      	beq.n	8004fc4 <USBD_LL_Start+0x18>
 8004fbc:	2802      	cmp	r0, #2
 8004fbe:	d003      	beq.n	8004fc8 <USBD_LL_Start+0x1c>
      usb_status = USBD_FAIL;
 8004fc0:	2002      	movs	r0, #2
}
 8004fc2:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	e7fc      	b.n	8004fc2 <USBD_LL_Start+0x16>
      usb_status = USBD_BUSY;
 8004fc8:	2001      	movs	r0, #1
    break;
 8004fca:	e7fa      	b.n	8004fc2 <USBD_LL_Start+0x16>

08004fcc <USBD_LL_OpenEP>:
{
 8004fcc:	b510      	push	{r4, lr}
 8004fce:	0014      	movs	r4, r2
 8004fd0:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004fd2:	2388      	movs	r3, #136	; 0x88
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	58c0      	ldr	r0, [r0, r3]
 8004fd8:	0023      	movs	r3, r4
 8004fda:	f7fc fa19 	bl	8001410 <HAL_PCD_EP_Open>
  switch (hal_status) {
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d003      	beq.n	8004fea <USBD_LL_OpenEP+0x1e>
 8004fe2:	2802      	cmp	r0, #2
 8004fe4:	d003      	beq.n	8004fee <USBD_LL_OpenEP+0x22>
      usb_status = USBD_FAIL;
 8004fe6:	2002      	movs	r0, #2
}
 8004fe8:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 8004fea:	2000      	movs	r0, #0
 8004fec:	e7fc      	b.n	8004fe8 <USBD_LL_OpenEP+0x1c>
      usb_status = USBD_BUSY;
 8004fee:	2001      	movs	r0, #1
    break;
 8004ff0:	e7fa      	b.n	8004fe8 <USBD_LL_OpenEP+0x1c>

08004ff2 <USBD_LL_CloseEP>:
{
 8004ff2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004ff4:	2388      	movs	r3, #136	; 0x88
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	58c0      	ldr	r0, [r0, r3]
 8004ffa:	f7fc fbb3 	bl	8001764 <HAL_PCD_EP_Close>
  switch (hal_status) {
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d003      	beq.n	800500a <USBD_LL_CloseEP+0x18>
 8005002:	2802      	cmp	r0, #2
 8005004:	d003      	beq.n	800500e <USBD_LL_CloseEP+0x1c>
      usb_status = USBD_FAIL;
 8005006:	2002      	movs	r0, #2
}
 8005008:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 800500a:	2000      	movs	r0, #0
 800500c:	e7fc      	b.n	8005008 <USBD_LL_CloseEP+0x16>
      usb_status = USBD_BUSY;
 800500e:	2001      	movs	r0, #1
    break;
 8005010:	e7fa      	b.n	8005008 <USBD_LL_CloseEP+0x16>

08005012 <USBD_LL_StallEP>:
{
 8005012:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005014:	2388      	movs	r3, #136	; 0x88
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	58c0      	ldr	r0, [r0, r3]
 800501a:	f7fc fd95 	bl	8001b48 <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 800501e:	2800      	cmp	r0, #0
 8005020:	d003      	beq.n	800502a <USBD_LL_StallEP+0x18>
 8005022:	2802      	cmp	r0, #2
 8005024:	d003      	beq.n	800502e <USBD_LL_StallEP+0x1c>
      usb_status = USBD_FAIL;
 8005026:	2002      	movs	r0, #2
}
 8005028:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 800502a:	2000      	movs	r0, #0
 800502c:	e7fc      	b.n	8005028 <USBD_LL_StallEP+0x16>
      usb_status = USBD_BUSY;
 800502e:	2001      	movs	r0, #1
    break;
 8005030:	e7fa      	b.n	8005028 <USBD_LL_StallEP+0x16>

08005032 <USBD_LL_ClearStallEP>:
{
 8005032:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005034:	2388      	movs	r3, #136	; 0x88
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	58c0      	ldr	r0, [r0, r3]
 800503a:	f7fc fde7 	bl	8001c0c <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 800503e:	2800      	cmp	r0, #0
 8005040:	d003      	beq.n	800504a <USBD_LL_ClearStallEP+0x18>
 8005042:	2802      	cmp	r0, #2
 8005044:	d003      	beq.n	800504e <USBD_LL_ClearStallEP+0x1c>
      usb_status = USBD_FAIL;
 8005046:	2002      	movs	r0, #2
}
 8005048:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 800504a:	2000      	movs	r0, #0
 800504c:	e7fc      	b.n	8005048 <USBD_LL_ClearStallEP+0x16>
      usb_status = USBD_BUSY;
 800504e:	2001      	movs	r0, #1
    break;
 8005050:	e7fa      	b.n	8005048 <USBD_LL_ClearStallEP+0x16>

08005052 <USBD_LL_IsStallEP>:
{
 8005052:	000a      	movs	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005054:	2388      	movs	r3, #136	; 0x88
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 800505a:	b249      	sxtb	r1, r1
 800505c:	2900      	cmp	r1, #0
 800505e:	db09      	blt.n	8005074 <USBD_LL_IsStallEP+0x22>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005060:	217f      	movs	r1, #127	; 0x7f
 8005062:	4011      	ands	r1, r2
 8005064:	00ca      	lsls	r2, r1, #3
 8005066:	1a51      	subs	r1, r2, r1
 8005068:	008a      	lsls	r2, r1, #2
 800506a:	189b      	adds	r3, r3, r2
 800506c:	330b      	adds	r3, #11
 800506e:	33ff      	adds	r3, #255	; 0xff
 8005070:	7818      	ldrb	r0, [r3, #0]
}
 8005072:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005074:	217f      	movs	r1, #127	; 0x7f
 8005076:	4011      	ands	r1, r2
 8005078:	00c8      	lsls	r0, r1, #3
 800507a:	1a41      	subs	r1, r0, r1
 800507c:	008a      	lsls	r2, r1, #2
 800507e:	189b      	adds	r3, r3, r2
 8005080:	332a      	adds	r3, #42	; 0x2a
 8005082:	7818      	ldrb	r0, [r3, #0]
 8005084:	e7f5      	b.n	8005072 <USBD_LL_IsStallEP+0x20>

08005086 <USBD_LL_SetUSBAddress>:
{
 8005086:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005088:	2388      	movs	r3, #136	; 0x88
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	58c0      	ldr	r0, [r0, r3]
 800508e:	f7fc f9a3 	bl	80013d8 <HAL_PCD_SetAddress>
  switch (hal_status) {
 8005092:	2800      	cmp	r0, #0
 8005094:	d003      	beq.n	800509e <USBD_LL_SetUSBAddress+0x18>
 8005096:	2802      	cmp	r0, #2
 8005098:	d003      	beq.n	80050a2 <USBD_LL_SetUSBAddress+0x1c>
      usb_status = USBD_FAIL;
 800509a:	2002      	movs	r0, #2
}
 800509c:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 800509e:	2000      	movs	r0, #0
 80050a0:	e7fc      	b.n	800509c <USBD_LL_SetUSBAddress+0x16>
      usb_status = USBD_BUSY;
 80050a2:	2001      	movs	r0, #1
    break;
 80050a4:	e7fa      	b.n	800509c <USBD_LL_SetUSBAddress+0x16>

080050a6 <USBD_LL_Transmit>:
{
 80050a6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80050a8:	2488      	movs	r4, #136	; 0x88
 80050aa:	00a4      	lsls	r4, r4, #2
 80050ac:	5900      	ldr	r0, [r0, r4]
 80050ae:	f7fc fe31 	bl	8001d14 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d003      	beq.n	80050be <USBD_LL_Transmit+0x18>
 80050b6:	2802      	cmp	r0, #2
 80050b8:	d003      	beq.n	80050c2 <USBD_LL_Transmit+0x1c>
      usb_status = USBD_FAIL;
 80050ba:	2002      	movs	r0, #2
}
 80050bc:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 80050be:	2000      	movs	r0, #0
 80050c0:	e7fc      	b.n	80050bc <USBD_LL_Transmit+0x16>
      usb_status = USBD_BUSY;
 80050c2:	2001      	movs	r0, #1
    break;
 80050c4:	e7fa      	b.n	80050bc <USBD_LL_Transmit+0x16>

080050c6 <USBD_LL_PrepareReceive>:
{
 80050c6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80050c8:	2488      	movs	r4, #136	; 0x88
 80050ca:	00a4      	lsls	r4, r4, #2
 80050cc:	5900      	ldr	r0, [r0, r4]
 80050ce:	f7fc fc31 	bl	8001934 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d003      	beq.n	80050de <USBD_LL_PrepareReceive+0x18>
 80050d6:	2802      	cmp	r0, #2
 80050d8:	d003      	beq.n	80050e2 <USBD_LL_PrepareReceive+0x1c>
      usb_status = USBD_FAIL;
 80050da:	2002      	movs	r0, #2
}
 80050dc:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 80050de:	2000      	movs	r0, #0
 80050e0:	e7fc      	b.n	80050dc <USBD_LL_PrepareReceive+0x16>
      usb_status = USBD_BUSY;
 80050e2:	2001      	movs	r0, #1
    break;
 80050e4:	e7fa      	b.n	80050dc <USBD_LL_PrepareReceive+0x16>

080050e6 <USBD_LL_GetRxDataSize>:
{
 80050e6:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80050e8:	2388      	movs	r3, #136	; 0x88
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	58c0      	ldr	r0, [r0, r3]
 80050ee:	f7fc fd21 	bl	8001b34 <HAL_PCD_EP_GetRxCount>
}
 80050f2:	bd10      	pop	{r4, pc}

080050f4 <USBD_static_malloc>:
}
 80050f4:	4800      	ldr	r0, [pc, #0]	; (80050f8 <USBD_static_malloc+0x4>)
 80050f6:	4770      	bx	lr
 80050f8:	2000024c 	.word	0x2000024c

080050fc <USBD_static_free>:
}
 80050fc:	4770      	bx	lr
	...

08005100 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8005100:	2312      	movs	r3, #18
 8005102:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8005104:	4800      	ldr	r0, [pc, #0]	; (8005108 <USBD_FS_DeviceDescriptor+0x8>)
 8005106:	4770      	bx	lr
 8005108:	20000148 	.word	0x20000148

0800510c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 800510c:	2304      	movs	r3, #4
 800510e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005110:	4800      	ldr	r0, [pc, #0]	; (8005114 <USBD_FS_LangIDStrDescriptor+0x8>)
 8005112:	4770      	bx	lr
 8005114:	2000015c 	.word	0x2000015c

08005118 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005118:	b510      	push	{r4, lr}
 800511a:	000a      	movs	r2, r1
  if(speed == 0)
 800511c:	2800      	cmp	r0, #0
 800511e:	d005      	beq.n	800512c <USBD_FS_ProductStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005120:	4905      	ldr	r1, [pc, #20]	; (8005138 <USBD_FS_ProductStrDescriptor+0x20>)
 8005122:	4806      	ldr	r0, [pc, #24]	; (800513c <USBD_FS_ProductStrDescriptor+0x24>)
 8005124:	f7fe fe0a 	bl	8003d3c <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8005128:	4803      	ldr	r0, [pc, #12]	; (8005138 <USBD_FS_ProductStrDescriptor+0x20>)
 800512a:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800512c:	4902      	ldr	r1, [pc, #8]	; (8005138 <USBD_FS_ProductStrDescriptor+0x20>)
 800512e:	4803      	ldr	r0, [pc, #12]	; (800513c <USBD_FS_ProductStrDescriptor+0x24>)
 8005130:	f7fe fe04 	bl	8003d3c <USBD_GetString>
 8005134:	e7f8      	b.n	8005128 <USBD_FS_ProductStrDescriptor+0x10>
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	20000ba8 	.word	0x20000ba8
 800513c:	0800554c 	.word	0x0800554c

08005140 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005140:	b510      	push	{r4, lr}
 8005142:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005144:	4c03      	ldr	r4, [pc, #12]	; (8005154 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005146:	0021      	movs	r1, r4
 8005148:	4803      	ldr	r0, [pc, #12]	; (8005158 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800514a:	f7fe fdf7 	bl	8003d3c <USBD_GetString>
  return USBD_StrDesc;
}
 800514e:	0020      	movs	r0, r4
 8005150:	bd10      	pop	{r4, pc}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	20000ba8 	.word	0x20000ba8
 8005158:	08005540 	.word	0x08005540

0800515c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800515c:	b510      	push	{r4, lr}
 800515e:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005160:	2800      	cmp	r0, #0
 8005162:	d005      	beq.n	8005170 <USBD_FS_SerialStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8005164:	4905      	ldr	r1, [pc, #20]	; (800517c <USBD_FS_SerialStrDescriptor+0x20>)
 8005166:	4806      	ldr	r0, [pc, #24]	; (8005180 <USBD_FS_SerialStrDescriptor+0x24>)
 8005168:	f7fe fde8 	bl	8003d3c <USBD_GetString>
  }
  return USBD_StrDesc;
}
 800516c:	4803      	ldr	r0, [pc, #12]	; (800517c <USBD_FS_SerialStrDescriptor+0x20>)
 800516e:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8005170:	4902      	ldr	r1, [pc, #8]	; (800517c <USBD_FS_SerialStrDescriptor+0x20>)
 8005172:	4803      	ldr	r0, [pc, #12]	; (8005180 <USBD_FS_SerialStrDescriptor+0x24>)
 8005174:	f7fe fde2 	bl	8003d3c <USBD_GetString>
 8005178:	e7f8      	b.n	800516c <USBD_FS_SerialStrDescriptor+0x10>
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	20000ba8 	.word	0x20000ba8
 8005180:	08005568 	.word	0x08005568

08005184 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005184:	b510      	push	{r4, lr}
 8005186:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005188:	2800      	cmp	r0, #0
 800518a:	d005      	beq.n	8005198 <USBD_FS_ConfigStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800518c:	4905      	ldr	r1, [pc, #20]	; (80051a4 <USBD_FS_ConfigStrDescriptor+0x20>)
 800518e:	4806      	ldr	r0, [pc, #24]	; (80051a8 <USBD_FS_ConfigStrDescriptor+0x24>)
 8005190:	f7fe fdd4 	bl	8003d3c <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8005194:	4803      	ldr	r0, [pc, #12]	; (80051a4 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005196:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005198:	4902      	ldr	r1, [pc, #8]	; (80051a4 <USBD_FS_ConfigStrDescriptor+0x20>)
 800519a:	4803      	ldr	r0, [pc, #12]	; (80051a8 <USBD_FS_ConfigStrDescriptor+0x24>)
 800519c:	f7fe fdce 	bl	8003d3c <USBD_GetString>
 80051a0:	e7f8      	b.n	8005194 <USBD_FS_ConfigStrDescriptor+0x10>
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	20000ba8 	.word	0x20000ba8
 80051a8:	08005524 	.word	0x08005524

080051ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80051ac:	b510      	push	{r4, lr}
 80051ae:	000a      	movs	r2, r1
  if(speed == 0)
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d005      	beq.n	80051c0 <USBD_FS_InterfaceStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80051b4:	4905      	ldr	r1, [pc, #20]	; (80051cc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80051b6:	4806      	ldr	r0, [pc, #24]	; (80051d0 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80051b8:	f7fe fdc0 	bl	8003d3c <USBD_GetString>
  }
  return USBD_StrDesc;
}
 80051bc:	4803      	ldr	r0, [pc, #12]	; (80051cc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80051be:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80051c0:	4902      	ldr	r1, [pc, #8]	; (80051cc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80051c2:	4803      	ldr	r0, [pc, #12]	; (80051d0 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80051c4:	f7fe fdba 	bl	8003d3c <USBD_GetString>
 80051c8:	e7f8      	b.n	80051bc <USBD_FS_InterfaceStrDescriptor+0x10>
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	20000ba8 	.word	0x20000ba8
 80051d0:	08005530 	.word	0x08005530

080051d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051d4:	4813      	ldr	r0, [pc, #76]	; (8005224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051d6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80051d8:	2004      	movs	r0, #4
    LDR R1, [R0]
 80051da:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80051dc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80051de:	221f      	movs	r2, #31
    CMP R1, R2
 80051e0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80051e2:	d105      	bne.n	80051f0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80051e4:	4810      	ldr	r0, [pc, #64]	; (8005228 <LoopForever+0x6>)
    LDR R1,=0x00000001
 80051e6:	2101      	movs	r1, #1
    STR R1, [R0]
 80051e8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80051ea:	4810      	ldr	r0, [pc, #64]	; (800522c <LoopForever+0xa>)
    LDR R1,=0x00000000
 80051ec:	2100      	movs	r1, #0
    STR R1, [R0]
 80051ee:	6001      	str	r1, [r0, #0]

080051f0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051f0:	480f      	ldr	r0, [pc, #60]	; (8005230 <LoopForever+0xe>)
  ldr r1, =_edata
 80051f2:	4910      	ldr	r1, [pc, #64]	; (8005234 <LoopForever+0x12>)
  ldr r2, =_sidata
 80051f4:	4a10      	ldr	r2, [pc, #64]	; (8005238 <LoopForever+0x16>)
  movs r3, #0
 80051f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051f8:	e002      	b.n	8005200 <LoopCopyDataInit>

080051fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051fe:	3304      	adds	r3, #4

08005200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005204:	d3f9      	bcc.n	80051fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005206:	4a0d      	ldr	r2, [pc, #52]	; (800523c <LoopForever+0x1a>)
  ldr r4, =_ebss
 8005208:	4c0d      	ldr	r4, [pc, #52]	; (8005240 <LoopForever+0x1e>)
  movs r3, #0
 800520a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800520c:	e001      	b.n	8005212 <LoopFillZerobss>

0800520e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800520e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005210:	3204      	adds	r2, #4

08005212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005214:	d3fb      	bcc.n	800520e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005216:	f7ff fd49 	bl	8004cac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800521a:	f000 f815 	bl	8005248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800521e:	f7fe fe63 	bl	8003ee8 <main>

08005222 <LoopForever>:

LoopForever:
    b LoopForever
 8005222:	e7fe      	b.n	8005222 <LoopForever>
  ldr   r0, =_estack
 8005224:	20001800 	.word	0x20001800
    LDR R0,=0x40021018
 8005228:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 800522c:	40010000 	.word	0x40010000
  ldr r0, =_sdata
 8005230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005234:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8005238:	0800557c 	.word	0x0800557c
  ldr r2, =_sbss
 800523c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8005240:	20000da8 	.word	0x20000da8

08005244 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005244:	e7fe      	b.n	8005244 <ADC1_IRQHandler>
	...

08005248 <__libc_init_array>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	2600      	movs	r6, #0
 800524c:	4d0c      	ldr	r5, [pc, #48]	; (8005280 <__libc_init_array+0x38>)
 800524e:	4c0d      	ldr	r4, [pc, #52]	; (8005284 <__libc_init_array+0x3c>)
 8005250:	1b64      	subs	r4, r4, r5
 8005252:	10a4      	asrs	r4, r4, #2
 8005254:	42a6      	cmp	r6, r4
 8005256:	d109      	bne.n	800526c <__libc_init_array+0x24>
 8005258:	2600      	movs	r6, #0
 800525a:	f000 f82b 	bl	80052b4 <_init>
 800525e:	4d0a      	ldr	r5, [pc, #40]	; (8005288 <__libc_init_array+0x40>)
 8005260:	4c0a      	ldr	r4, [pc, #40]	; (800528c <__libc_init_array+0x44>)
 8005262:	1b64      	subs	r4, r4, r5
 8005264:	10a4      	asrs	r4, r4, #2
 8005266:	42a6      	cmp	r6, r4
 8005268:	d105      	bne.n	8005276 <__libc_init_array+0x2e>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	00b3      	lsls	r3, r6, #2
 800526e:	58eb      	ldr	r3, [r5, r3]
 8005270:	4798      	blx	r3
 8005272:	3601      	adds	r6, #1
 8005274:	e7ee      	b.n	8005254 <__libc_init_array+0xc>
 8005276:	00b3      	lsls	r3, r6, #2
 8005278:	58eb      	ldr	r3, [r5, r3]
 800527a:	4798      	blx	r3
 800527c:	3601      	adds	r6, #1
 800527e:	e7f2      	b.n	8005266 <__libc_init_array+0x1e>
 8005280:	08005574 	.word	0x08005574
 8005284:	08005574 	.word	0x08005574
 8005288:	08005574 	.word	0x08005574
 800528c:	08005578 	.word	0x08005578

08005290 <memcpy>:
 8005290:	2300      	movs	r3, #0
 8005292:	b510      	push	{r4, lr}
 8005294:	429a      	cmp	r2, r3
 8005296:	d100      	bne.n	800529a <memcpy+0xa>
 8005298:	bd10      	pop	{r4, pc}
 800529a:	5ccc      	ldrb	r4, [r1, r3]
 800529c:	54c4      	strb	r4, [r0, r3]
 800529e:	3301      	adds	r3, #1
 80052a0:	e7f8      	b.n	8005294 <memcpy+0x4>

080052a2 <memset>:
 80052a2:	0003      	movs	r3, r0
 80052a4:	1882      	adds	r2, r0, r2
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d100      	bne.n	80052ac <memset+0xa>
 80052aa:	4770      	bx	lr
 80052ac:	7019      	strb	r1, [r3, #0]
 80052ae:	3301      	adds	r3, #1
 80052b0:	e7f9      	b.n	80052a6 <memset+0x4>
	...

080052b4 <_init>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ba:	bc08      	pop	{r3}
 80052bc:	469e      	mov	lr, r3
 80052be:	4770      	bx	lr

080052c0 <_fini>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c6:	bc08      	pop	{r3}
 80052c8:	469e      	mov	lr, r3
 80052ca:	4770      	bx	lr
